<?xml version="1.0" encoding="UTF-8" ?>
<testsuite tests="120" failures="0" name="javaslang.control.EitherTest" time="0.128" errors="0" skipped="0">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.151-b12"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/home/travis/build/rafaresearch/vavr"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/travis/build/rafaresearch/vavr"/>
    <property name="java.runtime.version" value="1.8.0_151-b12"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/local/maven-3.5.2/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="maven.conf" value="/usr/local/maven-3.5.2/conf"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="4.4.0-101-generic"/>
    <property name="library.jansi.path" value="/usr/local/maven-3.5.2/lib/jansi-native"/>
    <property name="user.home" value="/home/travis"/>
    <property name="user.timezone" value="UTC"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="travis"/>
    <property name="java.class.path" value="/usr/local/maven-3.5.2/boot/plexus-classworlds-2.5.2.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-oracle/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher package"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_151"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/usr/local/maven-3.5.2"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotHoldPropertyForAllOfRightProjectionOfLeft" time="0.009"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldThrowOnGetOnRightProjectionOfLeft" time="0.009"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldPeekOnLeftProjectionOfRight" time="0.007"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnIteratorOfRightOfLeftProjection" time="0.004"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualRightProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatNotHoldsExistsOfLeftProjectionOfLeft" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterSomeOnLeftProjectionOfLeftIfPredicateMatches" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnOtherWhenOrElseOnRightProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnFalseWhenCallingIsLeftOnRight" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnTrueWhenCallingIsRightOnRight" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldGetOnLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldMapOnLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnOtherWhenOrElseGetGivenFunctionOnLeftProjectionOfRight" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnRightWhenOrElseRunOnRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualLeftProjectionOfLeftIfObjectIsNull" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotHoldPropertyForAllOfLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldThrowOnGetOnLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnTrueWhenCallingIsLeftOnLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldSwapLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightToString" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterNoneOnLeftProjectionOfLeftIfPredicateNotMatches" time="0.003"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFlatMapLeftProjectionOfRightOnLeftProjectionOfLeft" time="0.003"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualLeftProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldHashRightProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldForEachOnLeftProjectionOfLeft" time="0.007"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnLeftWhenOrElseRunOnLeftProjectionOfLeft" time="0.004"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualRightProjectionOfRightIfObjectIsSame" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnOtherWhenOrElseOnLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnLeftWhenOrElseOnLeftProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldHashLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualRightProjectionOfRightIfObjectIsNull" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualLeftProjectionOfRightIfObjectIsSame" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfLeftToEither" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfLeftToEither" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatHoldsExistsOfRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldGetOnRightProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFoldLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnRightWhenOrElseGetGivenFunctionOnRightProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatNotHoldsForAllOfLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldHashRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualLeftIfObjectIsSame" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnLeftWhenOrElseThrowWithFunctionOnLeftProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldForEachOnRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfLeftToString" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFoldRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfLeftToString" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualRightProjectionOfLeftIfObjectIsOfDifferentType" time="0.005"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterNoneOnRightProjectionOfRightIfPredicateNotMatches" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFlatMapOnRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfLeftToJavaOptional" time="0.004"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatHoldsForAllOfRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualRightIfObjectIsNull" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfRightToNone" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFlatMapOnRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfRightToJavaOptional" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualLeftProjectionOfLeftIfObjectIsOfDifferentType" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldPeekOnRightProjectionOfRight" time="0.005"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterNoneOnRightProjectionOfLeftIfPredicateNotMatches" time="0.003"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBimapRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualLeftProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldHashRightProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualRightProjectionOfLeftIfObjectIsNull" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFlatMapOnLeftProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnFalseWhenCallingIsRightOnLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFlatMapRightProjectionOfLeftOnRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnRightWhenOrElseThrowWithFunctionOnRightProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldMapOnRightProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldHashLeftProjectionOfLeft" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualRightProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualRightProjectionOfRightIfObjectIsOfDifferentType" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnOtherWhenOrElseRunOnRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfLeftToNone" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnIteratorOfLeftOfRightProjection" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftToString" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldHashLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualLeftProjectionOfLeftIfObjectIsSame" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatHoldsExistsOfLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldForEachOnRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldThrowWhenOrElseThrowWithFunctionOnRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotHoldPropertyExistsOfRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualRightIfObjectIsSame" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfRightToEither" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfRightToEither" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnIteratorOfLeftOfLeftProjection" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterSomeOnRightProjectionOfRightIfPredicateMatches" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnOtherWhenOrElseRunOnLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldMapOnRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfRightToString" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldForEachOnLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnLeftWhenOrElseGetGivenFunctionOnLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldThrowWhenOrElseThrowWithFunctionOnLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotHoldPropertyExistsOfLeftProjectionOfRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterSomeOnLeftProjectionOfRightIfPredicateMatches" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatNotHoldsExistsOfRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualLeftIfObjectIsOfDifferentType" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBimapLeft" time="0.002"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfRightToString" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfRightToJavaOptional" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualLeftProjectionOfRightIfObjectIsOfDifferentType" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldPeekOnLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterSomeOnRightProjectionOfLeftIfPredicateMatches" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnIteratorOfRightOfRightProjection" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnRightWhenOrElseOnRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldEqualRightProjectionOfLeftIfObjectIsSame" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertRightProjectionOfRightToSome" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldPeekOnRightProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldMapOnLeftProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfLeftToSome" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualRightIfObjectIsOfDifferentType" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFlatMapOnLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualLeftProjectionOfRightIfObjectIsNull" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatHoldsForAllOfLeftProjectionOfLeft" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldConvertLeftProjectionOfLeftToJavaOptional" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldNotEqualLeftIfObjectIsNull" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldSwapRight" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldBeAwareOfPropertyThatNotHoldsForAllOfRightProjectionOfRight" time="0.001"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldFilterNoneOnLeftProjectionOfRightIfPredicateNotMatches" time="0"/>
  <testcase classname="javaslang.control.EitherTest" name="shouldReturnOtherWhenOrElseGetGivenFunctionOnRightProjectionOfLeft" time="0.001"/>
</testsuite>
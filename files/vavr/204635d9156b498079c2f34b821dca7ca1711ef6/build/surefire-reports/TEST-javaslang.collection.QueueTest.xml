<?xml version="1.0" encoding="UTF-8" ?>
<testsuite tests="663" failures="0" name="javaslang.collection.QueueTest" time="0.062" errors="0" skipped="0">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.151-b12"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/home/travis/build/rafaresearch/vavr"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/travis/build/rafaresearch/vavr"/>
    <property name="java.runtime.version" value="1.8.0_151-b12"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/local/maven-3.5.2/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="maven.conf" value="/usr/local/maven-3.5.2/conf"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="4.4.0-101-generic"/>
    <property name="library.jansi.path" value="/usr/local/maven-3.5.2/lib/jansi-native"/>
    <property name="user.home" value="/home/travis"/>
    <property name="user.timezone" value="UTC"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="travis"/>
    <property name="java.class.path" value="/usr/local/maven-3.5.2/boot/plexus-classworlds-2.5.2.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-oracle/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher package"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_151"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/usr/local/maven-3.5.2"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindLastIndexOfElementWhenEndIdLessEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldIntersperseEnc" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDequeueOption" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfLastElementEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeFrontEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastIndexOfElementEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFailDequeueOfEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFailPeekOfEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindIndexOfElementWhenStartIsGreaterEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfFirstElementEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCheckHashCodeWhenComparing" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastIndexOfElementWithEndEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetRearEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfInnerElementEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetFrontEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDequeueOfNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnPeekOption" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnPeekOfNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertAllEnc" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateBegin" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnAppendAllOfNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateInner" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTestIdexedSeqStartsWithNonIndexedSeq" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfFirstSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceOnNonNilWhenBeginIndexExceedsLowerBound" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNilOfNonNilCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtInclusivePredicateBegin" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFailIndexWhereNullPredicateFrom" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlice2OnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFailLastIndexWhereNullPredicateFrom" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveAllElementsFromNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtEnd" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtPredicateNotFound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertAllBehindOfElement" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldIntersperseNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPatchEmptyByEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSetWithNegativeIndexOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilOnSliceWhenIndicesBothAreUpperBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPatchEmptyByNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSubSequenceWhenIndicesAreWithinRange" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateBeginM" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenInsertOnNonNilAllWithNegativeIndex" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetLastElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNilDoesContainSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateInnerM" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetFirstElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPrependElementToNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInserAlltIntoNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNonNilWithOffsetCalculate1" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNonNilWithOffsetCalculate2" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNonNilWithOffsetCalculate3" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveIndxOutOfBoundsLeft" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortByNilUsingComparatorAndFunction" time="0.002"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSubSequenceOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSubSequenceFrom0OnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceOnNilWhenBeginIndexIsGreaterThanEndIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSetWithNegativeIndexOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateFromNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitPredicateAtNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductOfNonNilAndNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenCalculatingCrossProductAndThatIsNull" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendNullElementToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateLastIndexWhere" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSetWithIndexExceedingByTwoOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertAllInFrontOfElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNilWithOffsetCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtPredicateBegin" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfInnerSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortByNilUsingFunction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnInsertAllWithNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfFirstElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateReverseIteratorOfSingle" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnSubSequenceOnNonNilWhenBeginIndexExceedsLowerBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtInclusivePredicateNotFound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSubSequenceBeginningWithSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSubSequenceFrom0To0OnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindIndexOfSliceWhenStartIsGreater" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSeqWithFirstElementWhenSliceFrom0To1OnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSeqWithFirstElementWhenSubSequenceFrom0To1OnNonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPrependAllNonNilToNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPrependAllNilToNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateNonExisting" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendAllNonNilToNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenOnSubSequenceIndicesBothAreUpperBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSubSequenceWithOutOfUpperBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceOnNilWhenBeginIndexExceedsLowerBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSubSequenceWhenIndexIsWithinRange" time="0.002"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSubSequenceFrom0To0OnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitInclusivePredicateAtNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateNonExisting" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateInnerM" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputePermutationsOfNonEmptyList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSetFirstElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenInsertOnNilAllWithNegativeIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitPredicateAtNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveIndxOutOfBoundsRight" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductOfNilAndNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFullyIterateNonNilStartingAtIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnSubSequenceOnNilWhenBeginIndexExceedsLowerBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertBehindOfElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSliceFrom1To1OnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendAllNilToNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSubSequence2OnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotRemoveAllNonObjectsElementsFromNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendElementToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertIntoNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertIntoSeq" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPadEmptyToNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnIdentityWhenSubSequenceFrom0OnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSliceFrom0To0OnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputePermutationsOfEmptyList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateBegin" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnPrependAllOfNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateInner" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReverseNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotStartsNonNilOfNonNilWithOffsetEndCalculate" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastIndexOfSliceWithEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTestEndsWith" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfInnerElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendElementToNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldUseSeqAsPartialFunction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeCombinationsOfEmptyList" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateEndM" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSliceWhenIndicesAreWithinRange" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPadNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertAllIntoSeq" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortNonNilUsingComparator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfLastElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastIndexOfElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNilCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotStartsNonNilOfNonNilWithNegativeOffsetCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceWhenEndIndexExceedsUpperBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTestIdexedSeqEndsWithNonIndexedSeq" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPatchNonEmptyByNonEmpty" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateFromNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveAllExistingObjectsFromNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldInsertInFrontOfElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveNonExistingElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNilOfNilWithOffsetCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElementByPredicateEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPrependElementToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNilOfNilCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeKCombinationsOfNegativeK" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveIndxAtEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveIndxAtNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveIndxAtBegin" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductPower" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductOfNonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindLastIndexOfElementWhenEndIdLess" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeKCombinationsOfEmptyList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveFirstElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindIndexOfLastSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElementByPredicateEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceWhenBeginIndexAndEndIndexAreBothOutOfBounds" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortNilUsingComparator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveElementFromNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnSubSequenceOnNonNilWhenBeginIndexIsGreaterThanEndIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnSubSequenceOnNilWhenBeginIndexIsGreaterThanEndIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindIndexOfElementWhenStartIsGreater" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtBegin" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindLastIndexOfElementWhenSeqIsEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPrependAllNonNilToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFailIndexWhereNullPredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenInsertOnNilWithNegativeIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSetLastElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeCombinationsOfNonEmptyList" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNilDoesNotContainSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldIntersperseSingleton" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPrependAllNilToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFailLastIndexWhereNullPredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenGetWithTooBigIndexOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnSubSequenceWhenBeginIndexIsGreaterThanEndIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnInsertAllWhenExceedingUpperBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnInsertWhenExceedingUpperBound" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnSubSequenceWhenEndIndexExceedsUpperBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateSegmentLength" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveLastElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtOutOfBounds" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculatePrefixLength" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindIndexOfElementWhenSeqIsEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSliceFrom0To0OnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSetOnNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNilNotContainsSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtPredicateEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindLastIndexOfSliceWhenEndIdLess" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPadNonEmptyZeroLen" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendAllNonNilToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitAtInclusivePredicateEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitInclusivePredicateAtNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveAllObjectsFromNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateReverseIteratorOfEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindLastIndexOfSliceWhenSeqIsEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotFindIndexOfSliceWhenSeqIsEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSubSequenceFrom1OnSeqOf1" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenNilIteratorStartingAtIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductOfNonNilAndNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowSegmentLengthNullPredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateIndexWhere" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNonNilWithOffsetAtStartCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastIndexOfElementWithEnd" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveInnerElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenGetWithNegativeIndexOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeKCombinationsOfNonEmptyList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenGetWithNegativeIndexOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastIndexOfSlice" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNilOfNonNilWithOffsetCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldIntersperseMultipleElements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateCrossProductOfNilAndNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceOnNonNilWhenBeginIndexIsGreaterThanEndIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSetWithIndexExceedingByOneOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotRemoveAllNonExistingElementsFromNonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldAppendAllNilToNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenGetOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateReverseIteratorOfNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortByNonNilUsingComparatorAndFunction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowPrefixLengthNullPredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNilWhenSubSequenceFrom1To1OnNonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReverseNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSliceWhenBeginIndexIsGreaterThanEndIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveAllExistingElementsFromNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenInsertOnNonNilWithNegativeIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRemoveIndxAtNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPatchNonEmptyByEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotStartsNonNilOfNonNilWithOffsetEqualLengthCalculate" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldIterateFirstElementOfNonNilStartingAtIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPadEmptyToEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStartsNonNilOfNonNilCalculate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSubSequenceWithOutOfLowerBound" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSortByNonNilUsingFunction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedByWhereFromAndToEqualMAX_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeByStepEqualNaN" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedByWhereFromIsLessThanToAndStepCorrectDirection" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedWhereFromIsLessThanTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedByWhereFromEqualsTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedWhereFromIsGreaterThanTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedByWhereFromAndToEqualMIN_VALUE" time="0.002"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeWhereFromIsLessThanTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeByWhereFromEqualsTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeClosedByFromEqualNaN" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitLongRangeClosedByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitIntRangeClosedByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeClosedByToEqualsNaN" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeByFromEqualNaN" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeByWhereFromAndToEqualMAX_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedWhereFromAndToEqualMAX_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitIntRangeByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeWhereFromEqualsTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeByToEqualsNaN" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeWhereFromIsGreaterThanTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitCharRangeByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitLongRangeByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeByWhereFromIsGreaterThanToAndStepWrongDirection" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeClosedByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateDoubleRangeClosedByFromInfinity" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeByWhereFromAndToEqualMIN_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedWhereFromAndToEqualMIN_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateDoubleRangeByFromInfinity" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedByWhereFromIsGreaterThanToAndStepWrongDirection" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeClosedWhereFromEqualsTo" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitCharRangeClosedByStepZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeByWhereFromIsLessThanToAndStepCorrectDirection" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeWhereFromAndToEqualMAX_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateDoubleRangeClosedByFromMaxToInfinity" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeByWithBigStep" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateDoubleRangeByFromMaxToInfinity" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateRangeWhereFromAndToEqualMIN_VALUE" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldProhibitDoubleRangeClosedByStepEqualNaN" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenTailOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipAllNils" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropUntilNoneIfPredicateIsTrue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMaxByFunctionOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfFloat" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfShort" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveIntArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMaxByOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSpanNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceAllElementsOfNonNilUsingCurrNonExistingNew" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReduceRightNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlide4ElementsBySize5AndStep3" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindFirstOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanWithNonComparable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanRightNonEmpty" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSerializeDeserializeNonNil" time="0.004"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTabulateTheSeqWith0Elements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanLeftWithNonComparable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveCharArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropWhileAllIfPredicateIsTrue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfBigDecimal" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveDoubleArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfByte" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfChar" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfLong" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfBoolean" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHaveSizedSpliterator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropRightAllIfCountExceedsSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCountWhenSomeSatisfyThePredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldMkStringNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHaveImmutableSpliterator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenGroupedWithSizeZero" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFullyIterateNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfInt" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNonNilByNegativeSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeLengthOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNilWithIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenFoldRightNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMinByWithNullComparator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanRightWithNonComparable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateDifferentHashCodesForDifferentTraversables" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCountWhenAllSatisfyThePredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSomeHeadWhenCallingHeadOptionOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTabulateTheSeqCallingTheFunctionInTheRightOrder" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNonNilNotEqualsNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldClearNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfBigInteger" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeRightAllIfCountExceedsSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReduceRightOptionNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeRightAsExpectedIfCountIsLessThanSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonNilToArrayList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnHeadOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenFoldLeftNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveBooleanArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGroupedTraversableWithRemainder" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldUnzip3NonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropNoneIfCountIsNegative" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateHashCodeOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGroupedWhenTraversableLengthIsSmallerThanBlockSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenComputingMaxOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfBoolean" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNilGroupBy" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotHasNextWhenNilIterator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfExistingUniqueElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNilToHashMap" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNilToHashSet" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonEqualityOfTraversablesOfSameSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldRightNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveByteArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceAllElementsOfNilUsingCurrNew" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPartitionIntsInOddAndEvenHavingOddAndEvenNumbers" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropAsExpectedIfCountIsLessThanSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateMinByOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPartitionIntsInOddAndEvenHavingOnlyEvenNumbers" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfByte" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfChar" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfLong" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldUnzipNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceElementOfNilUsingCurrNew" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenGroupedWithNegativeSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldWriteToStderr" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldWriteToStdout" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlide5ElementsBySize2AndStep3" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlide5ElementsBySize2AndStep4" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlide5ElementsBySize2AndStep5" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldMkStringWithDelimiterNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipAllNonEmptyAndNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropRightNoneIfCountIsNegative" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonNilToJavaArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfBigDecimal" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowOnNextWhenNilIterator" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMaxByWithNullFunction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeDistinctByOfNonEmptyTraversableUsingKeyExtractor" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropRightNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPreserveSingletonInstanceOnDeserialization" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldLeftNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceLeftNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNilByPositiveStepAndNegativeSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceAllElementsOfNonNilUsingCurrNew" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenComputingSumOfStrings" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNonNilsOfSameSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeRightNoneIfCountIsNegative" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSomethingOnHasDefiniteSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldMapNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSpanNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenCallingHeadOptionOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHandleStdoutIOException" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGroupedTraversableWithEqualSizedBlocks" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfDouble" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSomeInitWhenCallingInitOptionOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlideNilBySizeAndStep" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfDouble" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfByte" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfLong" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSomeTailWhenCallingTailOptionOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateInverseMinByFunctionOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfBigInteger" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceOptionNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldClearNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldEmptyNotEqualsDifferentType" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnLastOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateInverseMaxByFunctionOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfIterable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNils" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeWhileNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateMaxByOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowIfZipWithThatIsNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMaxByWithNullComparator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeDistinctByOfEmptyTraversableUsingKeyExtractor" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldMkStringWithDelimiterNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipAllEmptyAndNonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfExistingNonUniqueElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGroupedNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropRightAsExpectedIfCountIsLessThanSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNonNilGroupByEqual" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTabulateTheSeqWith0ElementsWhenNIsNegative" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHandlePrintStreamIOException" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSizeWhenSpliterator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldMkStringWithDelimiterAndPrefixAndSuffixNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFillTheSeqWith0Elements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeUntilAllOnFalseCondition" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceElementOfNonNilUsingCurrNewWhenOneOccurrenceExists" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenLastOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnTailOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReduceLeftNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldMkStringNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeEqualityOfNonNils" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRetainAllElementsFromNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanLeftEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeUntilAsExpected" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceRightNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenCallingLastOptionOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeUntilNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfFloat" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfDouble" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfShort" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfFloat" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNilDoesContainElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveShortArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMinByWithNullFunction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfShort" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateMinByFunctionOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldUnzipNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipAllNonNilsIfThisIsSmaller" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateMaxByFunctionOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="ofAllShouldReturnTheSingletonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateSeqOfSeqUsingCons" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonEqualityOfTraversablesOfDifferentSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="ofShouldReturnTheSingletonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSomethingOnIsTraversableAgain" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfDouble" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeDistinctOfNonEmptyTraversable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeWhileAllOnTrueCondition" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropWhileCorrect" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateInstanceOfElements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlideNilBySize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfBigDecimal" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfInt" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeAllIfCountExceedsSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeUntilAllOnTrueCondition" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldUnzip3Nil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMinByOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeDistinctByOfNonEmptyTraversableUsingComparator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropUntilCorrect" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldParallelStreamAndCollectNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateInverseMinByOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfByte" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfLong" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenCallingInitOptionOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNonNilsIfThisIsSmaller" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfBigDecimal" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCallMinFunctionOncePerElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfInt" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNonEmptyAndNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenComputingAverageOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfInt" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfStrings" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCallMaxFunctionOncePerElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenPartitionNilAndPredicateIsNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonNilToHashMap" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonNilToHashSet" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStreamAndCollectNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfBigInteger" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReduceLeftOptionNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeDistinctOfEmptyTraversable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceOptionNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldEqualSameTraversableInstance" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeWhileAsExpected" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceLeftOptionNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTabulateTheSeq" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceLeftOptionNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHandleStderrIOException" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfInt" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeAverageOfBigInteger" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenMinByFunctionOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceElementOfNonNilUsingCurrNewWhenNoOccurrenceExists" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSerializeDeserializeNil" time="0.003"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNilByNegativeStepAndPositiveSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNilByZeroSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeDistinctByOfEmptyTraversableUsingComparator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveLongArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeWhileAllOnFalseCondition" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNonNilGroupByIdentity" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReduceOptionNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanLeftNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMinOfStrings" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetInitOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceRightNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNilDoesNotContainElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipEmptyAndNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNilNotContainsAllOverlappingElements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateInverseMaxByOfInts" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenCallingTailOptionOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateHashCodeOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfDouble" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeEqualityOfNils" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFillTheSeqWith0ElementsWhenNIsNegative" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNilByNegativeStepAndNegativeSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipAllNonNilsOfSameSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenComputingAverageOfStrings" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldMapFailNullMapper" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSplitNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRetainAllElementsFromNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldMapFailNullMonoid" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeNoneIfCountIsNegative" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnNoneWhenComputingMinOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldMapNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnSomeLastWhenCallingLastOptionOnNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfFloat" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHaveOrderedSpliterator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeSumOfShort" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNilContainsNoElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldRightNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotRetainAllNonExistingElementsFromNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNonNilWithIndex" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeAsExpectedIfCountIsLessThanSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNilNotEqualsNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNilNotContainsAllElements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNilToArrayList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldStreamAndCollectNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipAllNonNilsIfThatIsSmaller" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReplaceFirstOccurrenceOfNonNilUsingCurrNewWhenMultipleOccurrencesExist" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceRightOptionNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeLengthOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldTakeRightNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfNonExistingUniqueElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfBigDecimal" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReduceNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropWhileNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldParallelStreamAndCollectNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNonNilByZeroSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldHandlePrintWriterIOException" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldZipNonNilsIfThatIsSmaller" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowIfZipAllWithThatIsNull" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceRightOptionNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNonEmptyNotEqualsDifferentType" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRetainAllExistingElementsFromNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCreateListOfPrimitiveFloatArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindFirstOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPartitionIntsInOddAndEvenHavingOnlyOddNumbers" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenReduceLeftNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldIterateFirstElementOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCountWhenIsEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfFloat" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeMaxOfShort" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenInitOfNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldScanRightEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropWhileNoneIfPredicateIsFalse" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldRecognizeNonNilContainsAllOnSelf" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenComputingProductOfStrings" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenHeadOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldWriteToPrintStream" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNilToJavaArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFindLastOfNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldLeftNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldMultipleElements" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropUntilNoneOnNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfBigInteger" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfByte" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldComputeProductOfLong" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropUntilAllIfPredicateIsFalse" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFillTheSeqCallingTheSupplierInTheRightOrder" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPartitionNil" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCountWhenNoneSatisfiesThePredicate" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldWriteToPrintWriter" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenSlidingNilByNegativeSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldDropAllIfCountExceedsSize" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlideNonNilBySize1" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldSlideNonNilBySize2" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldMkStringWithDelimiterAndPrefixAndSuffixNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetOptionNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfPropertyThatHoldsForAll" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCorresponds" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowIfEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateValIfEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfExistingElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToMap" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToSet" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldNotThrowIfNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateValIfDefined" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToOption" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToCharSeq" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfNonExistingElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertEmptyToTry" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToStream" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateIsDefined" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToVector" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonEmptyValueToMatchMonad" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToEitherRightFromValue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToJavaList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateSupplierIfDefined" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFilterNotEmptyTraversable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToEitherLeftFromValue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPeekNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldBeAwareOfPropertyThatNotHoldsForAll" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetNonEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFilterNonEmptyTraversable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFilterNonEmptyTraversableAllMatch" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateIsEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenFoldNullOperator" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPeekNonNilPerformingAnAction" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFilterNotNonEmptyTraversable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToQueue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToStack" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldntCorrespondsNonNilNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateOrElseGet" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnUnderlyingValueWhenCallingOrElseTryOnNonEmptyValue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateSupplierIfEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToJavaMap" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToJavaSet" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToLazy" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToList" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToJavaArray" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFilterNotNonEmptyTraversableAllMatch" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFoldSingleElement" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToEitherRightFromValueSupplier" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldntCorrespondsNilNonNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldFilterEmptyTraversable" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldThrowWhenCallingOrElseTryOnEmptyValueAndTryIsAFailure" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonEmptyToTryUsingExceptionSupplier" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldntCorrespondsNilNil" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldReturnAlternateValueWhenCallingOrElseTryOnEmptyValue" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertNonEmptyToTry" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToJavaStream" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldCalculateOrElse" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldntCorrespondsDifferentLengths" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertEmptyToTryUsingExceptionSupplier" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPeekSingleValuePerformingAnAction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertEmptyValueToMatchMonad" time="0.001"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldPeekNonNilPerformingNoAction" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToJavaOptional" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldGetOptionEmpty" time="0"/>
  <testcase classname="javaslang.collection.QueueTest" name="shouldConvertToEitherLeftFromValueSupplier" time="0"/>
</testsuite>
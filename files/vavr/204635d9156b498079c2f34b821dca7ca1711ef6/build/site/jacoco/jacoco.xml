<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="Javaslang"><sessioninfo id="travis-job-292222ed-63ac-4720-b47b-af4d580b02f6-cbc66f61" start="1561753622300" dump="1561753662369"/><package name="javaslang/test"><class name="javaslang/test/Gen"><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/test/Gen;" line="65"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/util/function/Function;)Ljavaslang/test/Gen;" line="69"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="choose" desc="(II)Ljavaslang/test/Gen;" line="84"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="choose" desc="(JJ)Ljavaslang/test/Gen;" line="104"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="choose" desc="(DD)Ljavaslang/test/Gen;" line="128"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="choose" desc="(CC)Ljavaslang/test/Gen;" line="163"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fail" desc="()Ljavaslang/test/Gen;" line="177"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fail" desc="(Ljava/lang/String;)Ljavaslang/test/Gen;" line="188"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frequency" desc="([Ljavaslang/Tuple2;)Ljavaslang/test/Gen;" line="205"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frequency" desc="(Ljava/lang/Iterable;)Ljavaslang/test/Gen;" line="223"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="oneOf" desc="([Ljavaslang/test/Gen;)Ljavaslang/test/Gen;" line="252"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="oneOf" desc="(Ljava/lang/Iterable;)Ljavaslang/test/Gen;" line="269"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arbitrary" desc="()Ljavaslang/test/Arbitrary;" line="285"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/test/Gen;" line="296"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/test/Gen;" line="312"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/test/Gen;" line="325"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/test/Gen;" line="338"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="344"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/test/Gen;" line="349"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="365"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/test/Gen;" line="371"><counter type="INSTRUCTION" missed="8" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="381"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="386"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="396"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="406"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="411"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$unit$4" desc="(Ljava/lang/Object;)Ljavaslang/test/Gen;" line="374"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$peek$4fd579f9$1" desc="(Ljava/util/function/Consumer;Ljava/util/Random;)Ljava/lang/Object;" line="350"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$54127a0e$1" desc="(Ljava/util/function/Function;Ljava/util/Random;)Ljava/lang/Object;" line="339"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$9ee8bba4$1" desc="(Ljava/util/function/Function;Ljava/util/Random;)Ljava/lang/Object;" line="326"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filter$5b4f10d2$1" desc="(Ljava/util/function/Predicate;Ljava/util/Random;)Ljava/lang/Object;" line="298"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$arbitrary$3" desc="(I)Ljavaslang/test/Gen;" line="285"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$oneOf$2" desc="([Ljavaslang/test/Gen;Ljava/lang/Integer;)Ljava/lang/Iterable;" line="256"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$frequency$1" desc="(Ljavaslang/collection/Stream;Ljava/lang/Integer;)Ljava/lang/Iterable;" line="238"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$frequency$0" desc="(Ljavaslang/Tuple2;)Ljava/lang/Integer;" line="237"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fail$b0690a24$1" desc="(Ljava/lang/String;Ljava/util/Random;)Ljava/lang/Object;" line="189"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$6ce29680$1" desc="(CCLjava/util/Random;)Ljava/lang/Character;" line="166"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$e8a65bb$1" desc="(CLjava/util/Random;)Ljava/lang/Character;" line="164"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$67671252$1" desc="(DDLjava/util/Random;)Ljava/lang/Double;" line="144"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$b7d52b2e$1" desc="(DLjava/util/Random;)Ljava/lang/Double;" line="141"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$dbfd067b$1" desc="(JJLjava/util/Random;)Ljava/lang/Long;" line="108"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$cbecadd$1" desc="(JLjava/util/Random;)Ljava/lang/Long;" line="105"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$1ab3d701$1" desc="(IILjava/util/Random;)Ljava/lang/Integer;" line="89"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$choose$2cdf14c0$1" desc="(ILjava/util/Random;)Ljava/lang/Integer;" line="85"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$of$11bfa5c3$1" desc="(Ljavaslang/collection/Iterator;Ljava/util/Random;)Ljava/lang/Object;" line="70"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$of$ec3341b5$1" desc="(Ljava/lang/Object;Ljava/util/Random;)Ljava/lang/Object;" line="65"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="35" covered="399"/><counter type="BRANCH" missed="1" covered="29"/><counter type="LINE" missed="9" covered="78"/><counter type="COMPLEXITY" missed="7" covered="54"/><counter type="METHOD" missed="6" covered="40"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property5"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction5;)V" line="907"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction5;)Ljavaslang/test/Checkable;" line="924"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="937"><counter type="INSTRUCTION" missed="0" covered="248"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="35"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$21" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="957"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$20" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="957"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$19" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="955"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$18" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="955"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$17" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="954"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$16" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="954"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$15" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="953"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$14" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="953"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$13" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="952"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$12" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="952"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$11" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="951"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$10" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="951"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="947"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$8" desc="(I)Ljavaslang/test/Gen;" line="947"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="946"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$6" desc="(I)Ljavaslang/test/Gen;" line="946"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="945"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$4" desc="(I)Ljavaslang/test/Gen;" line="945"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="944"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="944"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="943"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="943"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$fe853583$1" desc="(Ljavaslang/CheckedFunction5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="925"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="40" covered="390"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="50"/><counter type="COMPLEXITY" missed="8" covered="23"/><counter type="METHOD" missed="8" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property6"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction6;)V" line="1000"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction6;)Ljavaslang/test/Checkable;" line="1018"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="1031"><counter type="INSTRUCTION" missed="0" covered="270"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="37"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$25" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="1053"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$24" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="1053"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$23" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1051"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$22" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1051"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$21" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1050"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$20" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1050"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$19" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1049"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$18" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1049"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$17" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1048"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$16" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1048"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$15" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1047"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$14" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1047"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$13" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1046"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$12" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1046"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$11" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1042"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$10" desc="(I)Ljavaslang/test/Gen;" line="1042"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1041"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$8" desc="(I)Ljavaslang/test/Gen;" line="1041"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1040"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$6" desc="(I)Ljavaslang/test/Gen;" line="1040"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1039"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$4" desc="(I)Ljavaslang/test/Gen;" line="1039"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1038"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="1038"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1037"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="1037"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$c82a1aea$1" desc="(Ljavaslang/CheckedFunction6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="1019"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="50" covered="429"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="53"/><counter type="COMPLEXITY" missed="10" covered="25"/><counter type="METHOD" missed="10" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property3"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction3;)V" line="733"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction3;)Ljavaslang/test/Checkable;" line="748"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="761"><counter type="INSTRUCTION" missed="0" covered="204"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="31"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$13" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="777"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$12" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="777"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$11" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="775"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$10" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="775"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="774"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$8" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="774"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="773"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$6" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="773"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="769"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$4" desc="(I)Ljavaslang/test/Gen;" line="769"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="768"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="768"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="767"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="767"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$5b92506f$1" desc="(Ljavaslang/CheckedFunction3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="749"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="20" covered="312"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="44"/><counter type="COMPLEXITY" missed="4" covered="19"/><counter type="METHOD" missed="4" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property4"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction4;)V" line="818"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction4;)Ljavaslang/test/Checkable;" line="834"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="847"><counter type="INSTRUCTION" missed="0" covered="226"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="33"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$17" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="865"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$16" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="865"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$15" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="863"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$14" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="863"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$13" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="862"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$12" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="862"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$11" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="861"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$10" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="861"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="860"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$8" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="860"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="856"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$6" desc="(I)Ljavaslang/test/Gen;" line="856"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="855"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$4" desc="(I)Ljavaslang/test/Gen;" line="855"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="854"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="854"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="853"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="853"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$66095ada$1" desc="(Ljavaslang/CheckedFunction4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="835"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="30" covered="351"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="47"/><counter type="COMPLEXITY" missed="6" covered="21"/><counter type="METHOD" missed="6" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property"><method name="&lt;init&gt;" desc="(Ljava/lang/String;)V" line="29"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="def" desc="(Ljava/lang/String;)Ljavaslang/test/Property;" line="42"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="logSatisfied" desc="(Ljava/lang/String;IJZ)V" line="50"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="logFalsified" desc="(Ljava/lang/String;IJ)V" line="58"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="logErroneous" desc="(Ljava/lang/String;IJLjava/lang/String;)V" line="62"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="log" desc="(Ljava/lang/String;)V" line="66"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arbitraryError" desc="(IILjava/lang/Throwable;)Ljava/lang/Error;" line="78"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="genError" desc="(IILjava/lang/Throwable;)Ljava/lang/Error;" line="90"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="predicateError" desc="(Ljava/lang/Throwable;)Ljava/lang/Error;" line="100"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll1;" line="111"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll2;" line="124"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll3;" line="139"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll4;" line="156"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll5;" line="175"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll6;" line="196"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll7;" line="219"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)Ljavaslang/test/Property$ForAll8;" line="244"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="266"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="19"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property1"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction1;)V" line="575"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/test/Checkable;" line="588"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="601"><counter type="INSTRUCTION" missed="0" covered="160"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="613"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$4" desc="(Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="613"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="611"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$2" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="611"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="607"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="607"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$452c253$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="589"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="234"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="38"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property2"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction2;)V" line="652"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction2;)Ljavaslang/test/Checkable;" line="666"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="679"><counter type="INSTRUCTION" missed="0" covered="182"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="29"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="693"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$8" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="693"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="691"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$6" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="691"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="690"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$4" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="690"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="686"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="686"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="685"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="685"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$b918dbc2$1" desc="(Ljavaslang/CheckedFunction2;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="667"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="10" covered="273"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="41"/><counter type="COMPLEXITY" missed="2" covered="17"/><counter type="METHOD" missed="2" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Arbitrary$1"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;Ljavaslang/test/Gen;Ljava/util/Random;)V" line="265"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="271"><counter type="INSTRUCTION" missed="2" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="next" desc="()Ljava/lang/Object;" line="276"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="27"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Checkable"><method name="check" desc="(II)Ljavaslang/test/CheckResult;" line="54"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="()Ljavaslang/test/CheckResult;" line="67"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="and" desc="(Ljavaslang/test/Checkable;)Ljavaslang/test/Checkable;" line="79"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="or" desc="(Ljavaslang/test/Checkable;)Ljavaslang/test/Checkable;" line="98"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$or$1" desc="(Ljavaslang/test/Checkable;Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="99"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$and$0" desc="(Ljavaslang/test/Checkable;Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="80"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="24"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="68"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Condition"><method name="&lt;init&gt;" desc="(ZZ)V" line="1293"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFalse" desc="()Z" line="1300"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="1288"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/CheckResult$Erroneous"><method name="&lt;init&gt;" desc="(Ljava/lang/String;ILjava/lang/Error;Ljavaslang/control/Option;)V" line="316"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSatisfied" desc="()Z" line="325"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFalsified" desc="()Z" line="330"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isErroneous" desc="()Z" line="335"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isExhausted" desc="()Z" line="340"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="propertyName" desc="()Ljava/lang/String;" line="345"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="count" desc="()I" line="350"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sample" desc="()Ljavaslang/control/Option;" line="355"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="error" desc="()Ljavaslang/control/Option;" line="360"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="365"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="3" covered="9"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deepEquals" desc="(Ljava/lang/Throwable;Ljava/lang/Throwable;)Z" line="379"><counter type="INSTRUCTION" missed="1" covered="24"/><counter type="BRANCH" missed="5" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="5" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="388"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deepHashCode" desc="(Ljava/lang/Throwable;)I" line="392"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="401"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="183"/><counter type="BRANCH" missed="8" covered="18"/><counter type="LINE" missed="0" covered="30"/><counter type="COMPLEXITY" missed="8" covered="19"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property7"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction7;)V" line="1097"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction7;)Ljavaslang/test/Checkable;" line="1116"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="1129"><counter type="INSTRUCTION" missed="0" covered="292"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$29" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="1153"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$28" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="1153"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$27" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1151"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$26" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1151"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$25" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1150"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$24" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$23" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1149"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$22" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1149"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$21" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1148"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$20" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1148"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$19" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1147"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$18" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1147"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$17" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1146"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$16" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1146"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$15" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1145"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$14" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1145"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$13" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1141"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$12" desc="(I)Ljavaslang/test/Gen;" line="1141"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$11" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1140"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$10" desc="(I)Ljavaslang/test/Gen;" line="1140"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1139"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$8" desc="(I)Ljavaslang/test/Gen;" line="1139"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1138"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$6" desc="(I)Ljavaslang/test/Gen;" line="1138"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1137"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$4" desc="(I)Ljavaslang/test/Gen;" line="1137"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1136"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="1136"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1135"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="1135"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$1499458f$1" desc="(Ljavaslang/CheckedFunction7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="1117"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="60" covered="468"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="56"/><counter type="COMPLEXITY" missed="12" covered="27"/><counter type="METHOD" missed="12" covered="22"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$Property8"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/CheckedFunction8;)V" line="1198"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="implies" desc="(Ljavaslang/CheckedFunction8;)Ljavaslang/test/Checkable;" line="1218"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Random;II)Ljavaslang/test/CheckResult;" line="1231"><counter type="INSTRUCTION" missed="0" covered="314"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="41"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$33" desc="(Ljava/lang/Throwable;)Ljavaslang/test/Property$Condition;" line="1257"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$32" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="1257"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$31" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1255"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$30" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1255"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$29" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1254"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$28" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1254"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$27" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1253"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$26" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1253"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$25" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1252"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$24" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1252"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$23" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1251"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$22" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1251"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$21" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1250"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$20" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1250"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$19" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1249"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$18" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1249"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$17" desc="(ILjava/lang/Throwable;)Ljava/lang/Object;" line="1248"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$16" desc="(Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="1248"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$15" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1244"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$14" desc="(I)Ljavaslang/test/Gen;" line="1244"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$13" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1243"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$12" desc="(I)Ljavaslang/test/Gen;" line="1243"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$11" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1242"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$10" desc="(I)Ljavaslang/test/Gen;" line="1242"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$9" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1241"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$8" desc="(I)Ljavaslang/test/Gen;" line="1241"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$7" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1240"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$6" desc="(I)Ljavaslang/test/Gen;" line="1240"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$5" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1239"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$4" desc="(I)Ljavaslang/test/Gen;" line="1239"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$3" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1238"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$check$2" desc="(I)Ljavaslang/test/Gen;" line="1238"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$1" desc="(ILjava/lang/Throwable;)Ljavaslang/test/Gen;" line="1237"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$check$0" desc="(I)Ljavaslang/test/Gen;" line="1237"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$implies$7550eff2$1" desc="(Ljavaslang/CheckedFunction8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="1219"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="70" covered="507"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="59"/><counter type="COMPLEXITY" missed="14" covered="29"/><counter type="METHOD" missed="14" covered="24"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/CheckResult"><method name="assertIsSatisfied" desc="()V" line="95"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="assertIsSatisfiedWithExhaustion" desc="(Z)V" line="107"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="assertIsFalsified" desc="()V" line="120"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="assertIsErroneous" desc="()V" line="131"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="88"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Arbitrary"><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/test/Arbitrary;" line="76"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/test/Arbitrary;" line="81"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/test/Arbitrary;" line="94"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/test/Arbitrary;" line="108"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="117"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/test/Arbitrary;" line="122"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="134"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/test/Arbitrary;" line="140"><counter type="INSTRUCTION" missed="8" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="150"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="()Z" line="155"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="165"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="176"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="181"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="integer" desc="()Ljavaslang/test/Arbitrary;" line="190"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="string" desc="(Ljavaslang/test/Gen;)Ljavaslang/test/Arbitrary;" line="211"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="list" desc="(Ljavaslang/test/Arbitrary;)Ljavaslang/test/Arbitrary;" line="235"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stream" desc="(Ljavaslang/test/Arbitrary;)Ljavaslang/test/Arbitrary;" line="263"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$stream$11" desc="(Ljavaslang/test/Arbitrary;I)Ljavaslang/test/Gen;" line="264"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$5e5ef53c$2" desc="(ILjavaslang/test/Gen;Ljava/util/Random;)Ljavaslang/collection/Stream;" line="265"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$10" desc="(Ljavaslang/test/Gen;Ljava/util/Random;Ljava/lang/Integer;)Ljavaslang/collection/Stream;" line="265"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$list$9" desc="(Ljavaslang/test/Arbitrary;I)Ljavaslang/test/Gen;" line="236"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$5e5ef53c$1" desc="(ILjavaslang/test/Gen;Ljava/util/Random;)Ljavaslang/collection/List;" line="237"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$8" desc="(Ljavaslang/test/Gen;Ljava/util/Random;Ljava/lang/Integer;)Ljavaslang/collection/List;" line="238"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$string$7" desc="(Ljavaslang/test/Gen;I)Ljavaslang/test/Gen;" line="211"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$3147a031$1" desc="(ILjavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/String;" line="211"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$6" desc="(Ljavaslang/test/Gen;Ljava/util/Random;Ljava/lang/Integer;)Ljava/lang/String;" line="212"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$integer$5" desc="(I)Ljavaslang/test/Gen;" line="190"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$dd795377$1" desc="(ILjava/util/Random;)Ljava/lang/Integer;" line="190"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unit$4" desc="(Ljavaslang/collection/Stream;I)Ljavaslang/test/Gen;" line="144"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$peek$3" desc="(Ljava/util/function/Consumer;I)Ljavaslang/test/Gen;" line="122"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$2" desc="(Ljava/util/function/Function;I)Ljavaslang/test/Gen;" line="110"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1e4a06af$1" desc="(Ljava/util/function/Function;Ljavaslang/test/Gen;Ljava/util/Random;)Ljava/lang/Object;" line="111"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$1" desc="(Ljava/util/function/Function;I)Ljavaslang/test/Gen;" line="95"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d1623d84$1" desc="(Ljava/util/function/Function;Ljavaslang/test/Gen;ILjava/util/Random;)Ljava/lang/Object;" line="96"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filter$0" desc="(Ljava/util/function/Predicate;I)Ljavaslang/test/Gen;" line="76"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="40" covered="210"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="10" covered="33"/><counter type="COMPLEXITY" missed="8" covered="30"/><counter type="METHOD" missed="7" covered="28"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll5"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="401"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction5;)Ljavaslang/test/Property$Property5;" line="417"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$329014db$1" desc="(Ljavaslang/CheckedFunction5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="417"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll4"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="361"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction4;)Ljavaslang/test/Property$Property4;" line="376"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$53a72f57$1" desc="(Ljavaslang/CheckedFunction4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="376"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="49"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll3"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="324"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction3;)Ljavaslang/test/Property$Property3;" line="338"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$3c0674d2$1" desc="(Ljavaslang/CheckedFunction3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="338"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll2"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="290"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction2;)Ljavaslang/test/Property$Property2;" line="303"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$b6c9464c$1" desc="(Ljavaslang/CheckedFunction2;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="303"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll8"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="539"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction8;)Ljavaslang/test/Property$Property8;" line="558"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$c840bd61$1" desc="(Ljavaslang/CheckedFunction8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="558"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="73"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll7"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="490"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction7;)Ljavaslang/test/Property$Property7;" line="508"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$1c3f1ce0$1" desc="(Ljavaslang/CheckedFunction7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="508"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll6"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;Ljavaslang/test/Arbitrary;)V" line="444"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction6;)Ljavaslang/test/Property$Property6;" line="461"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$a323045e$1" desc="(Ljavaslang/CheckedFunction6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="461"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Property$ForAll1"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljavaslang/test/Arbitrary;)V" line="259"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="suchThat" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/test/Property$Property1;" line="271"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$suchThat$fd8844c5$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;)Ljavaslang/test/Property$Condition;" line="271"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/Gen$1Frequency"><method name="&lt;init&gt;" desc="()V" line="228"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gen" desc="(ILjavaslang/collection/Stream;)Ljavaslang/test/Gen;" line="230"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/CheckResult$Satisfied"><method name="&lt;init&gt;" desc="(Ljava/lang/String;IZ)V" line="147"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSatisfied" desc="()Z" line="155"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFalsified" desc="()Z" line="160"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isErroneous" desc="()Z" line="165"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isExhausted" desc="()Z" line="170"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="propertyName" desc="()Ljava/lang/String;" line="175"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="count" desc="()I" line="180"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sample" desc="()Ljavaslang/control/Option;" line="185"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="error" desc="()Ljavaslang/control/Option;" line="190"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="195"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="209"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="214"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="113"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/test/CheckResult$Falsified"><method name="&lt;init&gt;" desc="(Ljava/lang/String;ILjavaslang/Tuple;)V" line="231"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSatisfied" desc="()Z" line="239"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFalsified" desc="()Z" line="244"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isErroneous" desc="()Z" line="249"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isExhausted" desc="()Z" line="254"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="propertyName" desc="()Ljava/lang/String;" line="259"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="count" desc="()I" line="264"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sample" desc="()Ljavaslang/control/Option;" line="269"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="error" desc="()Ljavaslang/control/Option;" line="274"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="279"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="293"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="298"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="113"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Gen.java"><line nr="65" mi="0" ci="5" mb="0" cb="0"/><line nr="69" mi="0" ci="5" mb="0" cb="0"/><line nr="70" mi="0" ci="6" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="2"/><line nr="85" mi="0" ci="6" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="88" mi="0" ci="4" mb="0" cb="0"/><line nr="89" mi="0" ci="16" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="2"/><line nr="105" mi="0" ci="6" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="16" mb="0" cb="0"/><line nr="128" mi="0" ci="3" mb="0" cb="2"/><line nr="129" mi="0" ci="5" mb="0" cb="0"/><line nr="131" mi="0" ci="3" mb="0" cb="2"/><line nr="132" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="3" mb="0" cb="2"/><line nr="135" mi="0" ci="5" mb="0" cb="0"/><line nr="137" mi="0" ci="3" mb="0" cb="2"/><line nr="138" mi="0" ci="5" mb="0" cb="0"/><line nr="140" mi="0" ci="4" mb="0" cb="2"/><line nr="141" mi="0" ci="6" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="0" ci="3" mb="0" cb="0"/><line nr="145" mi="0" ci="4" mb="0" cb="0"/><line nr="146" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="0" ci="11" mb="0" cb="0"/><line nr="163" mi="0" ci="3" mb="0" cb="2"/><line nr="164" mi="0" ci="6" mb="0" cb="0"/><line nr="166" mi="0" ci="14" mb="0" cb="0"/><line nr="177" mi="0" ci="3" mb="0" cb="0"/><line nr="188" mi="0" ci="3" mb="0" cb="0"/><line nr="189" mi="0" ci="5" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="2"/><line nr="207" mi="0" ci="5" mb="0" cb="0"/><line nr="209" mi="0" ci="3" mb="0" cb="0"/><line nr="210" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="0" ci="4" mb="0" cb="0"/><line nr="224" mi="0" ci="3" mb="0" cb="0"/><line nr="225" mi="0" ci="3" mb="0" cb="2"/><line nr="226" mi="0" ci="5" mb="0" cb="0"/><line nr="228" mi="0" ci="3" mb="0" cb="0"/><line nr="230" mi="0" ci="7" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="2"/><line nr="232" mi="0" ci="12" mb="0" cb="0"/><line nr="234" mi="0" ci="17" mb="0" cb="2"/><line nr="237" mi="0" ci="10" mb="0" cb="0"/><line nr="238" mi="0" ci="15" mb="0" cb="0"/><line nr="252" mi="0" ci="4" mb="0" cb="0"/><line nr="253" mi="0" ci="3" mb="0" cb="2"/><line nr="254" mi="0" ci="5" mb="0" cb="0"/><line nr="256" mi="0" ci="15" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="0" ci="3" mb="0" cb="0"/><line nr="271" mi="0" ci="3" mb="0" cb="2"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="275" mi="0" ci="6" mb="0" cb="0"/><line nr="276" mi="0" ci="3" mb="0" cb="0"/><line nr="285" mi="0" ci="5" mb="0" cb="0"/><line nr="296" mi="0" ci="4" mb="0" cb="0"/><line nr="297" mi="0" ci="4" mb="0" cb="0"/><line nr="298" mi="0" ci="2" mb="0" cb="0"/><line nr="300" mi="0" ci="8" mb="0" cb="2"/><line nr="302" mi="0" ci="4" mb="0" cb="2"/><line nr="303" mi="0" ci="5" mb="0" cb="0"/><line nr="306" mi="0" ci="2" mb="0" cb="0"/><line nr="312" mi="4" ci="0" mb="0" cb="0"/><line nr="313" mi="5" ci="0" mb="0" cb="0"/><line nr="325" mi="0" ci="4" mb="0" cb="0"/><line nr="326" mi="0" ci="15" mb="0" cb="0"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="10" mb="0" cb="0"/><line nr="344" mi="3" ci="0" mb="0" cb="0"/><line nr="349" mi="0" ci="4" mb="0" cb="0"/><line nr="350" mi="0" ci="4" mb="0" cb="0"/><line nr="351" mi="0" ci="3" mb="0" cb="0"/><line nr="352" mi="0" ci="2" mb="0" cb="0"/><line nr="365" mi="4" ci="0" mb="0" cb="0"/><line nr="366" mi="4" ci="0" mb="0" cb="0"/><line nr="371" mi="0" ci="3" mb="1" cb="1"/><line nr="372" mi="0" ci="3" mb="0" cb="0"/><line nr="374" mi="8" ci="0" mb="0" cb="0"/><line nr="375" mi="3" ci="0" mb="0" cb="0"/><line nr="381" mi="0" ci="6" mb="0" cb="0"/><line nr="386" mi="0" ci="2" mb="0" cb="0"/><line nr="396" mi="2" ci="0" mb="0" cb="0"/><line nr="406" mi="0" ci="4" mb="0" cb="0"/><line nr="411" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="35" covered="440"/><counter type="BRANCH" missed="1" covered="33"/><counter type="LINE" missed="9" covered="83"/><counter type="COMPLEXITY" missed="7" covered="58"/><counter type="METHOD" missed="6" covered="42"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CheckResult.java"><line nr="95" mi="0" ci="3" mb="0" cb="2"/><line nr="96" mi="0" ci="12" mb="0" cb="0"/><line nr="98" mi="0" ci="1" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="2"/><line nr="108" mi="0" ci="12" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="2"/><line nr="110" mi="0" ci="20" mb="0" cb="2"/><line nr="112" mi="0" ci="1" mb="0" cb="0"/><line nr="120" mi="0" ci="3" mb="0" cb="2"/><line nr="121" mi="0" ci="12" mb="0" cb="0"/><line nr="123" mi="0" ci="1" mb="0" cb="0"/><line nr="131" mi="0" ci="3" mb="0" cb="2"/><line nr="132" mi="0" ci="12" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><line nr="147" mi="0" ci="2" mb="0" cb="0"/><line nr="148" mi="0" ci="3" mb="0" cb="0"/><line nr="149" mi="0" ci="3" mb="0" cb="0"/><line nr="150" mi="0" ci="3" mb="0" cb="0"/><line nr="151" mi="0" ci="1" mb="0" cb="0"/><line nr="155" mi="0" ci="2" mb="0" cb="0"/><line nr="160" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="0" ci="2" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="0"/><line nr="175" mi="0" ci="3" mb="0" cb="0"/><line nr="180" mi="0" ci="3" mb="0" cb="0"/><line nr="185" mi="0" ci="2" mb="0" cb="0"/><line nr="190" mi="0" ci="2" mb="0" cb="0"/><line nr="195" mi="0" ci="3" mb="0" cb="2"/><line nr="196" mi="0" ci="2" mb="0" cb="0"/><line nr="197" mi="0" ci="3" mb="0" cb="2"/><line nr="198" mi="0" ci="3" mb="0" cb="0"/><line nr="199" mi="0" ci="20" mb="2" cb="4"/><line nr="203" mi="0" ci="2" mb="0" cb="0"/><line nr="209" mi="0" ci="21" mb="0" cb="0"/><line nr="214" mi="0" ci="28" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="3" mb="0" cb="0"/><line nr="234" mi="0" ci="3" mb="0" cb="0"/><line nr="235" mi="0" ci="1" mb="0" cb="0"/><line nr="239" mi="0" ci="2" mb="0" cb="0"/><line nr="244" mi="0" ci="2" mb="0" cb="0"/><line nr="249" mi="0" ci="2" mb="0" cb="0"/><line nr="254" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="3" mb="0" cb="0"/><line nr="264" mi="0" ci="3" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="274" mi="0" ci="2" mb="0" cb="0"/><line nr="279" mi="0" ci="3" mb="0" cb="2"/><line nr="280" mi="0" ci="2" mb="0" cb="0"/><line nr="281" mi="0" ci="3" mb="0" cb="2"/><line nr="282" mi="0" ci="3" mb="0" cb="0"/><line nr="283" mi="0" ci="16" mb="1" cb="3"/><line nr="285" mi="0" ci="5" mb="1" cb="1"/><line nr="287" mi="0" ci="2" mb="0" cb="0"/><line nr="293" mi="0" ci="20" mb="0" cb="0"/><line nr="298" mi="0" ci="27" mb="0" cb="0"/><line nr="316" mi="0" ci="2" mb="0" cb="0"/><line nr="317" mi="0" ci="3" mb="0" cb="0"/><line nr="318" mi="0" ci="3" mb="0" cb="0"/><line nr="319" mi="0" ci="3" mb="0" cb="0"/><line nr="320" mi="0" ci="3" mb="0" cb="0"/><line nr="321" mi="0" ci="1" mb="0" cb="0"/><line nr="325" mi="0" ci="2" mb="0" cb="0"/><line nr="330" mi="0" ci="2" mb="0" cb="0"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="340" mi="0" ci="2" mb="0" cb="0"/><line nr="345" mi="0" ci="3" mb="0" cb="0"/><line nr="350" mi="0" ci="3" mb="0" cb="0"/><line nr="355" mi="0" ci="3" mb="0" cb="0"/><line nr="360" mi="0" ci="4" mb="0" cb="0"/><line nr="365" mi="0" ci="3" mb="0" cb="2"/><line nr="366" mi="0" ci="2" mb="0" cb="0"/><line nr="367" mi="0" ci="3" mb="0" cb="2"/><line nr="368" mi="0" ci="3" mb="0" cb="0"/><line nr="369" mi="0" ci="17" mb="1" cb="3"/><line nr="371" mi="0" ci="6" mb="1" cb="1"/><line nr="372" mi="0" ci="5" mb="1" cb="1"/><line nr="374" mi="0" ci="2" mb="0" cb="0"/><line nr="379" mi="0" ci="10" mb="3" cb="5"/><line nr="381" mi="0" ci="7" mb="1" cb="1"/><line nr="382" mi="1" ci="7" mb="1" cb="1"/><line nr="388" mi="0" ci="28" mb="0" cb="0"/><line nr="392" mi="0" ci="2" mb="0" cb="2"/><line nr="393" mi="0" ci="2" mb="0" cb="0"/><line nr="395" mi="0" ci="17" mb="0" cb="0"/><line nr="401" mi="0" ci="33" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="497"/><counter type="BRANCH" missed="12" covered="46"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="12" covered="59"/><counter type="METHOD" missed="0" covered="42"/><counter type="CLASS" missed="0" covered="4"/></sourcefile><sourcefile name="Arbitrary.java"><line nr="76" mi="0" ci="10" mb="0" cb="0"/><line nr="81" mi="4" ci="0" mb="0" cb="0"/><line nr="82" mi="5" ci="0" mb="0" cb="0"/><line nr="94" mi="0" ci="4" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="19" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="10" mb="0" cb="0"/><line nr="117" mi="3" ci="0" mb="0" cb="0"/><line nr="122" mi="0" ci="10" mb="0" cb="0"/><line nr="134" mi="4" ci="0" mb="0" cb="0"/><line nr="135" mi="4" ci="0" mb="0" cb="0"/><line nr="140" mi="0" ci="3" mb="1" cb="1"/><line nr="141" mi="0" ci="3" mb="0" cb="0"/><line nr="143" mi="5" ci="0" mb="0" cb="0"/><line nr="144" mi="6" ci="0" mb="0" cb="0"/><line nr="150" mi="5" ci="0" mb="0" cb="0"/><line nr="155" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="2" ci="0" mb="0" cb="0"/><line nr="176" mi="0" ci="5" mb="0" cb="0"/><line nr="181" mi="2" ci="0" mb="0" cb="0"/><line nr="190" mi="0" ci="13" mb="0" cb="0"/><line nr="211" mi="0" ci="13" mb="0" cb="0"/><line nr="212" mi="0" ci="4" mb="0" cb="0"/><line nr="213" mi="0" ci="8" mb="0" cb="2"/><line nr="214" mi="0" ci="8" mb="0" cb="0"/><line nr="216" mi="0" ci="5" mb="0" cb="0"/><line nr="217" mi="0" ci="5" mb="0" cb="0"/><line nr="235" mi="0" ci="3" mb="0" cb="0"/><line nr="236" mi="0" ci="4" mb="0" cb="0"/><line nr="237" mi="0" ci="10" mb="0" cb="0"/><line nr="238" mi="0" ci="2" mb="0" cb="0"/><line nr="239" mi="0" ci="8" mb="0" cb="2"/><line nr="240" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="243" mi="0" ci="2" mb="0" cb="0"/><line nr="244" mi="0" ci="5" mb="0" cb="0"/><line nr="263" mi="0" ci="3" mb="0" cb="0"/><line nr="264" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="0" ci="29" mb="0" cb="0"/><line nr="267" mi="0" ci="6" mb="0" cb="0"/><line nr="271" mi="2" ci="10" mb="1" cb="1"/><line nr="276" mi="6" ci="0" mb="0" cb="0"/><line nr="278" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="48" covered="237"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="11" covered="35"/><counter type="COMPLEXITY" missed="10" covered="32"/><counter type="METHOD" missed="8" covered="30"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Property.java"><line nr="29" mi="0" ci="2" mb="0" cb="0"/><line nr="30" mi="0" ci="3" mb="0" cb="0"/><line nr="31" mi="0" ci="1" mb="0" cb="0"/><line nr="42" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="4" mb="0" cb="2"/><line nr="44" mi="0" ci="5" mb="0" cb="0"/><line nr="46" mi="0" ci="5" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="2"/><line nr="51" mi="0" ci="20" mb="0" cb="0"/><line nr="53" mi="0" ci="19" mb="0" cb="0"/><line nr="55" mi="0" ci="1" mb="0" cb="0"/><line nr="58" mi="0" ci="21" mb="0" cb="0"/><line nr="59" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="27" mb="0" cb="0"/><line nr="63" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="1" mb="0" cb="0"/><line nr="78" mi="0" ci="24" mb="0" cb="0"/><line nr="90" mi="0" ci="24" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="0"/><line nr="111" mi="0" ci="7" mb="0" cb="0"/><line nr="124" mi="0" ci="8" mb="0" cb="0"/><line nr="139" mi="0" ci="9" mb="0" cb="0"/><line nr="156" mi="0" ci="10" mb="0" cb="0"/><line nr="175" mi="0" ci="11" mb="0" cb="0"/><line nr="196" mi="0" ci="12" mb="0" cb="0"/><line nr="219" mi="0" ci="13" mb="0" cb="0"/><line nr="244" mi="0" ci="14" mb="0" cb="0"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="260" mi="0" ci="3" mb="0" cb="0"/><line nr="261" mi="0" ci="3" mb="0" cb="0"/><line nr="262" mi="0" ci="1" mb="0" cb="0"/><line nr="271" mi="0" ci="13" mb="0" cb="0"/><line nr="272" mi="0" ci="9" mb="0" cb="0"/><line nr="290" mi="0" ci="2" mb="0" cb="0"/><line nr="291" mi="0" ci="3" mb="0" cb="0"/><line nr="292" mi="0" ci="3" mb="0" cb="0"/><line nr="293" mi="0" ci="3" mb="0" cb="0"/><line nr="294" mi="0" ci="1" mb="0" cb="0"/><line nr="303" mi="0" ci="14" mb="0" cb="0"/><line nr="304" mi="0" ci="11" mb="0" cb="0"/><line nr="324" mi="0" ci="2" mb="0" cb="0"/><line nr="325" mi="0" ci="3" mb="0" cb="0"/><line nr="326" mi="0" ci="3" mb="0" cb="0"/><line nr="327" mi="0" ci="3" mb="0" cb="0"/><line nr="328" mi="0" ci="3" mb="0" cb="0"/><line nr="329" mi="0" ci="1" mb="0" cb="0"/><line nr="338" mi="0" ci="15" mb="0" cb="0"/><line nr="339" mi="0" ci="13" mb="0" cb="0"/><line nr="361" mi="0" ci="2" mb="0" cb="0"/><line nr="362" mi="0" ci="3" mb="0" cb="0"/><line nr="363" mi="0" ci="3" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="0"/><line nr="365" mi="0" ci="3" mb="0" cb="0"/><line nr="366" mi="0" ci="3" mb="0" cb="0"/><line nr="367" mi="0" ci="1" mb="0" cb="0"/><line nr="376" mi="0" ci="16" mb="0" cb="0"/><line nr="377" mi="0" ci="15" mb="0" cb="0"/><line nr="401" mi="0" ci="2" mb="0" cb="0"/><line nr="402" mi="0" ci="3" mb="0" cb="0"/><line nr="403" mi="0" ci="3" mb="0" cb="0"/><line nr="404" mi="0" ci="3" mb="0" cb="0"/><line nr="405" mi="0" ci="3" mb="0" cb="0"/><line nr="406" mi="0" ci="3" mb="0" cb="0"/><line nr="407" mi="0" ci="3" mb="0" cb="0"/><line nr="408" mi="0" ci="1" mb="0" cb="0"/><line nr="417" mi="0" ci="17" mb="0" cb="0"/><line nr="418" mi="0" ci="17" mb="0" cb="0"/><line nr="444" mi="0" ci="2" mb="0" cb="0"/><line nr="445" mi="0" ci="3" mb="0" cb="0"/><line nr="446" mi="0" ci="3" mb="0" cb="0"/><line nr="447" mi="0" ci="3" mb="0" cb="0"/><line nr="448" mi="0" ci="3" mb="0" cb="0"/><line nr="449" mi="0" ci="3" mb="0" cb="0"/><line nr="450" mi="0" ci="3" mb="0" cb="0"/><line nr="451" mi="0" ci="3" mb="0" cb="0"/><line nr="452" mi="0" ci="1" mb="0" cb="0"/><line nr="461" mi="0" ci="18" mb="0" cb="0"/><line nr="462" mi="0" ci="19" mb="0" cb="0"/><line nr="490" mi="0" ci="2" mb="0" cb="0"/><line nr="491" mi="0" ci="3" mb="0" cb="0"/><line nr="492" mi="0" ci="3" mb="0" cb="0"/><line nr="493" mi="0" ci="3" mb="0" cb="0"/><line nr="494" mi="0" ci="3" mb="0" cb="0"/><line nr="495" mi="0" ci="3" mb="0" cb="0"/><line nr="496" mi="0" ci="3" mb="0" cb="0"/><line nr="497" mi="0" ci="3" mb="0" cb="0"/><line nr="498" mi="0" ci="3" mb="0" cb="0"/><line nr="499" mi="0" ci="1" mb="0" cb="0"/><line nr="508" mi="0" ci="19" mb="0" cb="0"/><line nr="509" mi="0" ci="21" mb="0" cb="0"/><line nr="539" mi="0" ci="2" mb="0" cb="0"/><line nr="540" mi="0" ci="3" mb="0" cb="0"/><line nr="541" mi="0" ci="3" mb="0" cb="0"/><line nr="542" mi="0" ci="3" mb="0" cb="0"/><line nr="543" mi="0" ci="3" mb="0" cb="0"/><line nr="544" mi="0" ci="3" mb="0" cb="0"/><line nr="545" mi="0" ci="3" mb="0" cb="0"/><line nr="546" mi="0" ci="3" mb="0" cb="0"/><line nr="547" mi="0" ci="3" mb="0" cb="0"/><line nr="548" mi="0" ci="3" mb="0" cb="0"/><line nr="549" mi="0" ci="1" mb="0" cb="0"/><line nr="558" mi="0" ci="20" mb="0" cb="0"/><line nr="559" mi="0" ci="23" mb="0" cb="0"/><line nr="575" mi="0" ci="2" mb="0" cb="0"/><line nr="576" mi="0" ci="3" mb="0" cb="0"/><line nr="577" mi="0" ci="3" mb="0" cb="0"/><line nr="578" mi="0" ci="3" mb="0" cb="0"/><line nr="579" mi="0" ci="1" mb="0" cb="0"/><line nr="588" mi="0" ci="4" mb="0" cb="0"/><line nr="589" mi="0" ci="6" mb="0" cb="0"/><line nr="590" mi="0" ci="3" mb="0" cb="2"/><line nr="591" mi="0" ci="2" mb="0" cb="0"/><line nr="593" mi="0" ci="10" mb="0" cb="0"/><line nr="596" mi="0" ci="9" mb="0" cb="0"/><line nr="601" mi="0" ci="4" mb="0" cb="0"/><line nr="602" mi="0" ci="2" mb="0" cb="2"/><line nr="603" mi="0" ci="5" mb="0" cb="0"/><line nr="605" mi="0" ci="2" mb="0" cb="0"/><line nr="607" mi="0" ci="20" mb="0" cb="0"/><line nr="608" mi="0" ci="2" mb="0" cb="0"/><line nr="609" mi="0" ci="7" mb="0" cb="2"/><line nr="611" mi="0" ci="18" mb="0" cb="0"/><line nr="613" mi="0" ci="18" mb="0" cb="0"/><line nr="614" mi="0" ci="3" mb="0" cb="2"/><line nr="615" mi="0" ci="2" mb="0" cb="0"/><line nr="616" mi="0" ci="3" mb="0" cb="2"/><line nr="617" mi="0" ci="7" mb="0" cb="0"/><line nr="618" mi="0" ci="9" mb="0" cb="0"/><line nr="621" mi="0" ci="1" mb="0" cb="0"/><line nr="622" mi="0" ci="10" mb="0" cb="0"/><line nr="623" mi="0" ci="13" mb="0" cb="0"/><line nr="624" mi="0" ci="1" mb="0" cb="0"/><line nr="625" mi="0" ci="1" mb="0" cb="0"/><line nr="626" mi="0" ci="10" mb="0" cb="0"/><line nr="627" mi="0" ci="11" mb="0" cb="0"/><line nr="628" mi="0" ci="1" mb="0" cb="0"/><line nr="630" mi="0" ci="8" mb="0" cb="0"/><line nr="631" mi="0" ci="8" mb="0" cb="0"/><line nr="632" mi="0" ci="1" mb="0" cb="0"/><line nr="633" mi="0" ci="10" mb="0" cb="0"/><line nr="634" mi="0" ci="11" mb="0" cb="0"/><line nr="652" mi="0" ci="2" mb="0" cb="0"/><line nr="653" mi="0" ci="3" mb="0" cb="0"/><line nr="654" mi="0" ci="3" mb="0" cb="0"/><line nr="655" mi="0" ci="3" mb="0" cb="0"/><line nr="656" mi="0" ci="3" mb="0" cb="0"/><line nr="657" mi="0" ci="1" mb="0" cb="0"/><line nr="666" mi="0" ci="4" mb="0" cb="0"/><line nr="667" mi="0" ci="7" mb="0" cb="0"/><line nr="668" mi="0" ci="3" mb="0" cb="2"/><line nr="669" mi="0" ci="2" mb="0" cb="0"/><line nr="671" mi="0" ci="11" mb="0" cb="0"/><line nr="674" mi="0" ci="11" mb="0" cb="0"/><line nr="679" mi="0" ci="4" mb="0" cb="0"/><line nr="680" mi="0" ci="2" mb="0" cb="2"/><line nr="681" mi="0" ci="5" mb="0" cb="0"/><line nr="683" mi="0" ci="2" mb="0" cb="0"/><line nr="685" mi="0" ci="20" mb="0" cb="0"/><line nr="686" mi="5" ci="15" mb="0" cb="0"/><line nr="687" mi="0" ci="2" mb="0" cb="0"/><line nr="688" mi="0" ci="7" mb="0" cb="2"/><line nr="690" mi="0" ci="18" mb="0" cb="0"/><line nr="691" mi="5" ci="13" mb="0" cb="0"/><line nr="693" mi="0" ci="20" mb="0" cb="0"/><line nr="694" mi="0" ci="3" mb="0" cb="2"/><line nr="695" mi="0" ci="2" mb="0" cb="0"/><line nr="696" mi="0" ci="3" mb="0" cb="2"/><line nr="697" mi="0" ci="7" mb="0" cb="0"/><line nr="698" mi="0" ci="10" mb="0" cb="0"/><line nr="701" mi="0" ci="1" mb="0" cb="0"/><line nr="702" mi="0" ci="10" mb="0" cb="0"/><line nr="703" mi="0" ci="14" mb="0" cb="0"/><line nr="704" mi="0" ci="1" mb="0" cb="0"/><line nr="705" mi="0" ci="1" mb="0" cb="0"/><line nr="706" mi="0" ci="10" mb="0" cb="0"/><line nr="707" mi="0" ci="11" mb="0" cb="0"/><line nr="708" mi="0" ci="1" mb="0" cb="0"/><line nr="710" mi="0" ci="8" mb="0" cb="0"/><line nr="711" mi="0" ci="8" mb="0" cb="0"/><line nr="712" mi="0" ci="1" mb="0" cb="0"/><line nr="713" mi="0" ci="10" mb="0" cb="0"/><line nr="714" mi="0" ci="11" mb="0" cb="0"/><line nr="733" mi="0" ci="2" mb="0" cb="0"/><line nr="734" mi="0" ci="3" mb="0" cb="0"/><line nr="735" mi="0" ci="3" mb="0" cb="0"/><line nr="736" mi="0" ci="3" mb="0" cb="0"/><line nr="737" mi="0" ci="3" mb="0" cb="0"/><line nr="738" mi="0" ci="3" mb="0" cb="0"/><line nr="739" mi="0" ci="1" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="749" mi="0" ci="8" mb="0" cb="0"/><line nr="750" mi="0" ci="3" mb="0" cb="2"/><line nr="751" mi="0" ci="2" mb="0" cb="0"/><line nr="753" mi="0" ci="12" mb="0" cb="0"/><line nr="756" mi="0" ci="13" mb="0" cb="0"/><line nr="761" mi="0" ci="4" mb="0" cb="0"/><line nr="762" mi="0" ci="2" mb="0" cb="2"/><line nr="763" mi="0" ci="5" mb="0" cb="0"/><line nr="765" mi="0" ci="2" mb="0" cb="0"/><line nr="767" mi="0" ci="20" mb="0" cb="0"/><line nr="768" mi="5" ci="15" mb="0" cb="0"/><line nr="769" mi="5" ci="15" mb="0" cb="0"/><line nr="770" mi="0" ci="2" mb="0" cb="0"/><line nr="771" mi="0" ci="7" mb="0" cb="2"/><line nr="773" mi="0" ci="18" mb="0" cb="0"/><line nr="774" mi="5" ci="13" mb="0" cb="0"/><line nr="775" mi="5" ci="13" mb="0" cb="0"/><line nr="777" mi="0" ci="22" mb="0" cb="0"/><line nr="778" mi="0" ci="3" mb="0" cb="2"/><line nr="779" mi="0" ci="2" mb="0" cb="0"/><line nr="780" mi="0" ci="3" mb="0" cb="2"/><line nr="781" mi="0" ci="7" mb="0" cb="0"/><line nr="782" mi="0" ci="11" mb="0" cb="0"/><line nr="785" mi="0" ci="1" mb="0" cb="0"/><line nr="786" mi="0" ci="10" mb="0" cb="0"/><line nr="787" mi="0" ci="15" mb="0" cb="0"/><line nr="788" mi="0" ci="1" mb="0" cb="0"/><line nr="789" mi="0" ci="1" mb="0" cb="0"/><line nr="790" mi="0" ci="10" mb="0" cb="0"/><line nr="791" mi="0" ci="11" mb="0" cb="0"/><line nr="792" mi="0" ci="1" mb="0" cb="0"/><line nr="794" mi="0" ci="8" mb="0" cb="0"/><line nr="795" mi="0" ci="8" mb="0" cb="0"/><line nr="796" mi="0" ci="1" mb="0" cb="0"/><line nr="797" mi="0" ci="10" mb="0" cb="0"/><line nr="798" mi="0" ci="11" mb="0" cb="0"/><line nr="818" mi="0" ci="2" mb="0" cb="0"/><line nr="819" mi="0" ci="3" mb="0" cb="0"/><line nr="820" mi="0" ci="3" mb="0" cb="0"/><line nr="821" mi="0" ci="3" mb="0" cb="0"/><line nr="822" mi="0" ci="3" mb="0" cb="0"/><line nr="823" mi="0" ci="3" mb="0" cb="0"/><line nr="824" mi="0" ci="3" mb="0" cb="0"/><line nr="825" mi="0" ci="1" mb="0" cb="0"/><line nr="834" mi="0" ci="4" mb="0" cb="0"/><line nr="835" mi="0" ci="9" mb="0" cb="0"/><line nr="836" mi="0" ci="3" mb="0" cb="2"/><line nr="837" mi="0" ci="2" mb="0" cb="0"/><line nr="839" mi="0" ci="13" mb="0" cb="0"/><line nr="842" mi="0" ci="15" mb="0" cb="0"/><line nr="847" mi="0" ci="4" mb="0" cb="0"/><line nr="848" mi="0" ci="2" mb="0" cb="2"/><line nr="849" mi="0" ci="5" mb="0" cb="0"/><line nr="851" mi="0" ci="2" mb="0" cb="0"/><line nr="853" mi="0" ci="20" mb="0" cb="0"/><line nr="854" mi="5" ci="15" mb="0" cb="0"/><line nr="855" mi="5" ci="15" mb="0" cb="0"/><line nr="856" mi="5" ci="15" mb="0" cb="0"/><line nr="857" mi="0" ci="2" mb="0" cb="0"/><line nr="858" mi="0" ci="7" mb="0" cb="2"/><line nr="860" mi="0" ci="18" mb="0" cb="0"/><line nr="861" mi="5" ci="13" mb="0" cb="0"/><line nr="862" mi="5" ci="13" mb="0" cb="0"/><line nr="863" mi="5" ci="13" mb="0" cb="0"/><line nr="865" mi="0" ci="24" mb="0" cb="0"/><line nr="866" mi="0" ci="3" mb="0" cb="2"/><line nr="867" mi="0" ci="2" mb="0" cb="0"/><line nr="868" mi="0" ci="3" mb="0" cb="2"/><line nr="869" mi="0" ci="7" mb="0" cb="0"/><line nr="870" mi="0" ci="12" mb="0" cb="0"/><line nr="873" mi="0" ci="1" mb="0" cb="0"/><line nr="874" mi="0" ci="10" mb="0" cb="0"/><line nr="875" mi="0" ci="16" mb="0" cb="0"/><line nr="876" mi="0" ci="1" mb="0" cb="0"/><line nr="877" mi="0" ci="1" mb="0" cb="0"/><line nr="878" mi="0" ci="10" mb="0" cb="0"/><line nr="879" mi="0" ci="11" mb="0" cb="0"/><line nr="880" mi="0" ci="1" mb="0" cb="0"/><line nr="882" mi="0" ci="8" mb="0" cb="0"/><line nr="883" mi="0" ci="8" mb="0" cb="0"/><line nr="884" mi="0" ci="1" mb="0" cb="0"/><line nr="885" mi="0" ci="10" mb="0" cb="0"/><line nr="886" mi="0" ci="11" mb="0" cb="0"/><line nr="907" mi="0" ci="2" mb="0" cb="0"/><line nr="908" mi="0" ci="3" mb="0" cb="0"/><line nr="909" mi="0" ci="3" mb="0" cb="0"/><line nr="910" mi="0" ci="3" mb="0" cb="0"/><line nr="911" mi="0" ci="3" mb="0" cb="0"/><line nr="912" mi="0" ci="3" mb="0" cb="0"/><line nr="913" mi="0" ci="3" mb="0" cb="0"/><line nr="914" mi="0" ci="3" mb="0" cb="0"/><line nr="915" mi="0" ci="1" mb="0" cb="0"/><line nr="924" mi="0" ci="4" mb="0" cb="0"/><line nr="925" mi="0" ci="10" mb="0" cb="0"/><line nr="926" mi="0" ci="3" mb="0" cb="2"/><line nr="927" mi="0" ci="2" mb="0" cb="0"/><line nr="929" mi="0" ci="14" mb="0" cb="0"/><line nr="932" mi="0" ci="17" mb="0" cb="0"/><line nr="937" mi="0" ci="4" mb="0" cb="0"/><line nr="938" mi="0" ci="2" mb="0" cb="2"/><line nr="939" mi="0" ci="5" mb="0" cb="0"/><line nr="941" mi="0" ci="2" mb="0" cb="0"/><line nr="943" mi="0" ci="20" mb="0" cb="0"/><line nr="944" mi="5" ci="15" mb="0" cb="0"/><line nr="945" mi="5" ci="15" mb="0" cb="0"/><line nr="946" mi="5" ci="15" mb="0" cb="0"/><line nr="947" mi="5" ci="15" mb="0" cb="0"/><line nr="948" mi="0" ci="2" mb="0" cb="0"/><line nr="949" mi="0" ci="7" mb="0" cb="2"/><line nr="951" mi="0" ci="18" mb="0" cb="0"/><line nr="952" mi="5" ci="13" mb="0" cb="0"/><line nr="953" mi="5" ci="13" mb="0" cb="0"/><line nr="954" mi="5" ci="13" mb="0" cb="0"/><line nr="955" mi="5" ci="13" mb="0" cb="0"/><line nr="957" mi="0" ci="26" mb="0" cb="0"/><line nr="958" mi="0" ci="3" mb="0" cb="2"/><line nr="959" mi="0" ci="2" mb="0" cb="0"/><line nr="960" mi="0" ci="3" mb="0" cb="2"/><line nr="961" mi="0" ci="7" mb="0" cb="0"/><line nr="962" mi="0" ci="13" mb="0" cb="0"/><line nr="965" mi="0" ci="1" mb="0" cb="0"/><line nr="966" mi="0" ci="10" mb="0" cb="0"/><line nr="967" mi="0" ci="17" mb="0" cb="0"/><line nr="968" mi="0" ci="1" mb="0" cb="0"/><line nr="969" mi="0" ci="1" mb="0" cb="0"/><line nr="970" mi="0" ci="10" mb="0" cb="0"/><line nr="971" mi="0" ci="11" mb="0" cb="0"/><line nr="972" mi="0" ci="1" mb="0" cb="0"/><line nr="974" mi="0" ci="8" mb="0" cb="0"/><line nr="975" mi="0" ci="8" mb="0" cb="0"/><line nr="976" mi="0" ci="1" mb="0" cb="0"/><line nr="977" mi="0" ci="10" mb="0" cb="0"/><line nr="978" mi="0" ci="11" mb="0" cb="0"/><line nr="1000" mi="0" ci="2" mb="0" cb="0"/><line nr="1001" mi="0" ci="3" mb="0" cb="0"/><line nr="1002" mi="0" ci="3" mb="0" cb="0"/><line nr="1003" mi="0" ci="3" mb="0" cb="0"/><line nr="1004" mi="0" ci="3" mb="0" cb="0"/><line nr="1005" mi="0" ci="3" mb="0" cb="0"/><line nr="1006" mi="0" ci="3" mb="0" cb="0"/><line nr="1007" mi="0" ci="3" mb="0" cb="0"/><line nr="1008" mi="0" ci="3" mb="0" cb="0"/><line nr="1009" mi="0" ci="1" mb="0" cb="0"/><line nr="1018" mi="0" ci="4" mb="0" cb="0"/><line nr="1019" mi="0" ci="11" mb="0" cb="0"/><line nr="1020" mi="0" ci="3" mb="0" cb="2"/><line nr="1021" mi="0" ci="2" mb="0" cb="0"/><line nr="1023" mi="0" ci="15" mb="0" cb="0"/><line nr="1026" mi="0" ci="19" mb="0" cb="0"/><line nr="1031" mi="0" ci="4" mb="0" cb="0"/><line nr="1032" mi="0" ci="2" mb="0" cb="2"/><line nr="1033" mi="0" ci="5" mb="0" cb="0"/><line nr="1035" mi="0" ci="2" mb="0" cb="0"/><line nr="1037" mi="0" ci="20" mb="0" cb="0"/><line nr="1038" mi="5" ci="15" mb="0" cb="0"/><line nr="1039" mi="5" ci="15" mb="0" cb="0"/><line nr="1040" mi="5" ci="15" mb="0" cb="0"/><line nr="1041" mi="5" ci="15" mb="0" cb="0"/><line nr="1042" mi="5" ci="15" mb="0" cb="0"/><line nr="1043" mi="0" ci="2" mb="0" cb="0"/><line nr="1044" mi="0" ci="7" mb="0" cb="2"/><line nr="1046" mi="0" ci="18" mb="0" cb="0"/><line nr="1047" mi="5" ci="13" mb="0" cb="0"/><line nr="1048" mi="5" ci="13" mb="0" cb="0"/><line nr="1049" mi="5" ci="13" mb="0" cb="0"/><line nr="1050" mi="5" ci="13" mb="0" cb="0"/><line nr="1051" mi="5" ci="13" mb="0" cb="0"/><line nr="1053" mi="0" ci="28" mb="0" cb="0"/><line nr="1054" mi="0" ci="3" mb="0" cb="2"/><line nr="1055" mi="0" ci="2" mb="0" cb="0"/><line nr="1056" mi="0" ci="3" mb="0" cb="2"/><line nr="1057" mi="0" ci="7" mb="0" cb="0"/><line nr="1058" mi="0" ci="14" mb="0" cb="0"/><line nr="1061" mi="0" ci="1" mb="0" cb="0"/><line nr="1062" mi="0" ci="10" mb="0" cb="0"/><line nr="1063" mi="0" ci="18" mb="0" cb="0"/><line nr="1064" mi="0" ci="1" mb="0" cb="0"/><line nr="1065" mi="0" ci="1" mb="0" cb="0"/><line nr="1066" mi="0" ci="10" mb="0" cb="0"/><line nr="1067" mi="0" ci="11" mb="0" cb="0"/><line nr="1068" mi="0" ci="1" mb="0" cb="0"/><line nr="1070" mi="0" ci="8" mb="0" cb="0"/><line nr="1071" mi="0" ci="8" mb="0" cb="0"/><line nr="1072" mi="0" ci="1" mb="0" cb="0"/><line nr="1073" mi="0" ci="10" mb="0" cb="0"/><line nr="1074" mi="0" ci="11" mb="0" cb="0"/><line nr="1097" mi="0" ci="2" mb="0" cb="0"/><line nr="1098" mi="0" ci="3" mb="0" cb="0"/><line nr="1099" mi="0" ci="3" mb="0" cb="0"/><line nr="1100" mi="0" ci="3" mb="0" cb="0"/><line nr="1101" mi="0" ci="3" mb="0" cb="0"/><line nr="1102" mi="0" ci="3" mb="0" cb="0"/><line nr="1103" mi="0" ci="3" mb="0" cb="0"/><line nr="1104" mi="0" ci="3" mb="0" cb="0"/><line nr="1105" mi="0" ci="3" mb="0" cb="0"/><line nr="1106" mi="0" ci="3" mb="0" cb="0"/><line nr="1107" mi="0" ci="1" mb="0" cb="0"/><line nr="1116" mi="0" ci="4" mb="0" cb="0"/><line nr="1117" mi="0" ci="12" mb="0" cb="0"/><line nr="1118" mi="0" ci="3" mb="0" cb="2"/><line nr="1119" mi="0" ci="2" mb="0" cb="0"/><line nr="1121" mi="0" ci="16" mb="0" cb="0"/><line nr="1124" mi="0" ci="21" mb="0" cb="0"/><line nr="1129" mi="0" ci="4" mb="0" cb="0"/><line nr="1130" mi="0" ci="2" mb="0" cb="2"/><line nr="1131" mi="0" ci="5" mb="0" cb="0"/><line nr="1133" mi="0" ci="2" mb="0" cb="0"/><line nr="1135" mi="0" ci="20" mb="0" cb="0"/><line nr="1136" mi="5" ci="15" mb="0" cb="0"/><line nr="1137" mi="5" ci="15" mb="0" cb="0"/><line nr="1138" mi="5" ci="15" mb="0" cb="0"/><line nr="1139" mi="5" ci="15" mb="0" cb="0"/><line nr="1140" mi="5" ci="15" mb="0" cb="0"/><line nr="1141" mi="5" ci="15" mb="0" cb="0"/><line nr="1142" mi="0" ci="2" mb="0" cb="0"/><line nr="1143" mi="0" ci="7" mb="0" cb="2"/><line nr="1145" mi="0" ci="18" mb="0" cb="0"/><line nr="1146" mi="5" ci="13" mb="0" cb="0"/><line nr="1147" mi="5" ci="13" mb="0" cb="0"/><line nr="1148" mi="5" ci="13" mb="0" cb="0"/><line nr="1149" mi="5" ci="13" mb="0" cb="0"/><line nr="1150" mi="5" ci="13" mb="0" cb="0"/><line nr="1151" mi="5" ci="13" mb="0" cb="0"/><line nr="1153" mi="0" ci="30" mb="0" cb="0"/><line nr="1154" mi="0" ci="3" mb="0" cb="2"/><line nr="1155" mi="0" ci="2" mb="0" cb="0"/><line nr="1156" mi="0" ci="3" mb="0" cb="2"/><line nr="1157" mi="0" ci="7" mb="0" cb="0"/><line nr="1158" mi="0" ci="15" mb="0" cb="0"/><line nr="1161" mi="0" ci="1" mb="0" cb="0"/><line nr="1162" mi="0" ci="10" mb="0" cb="0"/><line nr="1163" mi="0" ci="19" mb="0" cb="0"/><line nr="1164" mi="0" ci="1" mb="0" cb="0"/><line nr="1165" mi="0" ci="1" mb="0" cb="0"/><line nr="1166" mi="0" ci="10" mb="0" cb="0"/><line nr="1167" mi="0" ci="11" mb="0" cb="0"/><line nr="1168" mi="0" ci="1" mb="0" cb="0"/><line nr="1170" mi="0" ci="8" mb="0" cb="0"/><line nr="1171" mi="0" ci="8" mb="0" cb="0"/><line nr="1172" mi="0" ci="1" mb="0" cb="0"/><line nr="1173" mi="0" ci="10" mb="0" cb="0"/><line nr="1174" mi="0" ci="11" mb="0" cb="0"/><line nr="1198" mi="0" ci="2" mb="0" cb="0"/><line nr="1199" mi="0" ci="3" mb="0" cb="0"/><line nr="1200" mi="0" ci="3" mb="0" cb="0"/><line nr="1201" mi="0" ci="3" mb="0" cb="0"/><line nr="1202" mi="0" ci="3" mb="0" cb="0"/><line nr="1203" mi="0" ci="3" mb="0" cb="0"/><line nr="1204" mi="0" ci="3" mb="0" cb="0"/><line nr="1205" mi="0" ci="3" mb="0" cb="0"/><line nr="1206" mi="0" ci="3" mb="0" cb="0"/><line nr="1207" mi="0" ci="3" mb="0" cb="0"/><line nr="1208" mi="0" ci="3" mb="0" cb="0"/><line nr="1209" mi="0" ci="1" mb="0" cb="0"/><line nr="1218" mi="0" ci="4" mb="0" cb="0"/><line nr="1219" mi="0" ci="13" mb="0" cb="0"/><line nr="1220" mi="0" ci="3" mb="0" cb="2"/><line nr="1221" mi="0" ci="2" mb="0" cb="0"/><line nr="1223" mi="0" ci="17" mb="0" cb="0"/><line nr="1226" mi="0" ci="23" mb="0" cb="0"/><line nr="1231" mi="0" ci="4" mb="0" cb="0"/><line nr="1232" mi="0" ci="2" mb="0" cb="2"/><line nr="1233" mi="0" ci="5" mb="0" cb="0"/><line nr="1235" mi="0" ci="2" mb="0" cb="0"/><line nr="1237" mi="0" ci="20" mb="0" cb="0"/><line nr="1238" mi="5" ci="15" mb="0" cb="0"/><line nr="1239" mi="5" ci="15" mb="0" cb="0"/><line nr="1240" mi="5" ci="15" mb="0" cb="0"/><line nr="1241" mi="5" ci="15" mb="0" cb="0"/><line nr="1242" mi="5" ci="15" mb="0" cb="0"/><line nr="1243" mi="5" ci="15" mb="0" cb="0"/><line nr="1244" mi="5" ci="15" mb="0" cb="0"/><line nr="1245" mi="0" ci="2" mb="0" cb="0"/><line nr="1246" mi="0" ci="7" mb="0" cb="2"/><line nr="1248" mi="0" ci="18" mb="0" cb="0"/><line nr="1249" mi="5" ci="13" mb="0" cb="0"/><line nr="1250" mi="5" ci="13" mb="0" cb="0"/><line nr="1251" mi="5" ci="13" mb="0" cb="0"/><line nr="1252" mi="5" ci="13" mb="0" cb="0"/><line nr="1253" mi="5" ci="13" mb="0" cb="0"/><line nr="1254" mi="5" ci="13" mb="0" cb="0"/><line nr="1255" mi="5" ci="13" mb="0" cb="0"/><line nr="1257" mi="0" ci="32" mb="0" cb="0"/><line nr="1258" mi="0" ci="3" mb="0" cb="2"/><line nr="1259" mi="0" ci="2" mb="0" cb="0"/><line nr="1260" mi="0" ci="3" mb="0" cb="2"/><line nr="1261" mi="0" ci="7" mb="0" cb="0"/><line nr="1262" mi="0" ci="16" mb="0" cb="0"/><line nr="1265" mi="0" ci="1" mb="0" cb="0"/><line nr="1266" mi="0" ci="10" mb="0" cb="0"/><line nr="1267" mi="0" ci="20" mb="0" cb="0"/><line nr="1268" mi="0" ci="1" mb="0" cb="0"/><line nr="1269" mi="0" ci="1" mb="0" cb="0"/><line nr="1270" mi="0" ci="10" mb="0" cb="0"/><line nr="1271" mi="0" ci="11" mb="0" cb="0"/><line nr="1272" mi="0" ci="1" mb="0" cb="0"/><line nr="1274" mi="0" ci="8" mb="0" cb="0"/><line nr="1275" mi="0" ci="8" mb="0" cb="0"/><line nr="1276" mi="0" ci="1" mb="0" cb="0"/><line nr="1277" mi="0" ci="10" mb="0" cb="0"/><line nr="1278" mi="0" ci="11" mb="0" cb="0"/><line nr="1288" mi="0" ci="7" mb="0" cb="0"/><line nr="1293" mi="0" ci="2" mb="0" cb="0"/><line nr="1294" mi="0" ci="3" mb="0" cb="0"/><line nr="1295" mi="0" ci="3" mb="0" cb="0"/><line nr="1296" mi="0" ci="1" mb="0" cb="0"/><line nr="1300" mi="0" ci="10" mb="0" cb="4"/><counter type="INSTRUCTION" missed="280" covered="3672"/><counter type="BRANCH" missed="0" covered="88"/><counter type="LINE" missed="0" covered="498"/><counter type="COMPLEXITY" missed="56" covered="224"/><counter type="METHOD" missed="56" covered="180"/><counter type="CLASS" missed="0" covered="18"/></sourcefile><sourcefile name="Checkable.java"><line nr="24" mi="0" ci="3" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="2"/><line nr="55" mi="0" ci="5" mb="0" cb="0"/><line nr="57" mi="0" ci="8" mb="0" cb="0"/><line nr="67" mi="0" ci="8" mb="0" cb="0"/><line nr="79" mi="0" ci="4" mb="0" cb="0"/><line nr="80" mi="0" ci="6" mb="0" cb="0"/><line nr="81" mi="0" ci="3" mb="0" cb="2"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="84" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="6" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="2"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="68"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="364" covered="4914"/><counter type="BRANCH" missed="15" covered="179"/><counter type="LINE" missed="20" covered="718"/><counter type="COMPLEXITY" missed="85" covered="383"/><counter type="METHOD" missed="70" covered="301"/><counter type="CLASS" missed="0" covered="27"/></package><package name="javaslang/algebra"><class name="javaslang/algebra/Foldable"><method name="fold" desc="(Ljavaslang/algebra/Monoid;)Ljava/lang/Object;" line="45"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fold" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="58"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldLeft" desc="(Ljavaslang/algebra/Monoid;)Ljava/lang/Object;" line="70"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldMap" desc="(Ljavaslang/algebra/Monoid;Ljava/util/function/Function;)Ljava/lang/Object;" line="98"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljavaslang/algebra/Monoid;)Ljava/lang/Object;" line="111"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="136"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceOption" desc="(Ljava/util/function/BiFunction;)Ljavaslang/control/Option;" line="149"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldMap$0" desc="(Ljavaslang/algebra/Monoid;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="100"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="90"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/algebra/Monoid$1"><method name="&lt;init&gt;" desc="(Ljavaslang/algebra/Semigroup;Ljava/lang/Object;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="46"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zero" desc="()Ljava/lang/Object;" line="51"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/algebra/Monad"><method name="lift" desc="(Ljava/util/function/Function;)Ljavaslang/Function1;" line="79"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljava/util/function/BiFunction;)Ljavaslang/Function2;" line="92"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function3;)Ljavaslang/Function3;" line="108"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function4;)Ljavaslang/Function4;" line="126"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function5;)Ljavaslang/Function5;" line="146"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function6;)Ljavaslang/Function6;" line="168"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function7;)Ljavaslang/Function7;" line="192"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function8;)Ljavaslang/Function8;" line="218"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$294f3e5d$1" desc="(Ljavaslang/Function8;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="219"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$34" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;)Ljava/lang/Iterable;" line="220"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$33" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="221"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$32" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="222"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$31" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="223"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$30" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="224"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$29" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="225"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$28" desc="(Ljavaslang/algebra/Monad;Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="226"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$27" desc="(Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="226"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$10e2bfeb$1" desc="(Ljavaslang/Function7;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="193"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$26" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function7;Ljava/lang/Object;)Ljava/lang/Iterable;" line="194"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$25" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="195"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$24" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="196"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$23" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="197"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$22" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="198"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$21" desc="(Ljavaslang/algebra/Monad;Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="199"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$20" desc="(Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="199"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$b221e037$1" desc="(Ljavaslang/Function6;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="169"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$19" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function6;Ljava/lang/Object;)Ljava/lang/Iterable;" line="170"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$18" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="171"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$17" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="172"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$16" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="173"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$15" desc="(Ljavaslang/algebra/Monad;Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="174"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$14" desc="(Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="174"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$5e90dc89$1" desc="(Ljavaslang/Function5;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="147"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$13" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function5;Ljava/lang/Object;)Ljava/lang/Iterable;" line="148"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$12" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function5;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="149"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$11" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="150"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$10" desc="(Ljavaslang/algebra/Monad;Ljavaslang/Function5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="151"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$9" desc="(Ljavaslang/Function5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="151"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$97a9bd11$1" desc="(Ljavaslang/Function4;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="127"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$8" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function4;Ljava/lang/Object;)Ljava/lang/Iterable;" line="128"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$7" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function4;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="129"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$6" desc="(Ljavaslang/algebra/Monad;Ljavaslang/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="130"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$5" desc="(Ljavaslang/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$af636227$1" desc="(Ljavaslang/Function3;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="109"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$4" desc="(Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;Ljavaslang/Function3;Ljava/lang/Object;)Ljava/lang/Iterable;" line="110"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$3" desc="(Ljavaslang/algebra/Monad;Ljavaslang/Function3;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Iterable;" line="111"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/Function3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="111"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$e39d8b83$1" desc="(Ljava/util/function/BiFunction;Ljavaslang/algebra/Monad;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="93"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/algebra/Monad;Ljava/util/function/BiFunction;Ljava/lang/Object;)Ljava/lang/Iterable;" line="94"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="94"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$afc7f544$1" desc="(Ljava/util/function/Function;Ljavaslang/algebra/Monad;)Ljavaslang/algebra/Monad;" line="79"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="431"/><counter type="LINE" missed="0" covered="43"/><counter type="COMPLEXITY" missed="0" covered="51"/><counter type="METHOD" missed="0" covered="51"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/algebra/Monoid"><method name="of" desc="(Ljava/lang/Object;Ljavaslang/algebra/Semigroup;)Ljavaslang/algebra/Monoid;" line="42"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="endoMonoid" desc="()Ljavaslang/algebra/Monoid;" line="63"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Foldable.java"><line nr="45" mi="0" ci="4" mb="0" cb="0"/><line nr="46" mi="0" ci="10" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="59" mi="0" ci="5" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="10" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="15" mb="0" cb="0"/><line nr="111" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="0" ci="10" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="90"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Monoid.java"><line nr="42" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="15" mb="0" cb="0"/><line nr="46" mi="0" ci="6" mb="0" cb="0"/><line nr="51" mi="0" ci="3" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Monad.java"><line nr="79" mi="0" ci="11" mb="0" cb="0"/><line nr="92" mi="0" ci="3" mb="0" cb="0"/><line nr="93" mi="0" ci="6" mb="0" cb="0"/><line nr="94" mi="0" ci="11" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="109" mi="0" ci="7" mb="0" cb="0"/><line nr="110" mi="0" ci="7" mb="0" cb="0"/><line nr="111" mi="0" ci="13" mb="0" cb="0"/><line nr="126" mi="0" ci="3" mb="0" cb="0"/><line nr="127" mi="0" ci="8" mb="0" cb="0"/><line nr="128" mi="0" ci="8" mb="0" cb="0"/><line nr="129" mi="0" ci="8" mb="0" cb="0"/><line nr="130" mi="0" ci="15" mb="0" cb="0"/><line nr="146" mi="0" ci="3" mb="0" cb="0"/><line nr="147" mi="0" ci="9" mb="0" cb="0"/><line nr="148" mi="0" ci="9" mb="0" cb="0"/><line nr="149" mi="0" ci="9" mb="0" cb="0"/><line nr="150" mi="0" ci="9" mb="0" cb="0"/><line nr="151" mi="0" ci="17" mb="0" cb="0"/><line nr="168" mi="0" ci="3" mb="0" cb="0"/><line nr="169" mi="0" ci="10" mb="0" cb="0"/><line nr="170" mi="0" ci="10" mb="0" cb="0"/><line nr="171" mi="0" ci="10" mb="0" cb="0"/><line nr="172" mi="0" ci="10" mb="0" cb="0"/><line nr="173" mi="0" ci="10" mb="0" cb="0"/><line nr="174" mi="0" ci="19" mb="0" cb="0"/><line nr="192" mi="0" ci="3" mb="0" cb="0"/><line nr="193" mi="0" ci="11" mb="0" cb="0"/><line nr="194" mi="0" ci="11" mb="0" cb="0"/><line nr="195" mi="0" ci="11" mb="0" cb="0"/><line nr="196" mi="0" ci="11" mb="0" cb="0"/><line nr="197" mi="0" ci="11" mb="0" cb="0"/><line nr="198" mi="0" ci="11" mb="0" cb="0"/><line nr="199" mi="0" ci="21" mb="0" cb="0"/><line nr="218" mi="0" ci="3" mb="0" cb="0"/><line nr="219" mi="0" ci="12" mb="0" cb="0"/><line nr="220" mi="0" ci="12" mb="0" cb="0"/><line nr="221" mi="0" ci="12" mb="0" cb="0"/><line nr="222" mi="0" ci="12" mb="0" cb="0"/><line nr="223" mi="0" ci="12" mb="0" cb="0"/><line nr="224" mi="0" ci="12" mb="0" cb="0"/><line nr="225" mi="0" ci="12" mb="0" cb="0"/><line nr="226" mi="0" ci="23" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="431"/><counter type="LINE" missed="0" covered="43"/><counter type="COMPLEXITY" missed="0" covered="51"/><counter type="METHOD" missed="0" covered="51"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="0" covered="553"/><counter type="LINE" missed="0" covered="63"/><counter type="COMPLEXITY" missed="0" covered="64"/><counter type="METHOD" missed="0" covered="64"/><counter type="CLASS" missed="0" covered="4"/></package><package name="javaslang/concurrent"><class name="javaslang/concurrent/PromiseImpl"><method name="&lt;init&gt;" desc="(Ljavaslang/concurrent/FutureImpl;)V" line="293"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="executorService" desc="()Ljava/util/concurrent/ExecutorService;" line="299"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="future" desc="()Ljavaslang/concurrent/Future;" line="304"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tryComplete" desc="(Ljavaslang/control/Try;)Z" line="309"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="317"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="22" covered="14"/><counter type="LINE" missed="2" covered="5"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="2" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/concurrent/FutureImpl"><method name="&lt;init&gt;" desc="(Ljava/util/concurrent/ExecutorService;)V" line="62"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="await" desc="()V" line="98"><counter type="INSTRUCTION" missed="5" covered="26"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cancel" desc="(Z)Z" line="113"><counter type="INSTRUCTION" missed="5" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="executorService" desc="()Ljava/util/concurrent/ExecutorService;" line="130"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getValue" desc="()Ljavaslang/control/Option;" line="135"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isCompleted" desc="()Z" line="140"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="onComplete" desc="(Ljava/util/function/Consumer;)V" line="145"><counter type="INSTRUCTION" missed="9" covered="29"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="run" desc="(Ljavaslang/control/Try$CheckedSupplier;)V" line="168"><counter type="INSTRUCTION" missed="15" covered="32"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="2" covered="9"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complete" desc="(Ljavaslang/control/Try;)Ljavaslang/control/Try;" line="199"><counter type="INSTRUCTION" missed="10" covered="34"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tryComplete" desc="(Ljavaslang/control/Try;)Z" line="216"><counter type="INSTRUCTION" missed="5" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="perform" desc="(Ljava/util/function/Consumer;)V" line="228"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="236"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$perform$5" desc="(Ljava/util/function/Consumer;)V" line="228"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$4" desc="(Ljava/util/function/Consumer;)V" line="228"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$run$3" desc="(Ljavaslang/control/Try$CheckedSupplier;)Ljavaslang/control/Try;" line="180"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$cancel$2" desc="(Ljava/lang/Boolean;)V" line="118"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$cancel$1" desc="(Z)Ljava/lang/Boolean;" line="117"><counter type="INSTRUCTION" missed="1" covered="12"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$await$0" desc="(Ljava/lang/Object;Ljavaslang/control/Try;)V" line="100"><counter type="INSTRUCTION" missed="5" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="75" covered="269"/><counter type="BRANCH" missed="8" covered="16"/><counter type="LINE" missed="7" covered="66"/><counter type="COMPLEXITY" missed="9" covered="21"/><counter type="METHOD" missed="1" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/concurrent/Promise"><method name="failed" desc="(Ljava/lang/Throwable;)Ljavaslang/concurrent/Promise;" line="76"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="failed" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Throwable;)Ljavaslang/concurrent/Promise;" line="90"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fromTry" desc="(Ljavaslang/control/Try;)Ljavaslang/concurrent/Promise;" line="104"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fromTry" desc="(Ljava/util/concurrent/ExecutorService;Ljavaslang/control/Try;)Ljavaslang/concurrent/Promise;" line="117"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="make" desc="()Ljavaslang/concurrent/Promise;" line="130"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="make" desc="(Ljava/util/concurrent/ExecutorService;)Ljavaslang/concurrent/Promise;" line="142"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="successful" desc="(Ljava/lang/Object;)Ljavaslang/concurrent/Promise;" line="154"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="successful" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Object;)Ljavaslang/concurrent/Promise;" line="167"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isCompleted" desc="()Z" line="191"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complete" desc="(Ljavaslang/control/Try;)Ljavaslang/concurrent/Promise;" line="202"><counter type="INSTRUCTION" missed="5" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="completeWith" desc="(Ljavaslang/concurrent/Future;)Ljavaslang/concurrent/Promise;" line="225"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tryCompleteWith" desc="(Ljavaslang/concurrent/Future;)Ljavaslang/concurrent/Promise;" line="235"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="success" desc="(Ljava/lang/Object;)Ljavaslang/concurrent/Promise;" line="247"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trySuccess" desc="(Ljava/lang/Object;)Z" line="257"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="failure" desc="(Ljava/lang/Throwable;)Ljavaslang/concurrent/Promise;" line="268"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tryFailure" desc="(Ljava/lang/Throwable;)Z" line="278"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="26" covered="85"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="6" covered="20"/><counter type="COMPLEXITY" missed="5" covered="12"/><counter type="METHOD" missed="4" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/concurrent/Future"><method name="failed" desc="(Ljava/lang/Throwable;)Ljavaslang/concurrent/Future;" line="68"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="failed" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Throwable;)Ljavaslang/concurrent/Future;" line="82"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="find" desc="(Ljava/lang/Iterable;Ljava/util/function/Predicate;)Ljavaslang/concurrent/Future;" line="100"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="find" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Iterable;Ljava/util/function/Predicate;)Ljavaslang/concurrent/Future;" line="117"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="firstCompletedOf" desc="(Ljava/lang/Iterable;)Ljavaslang/concurrent/Future;" line="157"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="firstCompletedOf" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Iterable;)Ljavaslang/concurrent/Future;" line="171"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fold" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/concurrent/Future;" line="194"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fold" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/concurrent/Future;" line="213"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fromJavaFuture" desc="(Ljava/util/concurrent/Future;)Ljavaslang/concurrent/Future;" line="232"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fromJavaFuture" desc="(Ljava/util/concurrent/ExecutorService;Ljava/util/concurrent/Future;)Ljavaslang/concurrent/Future;" line="246"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fromTry" desc="(Ljavaslang/control/Try;)Ljavaslang/concurrent/Future;" line="260"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fromTry" desc="(Ljava/util/concurrent/ExecutorService;Ljavaslang/control/Try;)Ljavaslang/concurrent/Future;" line="273"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljavaslang/control/Try$CheckedSupplier;)Ljavaslang/concurrent/Future;" line="287"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/util/concurrent/ExecutorService;Ljavaslang/control/Try$CheckedSupplier;)Ljavaslang/concurrent/Future;" line="300"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="(Ljava/lang/Iterable;Ljava/util/function/BiFunction;)Ljavaslang/concurrent/Future;" line="320"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Iterable;Ljava/util/function/BiFunction;)Ljavaslang/concurrent/Future;" line="337"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="run" desc="(Ljavaslang/control/Try$CheckedRunnable;)Ljavaslang/concurrent/Future;" line="355"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="run" desc="(Ljava/util/concurrent/ExecutorService;Ljavaslang/control/Try$CheckedRunnable;)Ljavaslang/concurrent/Future;" line="367"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sequence" desc="(Ljava/lang/Iterable;)Ljavaslang/concurrent/Future;" line="410"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sequence" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Iterable;)Ljavaslang/concurrent/Future;" line="426"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="successful" desc="(Ljava/lang/Object;)Ljavaslang/concurrent/Future;" line="442"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="successful" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Object;)Ljavaslang/concurrent/Future;" line="455"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traverse" desc="(Ljava/lang/Iterable;Ljava/util/function/Function;)Ljavaslang/concurrent/Future;" line="473"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traverse" desc="(Ljava/util/concurrent/ExecutorService;Ljava/lang/Iterable;Ljava/util/function/Function;)Ljavaslang/concurrent/Future;" line="491"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Consumer;)Ljavaslang/concurrent/Future;" line="518"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cancel" desc="()Z" line="540"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="failed" desc="()Ljavaslang/concurrent/Future;" line="572"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fallbackTo" desc="(Ljavaslang/concurrent/Future;)Ljavaslang/concurrent/Future;" line="603"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/concurrent/Future;" line="623"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/concurrent/Future;" line="631"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getCause" desc="()Ljavaslang/control/Option;" line="642"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSuccess" desc="()Z" line="665"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFailure" desc="()Z" line="674"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="onFailure" desc="(Ljava/util/function/Consumer;)V" line="693"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="onSuccess" desc="(Ljava/util/function/Consumer;)V" line="704"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="recover" desc="(Ljava/util/function/Function;)Ljavaslang/concurrent/Future;" line="722"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="recoverWith" desc="(Ljava/util/function/Function;)Ljavaslang/concurrent/Future;" line="742"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="763"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljavaslang/concurrent/Future;)Ljavaslang/concurrent/Future;" line="780"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/concurrent/Future;" line="799"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/concurrent/Future;" line="811"><counter type="INSTRUCTION" missed="33" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="7" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forEach" desc="(Ljava/util/function/Consumer;)V" line="834"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Ljava/lang/Object;" line="849"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="864"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="877"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="882"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/concurrent/Future;" line="887"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="895"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/concurrent/Future;" line="900"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="907"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$28" desc="(Ljavaslang/concurrent/Promise;Ljava/util/function/Function;Ljavaslang/control/Try;)V" line="889"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$forEach$27" desc="(Ljava/util/function/Consumer;Ljavaslang/control/Try;)V" line="835"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$flatMap$26" desc="(Ljava/util/function/Function;Ljavaslang/concurrent/Promise;Ljavaslang/control/Try;)V" line="801"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$25" desc="(Ljavaslang/concurrent/Promise;Ljava/lang/Iterable;)V" line="802"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$zip$24" desc="(Ljavaslang/concurrent/Promise;Ljavaslang/concurrent/Future;Ljavaslang/control/Try;)V" line="783"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$23" desc="(Ljavaslang/control/Try;Ljavaslang/concurrent/Promise;Ljavaslang/control/Try;)V" line="787"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$22" desc="(Ljavaslang/control/Try;Ljava/lang/Object;)Ljava/lang/Iterable;" line="787"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$21" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="787"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$recoverWith$20" desc="(Ljava/util/function/Function;Ljavaslang/concurrent/Promise;Ljavaslang/control/Try;)V" line="745"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$19" desc="(Ljava/util/function/Function;Ljavaslang/control/Try;Ljavaslang/concurrent/Promise;)V" line="746"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$recover$18" desc="(Ljavaslang/concurrent/Promise;Ljava/util/function/Function;Ljavaslang/control/Try;)V" line="724"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$onSuccess$17" desc="(Ljava/util/function/Consumer;Ljavaslang/control/Try;)V" line="705"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$onFailure$16" desc="(Ljava/util/function/Consumer;Ljavaslang/control/Try;)V" line="694"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filter$15" desc="(Ljavaslang/concurrent/Promise;Ljava/util/function/Predicate;Ljavaslang/control/Try;)V" line="625"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fallbackTo$14" desc="(Ljavaslang/concurrent/Promise;Ljavaslang/concurrent/Future;Ljavaslang/control/Try;)V" line="606"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$13" desc="(Ljavaslang/concurrent/Promise;Ljavaslang/control/Try;Ljavaslang/control/Try;)V" line="610"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$failed$12" desc="(Ljavaslang/concurrent/Promise;Ljavaslang/control/Try;)V" line="574"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$11" desc="(Ljava/util/function/Consumer;Ljavaslang/concurrent/Promise;Ljavaslang/control/Try;)V" line="521"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$10" desc="(Ljava/util/function/Consumer;Ljavaslang/control/Try;)V" line="521"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sequence$9" desc="(Ljavaslang/concurrent/Future;Ljavaslang/concurrent/Future;)Ljavaslang/concurrent/Future;" line="430"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$8" desc="(Ljavaslang/concurrent/Future;Ljavaslang/collection/Seq;)Ljava/lang/Iterable;" line="430"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$run$7" desc="(Ljavaslang/control/Try$CheckedRunnable;)Ljava/lang/Void;" line="370"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reduce$6" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/Seq;)Ljava/lang/Object;" line="343"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fold$5" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljavaslang/collection/Seq;)Ljava/lang/Object;" line="219"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$firstCompletedOf$4" desc="(Ljava/util/function/Consumer;Ljavaslang/concurrent/Future;)V" line="175"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$find$3" desc="(Ljava/util/concurrent/atomic/AtomicInteger;Ljavaslang/concurrent/Promise;Ljava/util/function/Predicate;Ljavaslang/concurrent/Future;)V" line="126"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljava/util/concurrent/atomic/AtomicInteger;Ljavaslang/concurrent/Promise;Ljava/util/function/Predicate;Ljavaslang/control/Try;)V" line="127"><counter type="INSTRUCTION" missed="5" covered="29"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(ZLjavaslang/concurrent/Promise;Ljava/lang/Throwable;)V" line="136"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljavaslang/concurrent/Promise;Ljava/lang/Object;)V" line="134"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="57"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="64" covered="813"/><counter type="BRANCH" missed="7" covered="29"/><counter type="LINE" missed="14" covered="173"/><counter type="COMPLEXITY" missed="9" covered="89"/><counter type="METHOD" missed="5" covered="75"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Future.java"><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="5" mb="0" cb="0"/><line nr="100" mi="0" ci="5" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="4" mb="0" cb="0"/><line nr="119" mi="0" ci="4" mb="0" cb="0"/><line nr="120" mi="0" ci="3" mb="0" cb="0"/><line nr="121" mi="0" ci="3" mb="0" cb="0"/><line nr="122" mi="0" ci="3" mb="0" cb="2"/><line nr="123" mi="0" ci="5" mb="0" cb="0"/><line nr="125" mi="0" ci="6" mb="0" cb="0"/><line nr="126" mi="0" ci="13" mb="0" cb="0"/><line nr="127" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="2"/><line nr="131" mi="0" ci="7" mb="0" cb="2"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="10" mb="0" cb="0"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="2" mb="0" cb="2"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="139" mi="0" ci="1" mb="0" cb="0"/><line nr="141" mi="5" ci="3" mb="0" cb="0"/><line nr="142" mi="0" ci="1" mb="0" cb="0"/><line nr="144" mi="0" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="0" cb="0"/><line nr="174" mi="0" ci="6" mb="0" cb="0"/><line nr="175" mi="0" ci="8" mb="0" cb="0"/><line nr="176" mi="0" ci="3" mb="0" cb="0"/><line nr="194" mi="0" ci="6" mb="0" cb="0"/><line nr="213" mi="0" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="4" mb="0" cb="0"/><line nr="216" mi="0" ci="4" mb="0" cb="2"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="0" ci="13" mb="0" cb="0"/><line nr="232" mi="0" ci="4" mb="0" cb="0"/><line nr="233" mi="0" ci="8" mb="0" cb="0"/><line nr="246" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="0" ci="8" mb="0" cb="0"/><line nr="260" mi="0" ci="4" mb="0" cb="0"/><line nr="273" mi="0" ci="4" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="5" mb="0" cb="0"/><line nr="287" mi="0" ci="4" mb="0" cb="0"/><line nr="300" mi="0" ci="4" mb="0" cb="0"/><line nr="301" mi="0" ci="4" mb="0" cb="0"/><line nr="302" mi="0" ci="5" mb="0" cb="0"/><line nr="303" mi="0" ci="3" mb="0" cb="0"/><line nr="304" mi="0" ci="2" mb="0" cb="0"/><line nr="320" mi="0" ci="5" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="4" mb="0" cb="0"/><line nr="340" mi="0" ci="4" mb="0" cb="2"/><line nr="341" mi="0" ci="5" mb="0" cb="0"/><line nr="343" mi="0" ci="10" mb="0" cb="0"/><line nr="355" mi="0" ci="4" mb="0" cb="0"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="368" mi="0" ci="4" mb="0" cb="0"/><line nr="369" mi="0" ci="5" mb="0" cb="0"/><line nr="370" mi="0" ci="2" mb="0" cb="0"/><line nr="371" mi="0" ci="2" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="0" cb="0"/><line nr="426" mi="0" ci="4" mb="0" cb="0"/><line nr="427" mi="0" ci="4" mb="0" cb="0"/><line nr="428" mi="0" ci="4" mb="0" cb="0"/><line nr="429" mi="0" ci="2" mb="0" cb="0"/><line nr="430" mi="0" ci="13" mb="0" cb="0"/><line nr="431" mi="0" ci="7" mb="0" cb="0"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="455" mi="0" ci="4" mb="0" cb="0"/><line nr="456" mi="0" ci="5" mb="0" cb="0"/><line nr="473" mi="0" ci="5" mb="0" cb="0"/><line nr="491" mi="0" ci="4" mb="0" cb="0"/><line nr="492" mi="0" ci="4" mb="0" cb="0"/><line nr="493" mi="0" ci="4" mb="0" cb="0"/><line nr="494" mi="0" ci="6" mb="0" cb="0"/><line nr="518" mi="0" ci="4" mb="0" cb="0"/><line nr="519" mi="0" ci="4" mb="0" cb="0"/><line nr="520" mi="0" ci="5" mb="0" cb="0"/><line nr="521" mi="0" ci="9" mb="0" cb="0"/><line nr="522" mi="0" ci="4" mb="0" cb="0"/><line nr="523" mi="0" ci="1" mb="0" cb="0"/><line nr="524" mi="0" ci="3" mb="0" cb="0"/><line nr="540" mi="0" ci="4" mb="0" cb="0"/><line nr="572" mi="0" ci="4" mb="0" cb="0"/><line nr="573" mi="0" ci="4" mb="0" cb="0"/><line nr="574" mi="0" ci="3" mb="0" cb="2"/><line nr="575" mi="0" ci="6" mb="0" cb="0"/><line nr="577" mi="0" ci="7" mb="0" cb="0"/><line nr="579" mi="0" ci="1" mb="0" cb="0"/><line nr="580" mi="0" ci="3" mb="0" cb="0"/><line nr="603" mi="0" ci="4" mb="0" cb="0"/><line nr="604" mi="0" ci="4" mb="0" cb="0"/><line nr="605" mi="0" ci="5" mb="0" cb="0"/><line nr="606" mi="0" ci="3" mb="0" cb="2"/><line nr="607" mi="0" ci="5" mb="0" cb="0"/><line nr="609" mi="0" ci="5" mb="0" cb="0"/><line nr="610" mi="0" ci="3" mb="0" cb="2"/><line nr="611" mi="0" ci="5" mb="0" cb="0"/><line nr="613" mi="0" ci="4" mb="0" cb="0"/><line nr="615" mi="0" ci="1" mb="0" cb="0"/><line nr="617" mi="0" ci="1" mb="0" cb="0"/><line nr="618" mi="0" ci="3" mb="0" cb="0"/><line nr="623" mi="0" ci="4" mb="0" cb="0"/><line nr="624" mi="0" ci="4" mb="0" cb="0"/><line nr="625" mi="0" ci="12" mb="0" cb="0"/><line nr="626" mi="0" ci="3" mb="0" cb="0"/><line nr="631" mi="4" ci="0" mb="0" cb="0"/><line nr="632" mi="5" ci="0" mb="0" cb="0"/><line nr="642" mi="0" ci="5" mb="0" cb="0"/><line nr="665" mi="0" ci="10" mb="0" cb="0"/><line nr="674" mi="0" ci="10" mb="0" cb="0"/><line nr="693" mi="0" ci="4" mb="0" cb="0"/><line nr="694" mi="0" ci="9" mb="0" cb="0"/><line nr="695" mi="0" ci="1" mb="0" cb="0"/><line nr="704" mi="0" ci="4" mb="0" cb="0"/><line nr="705" mi="0" ci="9" mb="0" cb="0"/><line nr="706" mi="0" ci="1" mb="0" cb="0"/><line nr="722" mi="0" ci="4" mb="0" cb="0"/><line nr="723" mi="0" ci="4" mb="0" cb="0"/><line nr="724" mi="0" ci="12" mb="0" cb="0"/><line nr="725" mi="0" ci="3" mb="0" cb="0"/><line nr="742" mi="0" ci="4" mb="0" cb="0"/><line nr="743" mi="0" ci="4" mb="0" cb="0"/><line nr="744" mi="0" ci="5" mb="0" cb="0"/><line nr="745" mi="0" ci="3" mb="0" cb="2"/><line nr="746" mi="0" ci="25" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="750" mi="0" ci="1" mb="0" cb="0"/><line nr="751" mi="0" ci="3" mb="0" cb="0"/><line nr="763" mi="0" ci="4" mb="0" cb="0"/><line nr="764" mi="0" ci="4" mb="0" cb="0"/><line nr="780" mi="0" ci="4" mb="0" cb="0"/><line nr="781" mi="0" ci="4" mb="0" cb="0"/><line nr="782" mi="0" ci="5" mb="0" cb="0"/><line nr="783" mi="0" ci="3" mb="0" cb="2"/><line nr="784" mi="0" ci="6" mb="0" cb="0"/><line nr="786" mi="0" ci="5" mb="0" cb="0"/><line nr="787" mi="0" ci="14" mb="0" cb="0"/><line nr="788" mi="0" ci="4" mb="0" cb="0"/><line nr="789" mi="0" ci="1" mb="0" cb="0"/><line nr="791" mi="0" ci="1" mb="0" cb="0"/><line nr="792" mi="0" ci="3" mb="0" cb="0"/><line nr="799" mi="0" ci="4" mb="0" cb="0"/><line nr="800" mi="0" ci="4" mb="0" cb="0"/><line nr="801" mi="0" ci="13" mb="0" cb="0"/><line nr="802" mi="0" ci="13" mb="0" cb="0"/><line nr="803" mi="0" ci="2" mb="0" cb="0"/><line nr="805" mi="0" ci="3" mb="0" cb="0"/><line nr="811" mi="0" ci="3" mb="1" cb="1"/><line nr="812" mi="0" ci="3" mb="0" cb="0"/><line nr="813" mi="3" ci="0" mb="2" cb="0"/><line nr="814" mi="3" ci="0" mb="0" cb="0"/><line nr="815" mi="12" ci="0" mb="2" cb="0"/><line nr="817" mi="3" ci="0" mb="0" cb="0"/><line nr="818" mi="3" ci="0" mb="2" cb="0"/><line nr="819" mi="4" ci="0" mb="0" cb="0"/><line nr="821" mi="5" ci="0" mb="0" cb="0"/><line nr="834" mi="4" ci="0" mb="0" cb="0"/><line nr="835" mi="8" ci="0" mb="0" cb="0"/><line nr="836" mi="1" ci="0" mb="0" cb="0"/><line nr="849" mi="0" ci="3" mb="0" cb="2"/><line nr="850" mi="0" ci="5" mb="0" cb="0"/><line nr="852" mi="0" ci="6" mb="0" cb="0"/><line nr="864" mi="0" ci="3" mb="0" cb="2"/><line nr="865" mi="0" ci="2" mb="0" cb="0"/><line nr="867" mi="0" ci="6" mb="0" cb="0"/><line nr="877" mi="2" ci="0" mb="0" cb="0"/><line nr="882" mi="0" ci="9" mb="0" cb="2"/><line nr="887" mi="0" ci="4" mb="0" cb="0"/><line nr="888" mi="0" ci="4" mb="0" cb="0"/><line nr="889" mi="0" ci="12" mb="0" cb="0"/><line nr="890" mi="0" ci="3" mb="0" cb="0"/><line nr="895" mi="0" ci="3" mb="0" cb="0"/><line nr="900" mi="0" ci="4" mb="0" cb="0"/><line nr="901" mi="0" ci="3" mb="0" cb="0"/><line nr="902" mi="0" ci="2" mb="0" cb="0"/><line nr="907" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="64" covered="813"/><counter type="BRANCH" missed="7" covered="29"/><counter type="LINE" missed="14" covered="173"/><counter type="COMPLEXITY" missed="9" covered="89"/><counter type="METHOD" missed="5" covered="75"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Promise.java"><line nr="76" mi="4" ci="0" mb="0" cb="0"/><line nr="77" mi="4" ci="0" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="5" mb="0" cb="0"/><line nr="104" mi="4" ci="0" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="4" mb="0" cb="0"/><line nr="119" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="3" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="8" mb="0" cb="0"/><line nr="154" mi="4" ci="0" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="5" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="4" mb="1" cb="1"/><line nr="203" mi="0" ci="2" mb="0" cb="0"/><line nr="205" mi="5" ci="0" mb="0" cb="0"/><line nr="225" mi="0" ci="4" mb="0" cb="0"/><line nr="235" mi="0" ci="4" mb="0" cb="0"/><line nr="236" mi="0" ci="2" mb="0" cb="0"/><line nr="247" mi="0" ci="5" mb="0" cb="0"/><line nr="257" mi="0" ci="5" mb="0" cb="0"/><line nr="268" mi="0" ci="5" mb="0" cb="0"/><line nr="278" mi="5" ci="0" mb="0" cb="0"/><line nr="293" mi="0" ci="2" mb="0" cb="0"/><line nr="294" mi="0" ci="3" mb="0" cb="0"/><line nr="295" mi="0" ci="1" mb="0" cb="0"/><line nr="299" mi="4" ci="0" mb="0" cb="0"/><line nr="304" mi="0" ci="3" mb="0" cb="0"/><line nr="309" mi="0" ci="5" mb="0" cb="0"/><line nr="317" mi="18" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="48" covered="99"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="8" covered="25"/><counter type="COMPLEXITY" missed="7" covered="15"/><counter type="METHOD" missed="6" covered="15"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="FutureImpl.java"><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="69" mi="0" ci="3" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="91" mi="0" ci="2" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="94" mi="0" ci="1" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="5" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="1" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="3" mb="1" cb="1"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="108" mi="5" ci="3" mb="0" cb="0"/><line nr="109" mi="0" ci="1" mb="0" cb="0"/><line nr="113" mi="0" ci="5" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="2"/><line nr="115" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="1" ci="21" mb="2" cb="2"/><line nr="118" mi="0" ci="3" mb="1" cb="1"/><line nr="119" mi="0" ci="7" mb="0" cb="0"/><line nr="120" mi="0" ci="3" mb="0" cb="0"/><line nr="121" mi="0" ci="3" mb="0" cb="0"/><line nr="123" mi="0" ci="7" mb="0" cb="0"/><line nr="125" mi="5" ci="0" mb="0" cb="0"/><line nr="130" mi="0" ci="3" mb="0" cb="0"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="140" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="4" mb="0" cb="0"/><line nr="146" mi="0" ci="3" mb="0" cb="2"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="149" mi="0" ci="5" mb="0" cb="0"/><line nr="150" mi="0" ci="3" mb="1" cb="1"/><line nr="151" mi="4" ci="0" mb="0" cb="0"/><line nr="153" mi="0" ci="6" mb="0" cb="0"/><line nr="155" mi="5" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="1" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="5" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="1" cb="1"/><line nr="171" mi="5" ci="0" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="1" cb="1"/><line nr="174" mi="5" ci="0" mb="0" cb="0"/><line nr="180" mi="0" ci="12" mb="0" cb="0"/><line nr="181" mi="0" ci="3" mb="0" cb="2"/><line nr="182" mi="0" ci="3" mb="0" cb="0"/><line nr="184" mi="5" ci="3" mb="0" cb="0"/><line nr="185" mi="0" ci="1" mb="0" cb="0"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="5" mb="0" cb="0"/><line nr="203" mi="0" ci="3" mb="1" cb="1"/><line nr="204" mi="5" ci="0" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="0"/><line nr="207" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="3" mb="0" cb="0"/><line nr="209" mi="0" ci="3" mb="0" cb="0"/><line nr="210" mi="5" ci="3" mb="0" cb="0"/><line nr="211" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="2" mb="0" cb="0"/><line nr="216" mi="0" ci="4" mb="0" cb="0"/><line nr="217" mi="0" ci="5" mb="0" cb="0"/><line nr="218" mi="0" ci="3" mb="0" cb="2"/><line nr="219" mi="0" ci="4" mb="0" cb="0"/><line nr="221" mi="0" ci="4" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="0" cb="0"/><line nr="224" mi="5" ci="0" mb="0" cb="0"/><line nr="228" mi="0" ci="18" mb="0" cb="0"/><line nr="229" mi="0" ci="1" mb="0" cb="0"/><line nr="236" mi="20" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="75" covered="269"/><counter type="BRANCH" missed="8" covered="16"/><counter type="LINE" missed="7" covered="66"/><counter type="COMPLEXITY" missed="9" covered="21"/><counter type="METHOD" missed="1" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="187" covered="1181"/><counter type="BRANCH" missed="16" covered="46"/><counter type="LINE" missed="29" covered="264"/><counter type="COMPLEXITY" missed="25" covered="125"/><counter type="METHOD" missed="12" covered="107"/><counter type="CLASS" missed="0" covered="4"/></package><package name="javaslang/collection"><class name="javaslang/collection/RedBlackTreeModule$Node"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/RedBlackTree$Color;ILjavaslang/collection/RedBlackTree;Ljava/lang/Object;Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTreeModule$Empty;)V" line="378"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/RedBlackTreeModule$Empty;" line="391"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="color" desc="()Ljavaslang/collection/RedBlackTree$Color;" line="396"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="()Ljava/util/Comparator;" line="401"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/Object;)Z" line="406"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="find" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="418"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="430"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="left" desc="()Ljavaslang/collection/RedBlackTree;" line="435"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="right" desc="()Ljavaslang/collection/RedBlackTree;" line="440"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="445"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="value" desc="()Ljava/lang/Object;" line="450"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="455"><counter type="INSTRUCTION" missed="2" covered="40"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="474"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="479"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLispString" desc="(Ljavaslang/collection/RedBlackTree;)Ljava/lang/String;" line="483"><counter type="INSTRUCTION" missed="2" covered="73"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLeaf" desc="()Z" line="499"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="color" desc="(Ljavaslang/collection/RedBlackTree$Color;)Ljavaslang/collection/RedBlackTreeModule$Node;" line="503"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="color" desc="(Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTree$Color;)Ljavaslang/collection/RedBlackTree;" line="507"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="balanceLeft" desc="(Ljavaslang/collection/RedBlackTree$Color;ILjavaslang/collection/RedBlackTree;Ljava/lang/Object;Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTreeModule$Empty;)Ljavaslang/collection/RedBlackTreeModule$Node;" line="512"><counter type="INSTRUCTION" missed="0" covered="121"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="balanceRight" desc="(Ljavaslang/collection/RedBlackTree$Color;ILjavaslang/collection/RedBlackTree;Ljava/lang/Object;Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTreeModule$Empty;)Ljavaslang/collection/RedBlackTreeModule$Node;" line="542"><counter type="INSTRUCTION" missed="0" covered="121"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="blackify" desc="(Ljavaslang/collection/RedBlackTree;)Ljavaslang/Tuple2;" line="571"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="delete" desc="(Ljavaslang/collection/RedBlackTree;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="581"><counter type="INSTRUCTION" missed="0" covered="196"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="33"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deleteMin" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;)Ljavaslang/Tuple3;" line="636"><counter type="INSTRUCTION" missed="0" covered="105"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(Ljavaslang/collection/RedBlackTree;Ljava/lang/Object;)Ljavaslang/collection/RedBlackTreeModule$Node;" line="665"><counter type="INSTRUCTION" missed="4" covered="89"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isRed" desc="(Ljavaslang/collection/RedBlackTree;)Z" line="692"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="join" desc="(Ljavaslang/collection/RedBlackTree;Ljava/lang/Object;Ljavaslang/collection/RedBlackTree;)Ljavaslang/collection/RedBlackTree;" line="696"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="joinGT" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;Ljava/lang/Object;Ljavaslang/collection/RedBlackTreeModule$Node;I)Ljavaslang/collection/RedBlackTreeModule$Node;" line="715"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="joinLT" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;Ljava/lang/Object;Ljavaslang/collection/RedBlackTreeModule$Node;I)Ljavaslang/collection/RedBlackTreeModule$Node;" line="724"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="merge" desc="(Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTree;)Ljavaslang/collection/RedBlackTree;" line="733"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mergeEQ" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;Ljavaslang/collection/RedBlackTreeModule$Node;)Ljavaslang/collection/RedBlackTreeModule$Node;" line="755"><counter type="INSTRUCTION" missed="29" covered="110"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="2" covered="14"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mergeGT" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;Ljavaslang/collection/RedBlackTreeModule$Node;I)Ljavaslang/collection/RedBlackTreeModule$Node;" line="776"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mergeLT" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;Ljavaslang/collection/RedBlackTreeModule$Node;I)Ljavaslang/collection/RedBlackTreeModule$Node;" line="785"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maximum" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;)Ljava/lang/Object;" line="794"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minimum" desc="(Ljavaslang/collection/RedBlackTreeModule$Node;)Ljava/lang/Object;" line="802"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="split" desc="(Ljavaslang/collection/RedBlackTree;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="810"><counter type="INSTRUCTION" missed="0" covered="69"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unbalancedLeft" desc="(Ljavaslang/collection/RedBlackTree$Color;ILjavaslang/collection/RedBlackTree;Ljava/lang/Object;Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTreeModule$Empty;)Ljavaslang/Tuple2;" line="829"><counter type="INSTRUCTION" missed="29" covered="73"/><counter type="BRANCH" missed="4" covered="8"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="4" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unbalancedRight" desc="(Ljavaslang/collection/RedBlackTree$Color;ILjavaslang/collection/RedBlackTree;Ljava/lang/Object;Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTreeModule$Empty;)Ljavaslang/Tuple2;" line="851"><counter type="INSTRUCTION" missed="29" covered="73"/><counter type="BRANCH" missed="4" covered="8"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="4" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="95" covered="1570"/><counter type="BRANCH" missed="16" covered="158"/><counter type="LINE" missed="8" covered="255"/><counter type="COMPLEXITY" missed="16" covered="108"/><counter type="METHOD" missed="0" covered="37"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Map"><method name="apply" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="32"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="165"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traverse" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="170"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Seq;" line="177"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unzip" desc="(Ljava/util/function/BiFunction;)Ljavaslang/Tuple2;" line="185"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/BiFunction;)Ljavaslang/Tuple3;" line="190"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljavaslang/Tuple2;)Z" line="203"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Seq;" line="245"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="length" desc="()I" line="266"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Seq;" line="281"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="351"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="374"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="381"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Seq;" line="387"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljavaslang/Tuple2;Ljava/lang/Object;)Ljavaslang/collection/Seq;" line="393"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Seq;" line="399"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forEach" desc="(Ljava/util/function/BiConsumer;)V" line="409"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$contains$3" desc="(Ljavaslang/Tuple2;Ljava/lang/Object;)Ljava/lang/Boolean;" line="203"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$2" desc="(Ljava/util/function/BiFunction;Ljavaslang/Tuple2;)Ljavaslang/Tuple3;" line="191"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$unzip$1" desc="(Ljava/util/function/BiFunction;Ljavaslang/Tuple2;)Ljavaslang/Tuple2;" line="186"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$traverse$0" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/List;Ljavaslang/Tuple2;)Ljavaslang/collection/List;" line="171"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="35" covered="166"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="5" covered="28"/><counter type="COMPLEXITY" missed="5" covered="18"/><counter type="METHOD" missed="4" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$4"><method name="&lt;init&gt;" desc="(Ljava/util/Iterator;)V" line="196"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="200"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="205"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$3"><method name="&lt;init&gt;" desc="([Ljava/lang/Object;)V" line="147"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="153"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$2"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="117"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="123"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="128"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$1"><method name="&lt;init&gt;" desc="()V" line="51"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="55"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="60"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="5"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$ArrayNode"><method name="&lt;init&gt;" desc="(II[Ljava/lang/Object;)V" line="568"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lookup" desc="(ILjava/lang/Object;)Ljavaslang/control/Option;" line="582"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modify" desc="(ILjava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/HashArrayMappedTrieModule$Action;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="590"><counter type="INSTRUCTION" missed="0" covered="99"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="608"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="([Ljava/lang/Object;ILjava/lang/Object;)[Ljava/lang/Object;" line="612"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pack" desc="(I[Ljava/lang/Object;)Ljavaslang/collection/HashArrayMappedTrieModule$IndexedNode;" line="619"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="635"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="640"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="645"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="()Ljava/lang/Integer;" line="568"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="210"/><counter type="BRANCH" missed="2" covered="14"/><counter type="LINE" missed="0" covered="36"/><counter type="COMPLEXITY" missed="2" covered="16"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/StreamModule$Combinations"><method name="apply" desc="(Ljavaslang/collection/Stream;I)Ljavaslang/collection/Stream;" line="1632"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljavaslang/collection/Stream;ILjavaslang/Tuple2;)Ljava/lang/Iterable;" line="1636"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/Stream;)Ljavaslang/collection/Stream;" line="1636"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/StreamModule$StreamFactory"><method name="create" desc="(Ljava/util/Iterator;)Ljavaslang/collection/Stream;" line="1660"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$create$0" desc="(Ljava/util/Iterator;)Ljavaslang/collection/Stream;" line="1660"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$8"><method name="&lt;init&gt;" desc="([D)V" line="288"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="293"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Double;" line="298"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$7"><method name="&lt;init&gt;" desc="([C)V" line="265"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="270"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Character;" line="275"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$6"><method name="&lt;init&gt;" desc="([B)V" line="242"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="247"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Byte;" line="252"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrie"><method name="empty" desc="()Ljavaslang/collection/HashArrayMappedTrie;" line="30"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$5"><method name="&lt;init&gt;" desc="([Z)V" line="219"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="224"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Boolean;" line="229"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$9"><method name="&lt;init&gt;" desc="([F)V" line="311"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="316"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Float;" line="321"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/CharSeqModule$Combinations"><method name="apply" desc="(Ljavaslang/collection/CharSeq;I)Ljavaslang/collection/IndexedSeq;" line="2394"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljavaslang/collection/CharSeq;ILjavaslang/Tuple2;)Ljava/lang/Iterable;" line="2398"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/CharSeq;)Ljavaslang/collection/CharSeq;" line="2398"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/RedBlackTree"><method name="empty" desc="()Ljavaslang/collection/RedBlackTree;" line="39"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="(Ljava/util/Comparator;)Ljavaslang/collection/RedBlackTree;" line="43"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Comparable;)Ljavaslang/collection/RedBlackTree;" line="48"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/util/Comparator;Ljava/lang/Object;)Ljavaslang/collection/RedBlackTree;" line="52"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Comparable;)Ljavaslang/collection/RedBlackTree;" line="60"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/util/Comparator;[Ljava/lang/Object;)Ljavaslang/collection/RedBlackTree;" line="66"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/RedBlackTree;" line="76"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/util/Comparator;Ljava/lang/Iterable;)Ljavaslang/collection/RedBlackTree;" line="82"><counter type="INSTRUCTION" missed="8" covered="30"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(Ljava/lang/Object;)Ljavaslang/collection/RedBlackTree;" line="103"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="delete" desc="(Ljava/lang/Object;)Ljavaslang/collection/RedBlackTree;" line="144"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="difference" desc="(Ljavaslang/collection/RedBlackTree;)Ljavaslang/collection/RedBlackTree;" line="149"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersection" desc="(Ljavaslang/collection/RedBlackTree;)Ljavaslang/collection/RedBlackTree;" line="172"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="()Ljavaslang/control/Option;" line="209"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="()Ljavaslang/control/Option;" line="218"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="union" desc="(Ljavaslang/collection/RedBlackTree;)Ljavaslang/collection/RedBlackTree;" line="243"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="286"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="8" covered="305"/><counter type="BRANCH" missed="3" covered="25"/><counter type="LINE" missed="1" covered="58"/><counter type="COMPLEXITY" missed="2" covered="28"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stream$Cons$SerializationProxy"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Stream$Cons;)V" line="1549"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeObject" desc="(Ljava/io/ObjectOutputStream;)V" line="1560"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="1576"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1601"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="64"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stream"><method name="collector" desc="()Ljava/util/stream/Collector;" line="109"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="from" desc="(I)Ljavaslang/collection/Stream;" line="128"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="from" desc="(J)Ljavaslang/collection/Stream;" line="140"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gen" desc="(Ljava/util/function/Supplier;)Ljavaslang/collection/Stream;" line="151"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gen" desc="(Ljava/lang/Object;Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="165"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cons" desc="(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljavaslang/collection/Stream;" line="179"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Stream;" line="193"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="204"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="220"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Stream;" line="247"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Stream;" line="261"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="274"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/Stream;" line="289"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/Stream;" line="300"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/Stream;" line="311"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/Stream;" line="322"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/Stream;" line="333"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/Stream;" line="344"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/Stream;" line="355"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/Stream;" line="366"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/Stream;" line="371"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/Stream;" line="375"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/Stream;" line="379"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/Stream;" line="399"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/Stream;" line="425"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/Stream;" line="445"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/Stream;" line="471"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/Stream;" line="475"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/Stream;" line="479"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/Stream;" line="483"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/Stream;" line="503"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/Stream;" line="529"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/Stream;" line="549"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/Stream;" line="575"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="repeat" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="586"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="append" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="591"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="602"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendSelf" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="628"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/Stream;" line="634"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="()Ljavaslang/collection/Stream;" line="639"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="(I)Ljavaslang/collection/Stream;" line="644"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="()Ljavaslang/collection/Stream;" line="649"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(I)Ljavaslang/collection/Stream;" line="654"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="659"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cycle" desc="()Ljavaslang/collection/Stream;" line="678"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/Stream;" line="683"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Stream;" line="688"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="695"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/Stream;" line="701"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/Stream;" line="710"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="719"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="725"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="735"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="746"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="752"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(I)Ljava/lang/Object;" line="776"><counter type="INSTRUCTION" missed="0" covered="72"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="794"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="800"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="805"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="810"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Object;I)I" line="815"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/Stream;" line="826"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="840"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(ILjava/lang/Object;)Ljavaslang/collection/Stream;" line="845"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insertAll" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/Stream;" line="859"><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="873"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="885"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Object;I)I" line="890"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="901"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="906"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="916"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="padTo" desc="(ILjava/lang/Object;)Ljavaslang/collection/Stream;" line="921"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="patch" desc="(ILjava/lang/Iterable;I)Ljavaslang/collection/Stream;" line="932"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="942"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Stream;" line="948"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="permutations" desc="()Ljavaslang/collection/Stream;" line="960"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prepend" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="978"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prependAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="984"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="990"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="1000"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="1011"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAt" desc="(I)Ljavaslang/collection/Stream;" line="1016"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="1029"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="1035"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="1042"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="1056"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="1068"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverse" desc="()Ljavaslang/collection/Stream;" line="1079"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Stream;" line="1084"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Stream;" line="1089"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Stream;" line="1097"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="slice" desc="(II)Ljavaslang/collection/Stream;" line="1103"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="1117"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="1122"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="()Ljavaslang/collection/Stream;" line="1127"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Stream;" line="1132"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="1138"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="1143"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1151"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(I)Ljavaslang/Tuple2;" line="1157"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1162"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAtInclusive" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1168"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="1179"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1184"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(I)Ljavaslang/collection/Stream;" line="1189"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(II)Ljavaslang/collection/Stream;" line="1204"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="1223"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/Stream;" line="1228"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/Stream;" line="1237"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="1248"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="1254"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="1269"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1275"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1285"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="(ILjava/lang/Object;)Ljavaslang/collection/Stream;" line="1295"><counter type="INSTRUCTION" missed="0" covered="89"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="1318"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="1324"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Stream;" line="1330"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$37" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="1289"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$36" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="1288"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$35" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="1287"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip$34" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="1278"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip$33" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="1277"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$takeWhile$32" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="1260"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$take$31" desc="(I)Ljavaslang/collection/Stream;" line="1231"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subSequence$30" desc="(I)Ljavaslang/collection/Stream;" line="1212"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sortBy$29" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)I" line="1145"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$slice$28" desc="(I)Ljavaslang/collection/Stream;" line="1108"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$replaceAll$27" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="1061"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$replace$26" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="1049"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$removeAll$25" desc="(Ljavaslang/collection/Stream;Ljava/lang/Object;)Z" line="1037"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$removeAll$24" desc="(Ljava/lang/Object;Ljava/lang/Object;)Z" line="1029"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$removeAt$23" desc="(I)Ljavaslang/collection/Stream;" line="1023"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$removeFirst$22" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="1005"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$remove$21" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="994"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$prepend$20" desc="()Ljavaslang/collection/Stream;" line="978"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$permutations$19" desc="(Ljavaslang/collection/Stream;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="969"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$18" desc="(Ljava/lang/Object;Ljavaslang/collection/Stream;)Ljavaslang/collection/Stream;" line="969"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$peek$17" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Stream;" line="954"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$padTo$16" desc="(ILjava/lang/Object;)Ljavaslang/collection/Stream;" line="926"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$padTo$15" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="924"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$14" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="910"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$length$13" desc="(Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Integer;" line="901"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$intersperse$12" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="877"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$11" desc="(Ljavaslang/collection/Stream;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="878"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$insertAll$10" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/Stream;" line="867"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$insert$9" desc="(ILjava/lang/Object;)Ljavaslang/collection/Stream;" line="852"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$insert$8" desc="()Ljavaslang/collection/Stream;" line="848"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$7" desc="(Ljava/lang/Object;Ljavaslang/collection/Iterator;)Ljavaslang/Tuple2;" line="795"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filter$6" desc="(Ljavaslang/collection/Stream;Ljava/util/function/Predicate;)Ljavaslang/collection/Stream;" line="741"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$distinctBy$5" desc="(Ljava/util/Set;Ljava/util/function/Function;Ljava/lang/Object;)Z" line="696"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$crossProduct$4" desc="(Ljavaslang/collection/Stream;Ljava/lang/Object;)Ljava/lang/Iterable;" line="661"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$3" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="661"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$appendAll$2" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stream;" line="603"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$append$1" desc="(Ljavaslang/Lazy;Ljava/lang/Object;)Ljavaslang/collection/Stream;" line="596"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="112"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="1963"/><counter type="BRANCH" missed="0" covered="170"/><counter type="LINE" missed="0" covered="331"/><counter type="COMPLEXITY" missed="0" covered="241"/><counter type="METHOD" missed="0" covered="156"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/LinkedHashSet$SerializationProxy"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/LinkedHashMap;)V" line="947"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeObject" desc="(Ljava/io/ObjectOutputStream;)V" line="958"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="974"><counter type="INSTRUCTION" missed="5" covered="28"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="998"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="71"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="19"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stream$Cons"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/util/function/Supplier;)V" line="1430"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="1438"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1443"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="1448"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Stream;" line="1453"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1458"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1479"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1484"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeReplace" desc="()Ljava/lang/Object;" line="1511"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="1523"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="142"/><counter type="BRANCH" missed="0" covered="22"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="21"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stack"><method name="collector" desc="()Ljava/util/stream/Collector;" line="54"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Stack;" line="71"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Stack;" line="82"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Stack;" line="96"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Stack;" line="110"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/Stack;" line="125"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/Stack;" line="136"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/Stack;" line="147"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/Stack;" line="158"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/Stack;" line="169"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/Stack;" line="180"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/Stack;" line="191"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/Stack;" line="202"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Stack;" line="217"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Stack;" line="231"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/Stack;" line="236"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/Stack;" line="240"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/Stack;" line="244"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/Stack;" line="264"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/Stack;" line="290"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/Stack;" line="310"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/Stack;" line="336"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/Stack;" line="340"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/Stack;" line="344"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/Stack;" line="348"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/Stack;" line="368"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/Stack;" line="394"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/Stack;" line="414"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/Stack;" line="440"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="57"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="189"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="49"/><counter type="COMPLEXITY" missed="0" covered="31"/><counter type="METHOD" missed="0" covered="30"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeMap"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/RedBlackTree;)V" line="38"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="52"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/TreeMap;" line="71"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="empty" desc="(Ljava/util/Comparator;)Ljavaslang/collection/TreeMap;" line="83"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="97"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/TreeMap;" line="110"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/util/Map;)Ljavaslang/collection/TreeMap;" line="130"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/util/Comparator;Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="148"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Comparable;Ljava/lang/Object;)Ljavaslang/collection/TreeMap;" line="163"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/util/Comparator;Ljava/lang/Comparable;Ljava/lang/Object;)Ljavaslang/collection/TreeMap;" line="177"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(Ljava/util/Comparator;ILjava/util/function/Function;)Ljavaslang/collection/TreeMap;" line="195"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/TreeMap;" line="213"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fill" desc="(Ljava/util/Comparator;ILjava/util/function/Supplier;)Ljavaslang/collection/TreeMap;" line="230"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/TreeMap;" line="247"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ofEntries" desc="([Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="262"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="([Ljava/util/Map$Entry;)Ljavaslang/collection/TreeMap;" line="276"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ofEntries" desc="(Ljava/util/Comparator;[Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="291"><counter type="INSTRUCTION" missed="3" covered="42"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="(Ljava/util/Comparator;[Ljava/util/Map$Entry;)Ljavaslang/collection/TreeMap;" line="311"><counter type="INSTRUCTION" missed="3" covered="46"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeMap;" line="330"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ofEntries" desc="(Ljava/util/Comparator;Ljava/lang/Iterable;)Ljavaslang/collection/TreeMap;" line="344"><counter type="INSTRUCTION" missed="3" covered="37"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/collection/TreeMap;" line="359"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="bimap" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/collection/TreeMap;" line="365"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="clear" desc="()Ljavaslang/collection/TreeMap;" line="373"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/TreeMap;" line="378"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/TreeMap;" line="383"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/TreeMap;" line="389"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/TreeMap;" line="395"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/TreeMap;" line="404"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeMap;" line="413"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeMap;" line="419"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsKey" desc="(Ljava/lang/Object;)Z" line="425"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsValue" desc="(Ljava/lang/Object;)Z" line="431"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeMap;" line="436"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeMap;" line="442"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeMap;" line="448"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/Comparator;Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeMap;" line="454"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="461"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="467"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="473"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="484"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="489"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljavaslang/Tuple2;" line="494"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="503"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/TreeMap;" line="508"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="518"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="523"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="528"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="533"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keyComparator" desc="()Ljava/util/Comparator;" line="539"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keySet" desc="()Ljavaslang/collection/SortedSet;" line="544"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeMap;" line="550"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/Comparator;Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeMap;" line="556"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapValues" desc="(Ljava/util/function/Function;)Ljavaslang/collection/TreeMap;" line="563"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="569"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="max" desc="()Ljavaslang/control/Option;" line="574"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="merge" desc="(Ljavaslang/collection/Map;)Ljavaslang/collection/TreeMap;" line="579"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="merge" desc="(Ljavaslang/collection/Map;Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeMap;" line="585"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="()Ljavaslang/control/Option;" line="590"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="595"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/TreeMap;" line="604"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/TreeMap;" line="613"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="619"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/TreeMap;" line="625"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeMap;" line="636"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="653"><counter type="INSTRUCTION" missed="1" covered="21"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)Ljavaslang/collection/TreeMap;" line="660"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeMap;" line="665"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljavaslang/Tuple2;Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeMap;" line="677"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="683"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="689"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="695"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="700"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="705"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="710"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/TreeMap;" line="719"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="729"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/TreeMap;" line="734"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/TreeMap;" line="739"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeMap;" line="744"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeMap;" line="750"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="values" desc="()Ljavaslang/collection/Seq;" line="756"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="createTreeMap" desc="(Ljava/util/Comparator;Ljava/lang/Iterable;)Ljavaslang/collection/TreeMap;" line="771"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="782"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="794"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="799"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="804"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sliding$10" desc="(Ljavaslang/collection/Seq;)Ljavaslang/collection/TreeMap;" line="705"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$merge$9" desc="(Ljavaslang/collection/Map;Ljavaslang/collection/Map;)Ljavaslang/collection/Map;" line="585"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$merge$8" desc="(Ljavaslang/collection/Map;Ljavaslang/collection/Map;)Ljavaslang/collection/Map;" line="579"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mapValues$7" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="564"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$6" desc="(Ljava/util/function/BiFunction;Ljavaslang/Tuple2;)Ljavaslang/Tuple2;" line="558"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$5" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="475"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$4" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/TreeMap;)Ljavaslang/collection/TreeMap;" line="476"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$3" desc="(Ljava/util/function/BiFunction;Ljavaslang/Tuple2;)Ljava/lang/Iterable;" line="456"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$bimap$2" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljavaslang/Tuple2;)Ljavaslang/Tuple2;" line="368"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$collector$1" desc="(Ljava/util/Comparator;Ljava/util/ArrayList;)Ljavaslang/collection/TreeMap;" line="59"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="55"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="108" covered="1121"/><counter type="BRANCH" missed="6" covered="52"/><counter type="LINE" missed="18" covered="197"/><counter type="COMPLEXITY" missed="19" covered="107"/><counter type="METHOD" missed="13" covered="84"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/LinkedHashMap"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Queue;Ljavaslang/collection/HashMap;)V" line="35"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="49"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/LinkedHashMap;" line="61"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="74"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/LinkedHashMap;" line="89"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/util/Map;)Ljavaslang/collection/LinkedHashMap;" line="113"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashMap;" line="131"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/LinkedHashMap;" line="149"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/LinkedHashMap;" line="165"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="([Ljava/util/Map$Entry;)Ljavaslang/collection/LinkedHashMap;" line="179"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="([Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="199"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashMap;" line="214"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashMap;" line="230"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="clear" desc="()Ljavaslang/collection/LinkedHashMap;" line="238"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljavaslang/Tuple2;)Z" line="243"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsKey" desc="(Ljava/lang/Object;)Z" line="248"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsValue" desc="(Ljava/lang/Object;)Z" line="253"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/LinkedHashMap;" line="258"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/LinkedHashMap;" line="263"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashMap;" line="269"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/LinkedHashMap;" line="275"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/LinkedHashMap;" line="286"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashMap;" line="297"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashMap;" line="303"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashMap;" line="309"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashMap;" line="315"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashMap;" line="321"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="332"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="338"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashMap;" line="343"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="356"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="361"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljavaslang/Tuple2;" line="366"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="371"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/LinkedHashMap;" line="376"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="385"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="394"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="399"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="404"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keySet" desc="()Ljavaslang/collection/Set;" line="409"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashMap;" line="414"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapValues" desc="(Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashMap;" line="420"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="426"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="merge" desc="(Ljavaslang/collection/Map;)Ljavaslang/collection/LinkedHashMap;" line="431"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="merge" desc="(Ljavaslang/collection/Map;Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashMap;" line="436"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="441"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/LinkedHashMap;" line="448"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashMap;" line="457"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="470"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/LinkedHashMap;" line="475"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashMap;" line="486"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="495"><counter type="INSTRUCTION" missed="1" covered="21"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="502"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashMap;" line="507"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljavaslang/Tuple2;Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashMap;" line="519"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="525"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="531"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="537"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="542"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="547"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="552"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/LinkedHashMap;" line="559"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="568"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/LinkedHashMap;" line="577"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/LinkedHashMap;" line="586"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashMap;" line="595"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashMap;" line="602"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="values" desc="()Ljavaslang/collection/Seq;" line="609"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="614"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="626"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="630"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="635"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="640"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrap" desc="(Ljavaslang/collection/Queue;Ljavaslang/collection/HashMap;)Ljavaslang/collection/LinkedHashMap;" line="644"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$removeAll$10" desc="(Ljavaslang/collection/HashSet;Ljavaslang/Tuple2;)Z" line="489"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$removeAll$9" desc="(Ljavaslang/collection/HashSet;Ljavaslang/Tuple2;)Z" line="488"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$remove$8" desc="(Ljava/lang/Object;Ljavaslang/Tuple2;)Z" line="476"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$put$7" desc="(Ljava/lang/Object;Ljavaslang/Tuple2;)Z" line="460"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mapValues$6" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="421"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$5" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/LinkedHashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="415"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$4" desc="(Ljava/util/function/Function;Ljavaslang/collection/LinkedHashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="345"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$3" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/LinkedHashMap;)Ljavaslang/collection/LinkedHashMap;" line="348"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$2" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/LinkedHashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/LinkedHashMap;" line="323"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$bimap$1" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljavaslang/Tuple2;)Ljavaslang/Tuple2;" line="232"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="52"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="30"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="34" covered="972"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="6" covered="202"/><counter type="COMPLEXITY" missed="6" covered="113"/><counter type="METHOD" missed="3" covered="83"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$AbstractNode"><method name="&lt;init&gt;" desc="()V" line="63"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bitCount" desc="(I)I" line="75"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashFragment" desc="(II)I" line="84"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBitmap" desc="(I)I" line="88"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fromBitmap" desc="(II)I" line="92"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="101"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsKey" desc="(Ljava/lang/Object;)Z" line="106"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/HashArrayMappedTrie;" line="111"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/HashArrayMappedTrie;" line="116"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="121"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="142"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$toString$0" desc="(Ljavaslang/Tuple2;)Ljava/lang/String;" line="142"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="149"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="25"/><counter type="COMPLEXITY" missed="0" covered="19"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$FlatMap"><method name="&lt;init&gt;" desc="()V" line="1026"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Tree$Node;Ljava/util/function/Function;)Ljavaslang/collection/Tree;" line="1030"><counter type="INSTRUCTION" missed="2" covered="27"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/util/function/Function;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Tree;" line="1036"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="31"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="7"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/List"><method name="collector" desc="()Ljava/util/stream/Collector;" line="95"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/List;" line="115"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="126"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/List;" line="146"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="167"><counter type="INSTRUCTION" missed="0" covered="73"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/List;" line="201"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/List;" line="212"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/List;" line="223"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/List;" line="234"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/List;" line="245"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/List;" line="256"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/List;" line="267"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/List;" line="278"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/List;" line="293"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/List;" line="307"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/List;" line="312"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/List;" line="316"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/List;" line="320"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/List;" line="340"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/List;" line="366"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/List;" line="386"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/List;" line="412"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/List;" line="416"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/List;" line="420"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/List;" line="424"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/List;" line="444"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/List;" line="470"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/List;" line="490"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/List;" line="516"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="append" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="521"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="526"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/List;" line="532"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="()Ljavaslang/collection/List;" line="537"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="(I)Ljavaslang/collection/List;" line="542"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="()Ljavaslang/collection/List;" line="547"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(I)Ljavaslang/collection/List;" line="552"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="557"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/List;" line="564"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/List;" line="569"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/List;" line="576"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/List;" line="583"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/List;" line="592"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="603"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="609"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="619"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="626"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/List;" line="632"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forEach" desc="(Ljava/util/function/Consumer;)V" line="648"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljava/util/function/Predicate;)Z" line="654"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(I)Ljava/lang/Object;" line="660"><counter type="INSTRUCTION" missed="0" covered="72"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="678"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="684"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="689"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="694"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Object;I)I" line="699"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/List;" line="710"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="719"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(ILjava/lang/Object;)Ljavaslang/collection/List;" line="727"><counter type="INSTRUCTION" missed="0" covered="74"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insertAll" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/List;" line="747"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="768"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="775"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Object;I)I" line="780"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/List;" line="791"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="801"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="padTo" desc="(ILjava/lang/Object;)Ljavaslang/collection/List;" line="806"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="patch" desc="(ILjava/lang/Iterable;I)Ljavaslang/collection/List;" line="815"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="825"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="()Ljava/lang/Object;" line="835"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peekOption" desc="()Ljavaslang/control/Option;" line="843"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/List;" line="854"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="permutations" desc="()Ljavaslang/collection/List;" line="863"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pop" desc="()Ljavaslang/collection/List;" line="881"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="popOption" desc="()Ljavaslang/control/Option;" line="889"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pop2" desc="()Ljavaslang/Tuple2;" line="894"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pop2Option" desc="()Ljavaslang/control/Option;" line="902"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prepend" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="907"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prependAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="912"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="push" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="918"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="push" desc="([Ljava/lang/Object;)Ljavaslang/collection/List;" line="924"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pushAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="934"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="944"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="968"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="984"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAt" desc="(I)Ljavaslang/collection/List;" line="991"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Object;)Ljavaslang/collection/List;" line="1012"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="1027"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/List;" line="1043"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/List;" line="1062"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="1079"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverse" desc="()Ljavaslang/collection/List;" line="1092"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/List;" line="1097"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/List;" line="1102"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/List;" line="1108"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="slice" desc="(II)Ljavaslang/collection/List;" line="1114"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="1133"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="1138"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="()Ljavaslang/collection/List;" line="1143"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="(Ljava/util/Comparator;)Ljavaslang/collection/List;" line="1148"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/List;" line="1154"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/List;" line="1159"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1167"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(I)Ljavaslang/Tuple2;" line="1174"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1190"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAtInclusive" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1204"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="1218"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1223"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(I)Ljavaslang/collection/List;" line="1228"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(II)Ljavaslang/collection/List;" line="1243"><counter type="INSTRUCTION" missed="0" covered="80"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="1266"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/List;" line="1271"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/List;" line="1287"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="1298"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/List;" line="1304"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="1314"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1320"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1334"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="(ILjava/lang/Object;)Ljavaslang/collection/List;" line="1349"><counter type="INSTRUCTION" missed="0" covered="112"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/List;" line="1376"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/List;" line="1382"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/List;" line="1388"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sortBy$12" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)I" line="1161"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$permutations$11" desc="(Ljavaslang/collection/List;Ljava/lang/Object;)Ljavaslang/collection/List;" line="872"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$10" desc="(Ljava/lang/Object;Ljavaslang/collection/List;)Ljavaslang/collection/List;" line="872"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$padTo$9" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="809"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$intersperse$8" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/List;)Ljavaslang/collection/List;" line="770"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$7" desc="(Ljava/lang/Object;Ljavaslang/collection/Iterator;)Ljavaslang/Tuple2;" line="679"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filter$6" desc="(Ljava/util/function/Predicate;Ljavaslang/collection/List;Ljava/lang/Object;)Ljavaslang/collection/List;" line="620"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$distinctBy$5" desc="(Ljava/util/Set;Ljava/util/function/Function;Ljava/lang/Object;)Z" line="578"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$crossProduct$4" desc="(Ljavaslang/collection/List;Ljava/lang/Object;)Ljava/lang/Iterable;" line="559"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$3" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="559"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$appendAll$2" desc="(Ljava/lang/Object;Ljavaslang/collection/List;)Ljavaslang/collection/List;" line="527"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$append$1" desc="(Ljava/lang/Object;Ljavaslang/collection/List;)Ljavaslang/collection/List;" line="521"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="98"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="2356"/><counter type="BRANCH" missed="0" covered="260"/><counter type="LINE" missed="0" covered="472"/><counter type="COMPLEXITY" missed="0" covered="263"/><counter type="METHOD" missed="0" covered="133"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Traversable$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Traversable;Ljavaslang/collection/Traversable;)V" line="585"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="591"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="596"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/LinearSeq"><method name="indexWhere" desc="(Ljava/util/function/Predicate;I)I" line="97"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOfSlice" desc="(Ljava/lang/Iterable;I)I" line="127"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexWhere" desc="(Ljava/util/function/Predicate;I)I" line="132"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverseIterator" desc="()Ljavaslang/collection/Iterator;" line="205"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="segmentLength" desc="(Ljava/util/function/Predicate;I)I" line="219"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="93"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/VectorModule$Combinations"><method name="&lt;init&gt;" desc="()V" line="1335"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Vector;I)Ljavaslang/collection/Vector;" line="1338"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljavaslang/collection/Vector;ILjavaslang/Tuple2;)Ljava/lang/Iterable;" line="1341"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/Vector;)Ljavaslang/collection/Vector;" line="1342"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Tree$Order"><method name="values" desc="()[Ljavaslang/collection/Tree$Order;" line="995"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="valueOf" desc="(Ljava/lang/String;)Ljavaslang/collection/Tree$Order;" line="995"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/String;I)V" line="995"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="995"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="53"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashSet$SerializationProxy"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/HashArrayMappedTrie;)V" line="934"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeObject" desc="(Ljava/io/ObjectOutputStream;)V" line="945"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="961"><counter type="INSTRUCTION" missed="5" covered="28"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="985"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="71"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="19"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/ListModule$Combinations"><method name="apply" desc="(Ljavaslang/collection/List;I)Ljavaslang/collection/List;" line="1653"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljavaslang/collection/List;ILjavaslang/Tuple2;)Ljava/lang/Iterable;" line="1657"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/List;)Ljavaslang/collection/List;" line="1657"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/CharSeq$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/CharSeq;)V" line="485"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="490"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Character;" line="495"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/SortedSet"><method name="last" desc="()Ljava/lang/Object;" line="120"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$last$0" desc="()Ljava/util/NoSuchElementException;" line="120"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/IteratorModule$ConcatIterator"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;)V" line="1817"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1824"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1832"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator"><method name="concat" desc="([Ljava/lang/Iterable;)Ljavaslang/collection/Iterator;" line="74"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="concat" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Iterator;" line="90"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Iterator;" line="106"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="117"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="143"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Iterator;" line="174"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/util/Iterator;)Ljavaslang/collection/Iterator;" line="192"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/Iterator;" line="218"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/Iterator;" line="241"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/Iterator;" line="264"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/Iterator;" line="287"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/Iterator;" line="310"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/Iterator;" line="333"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/Iterator;" line="356"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/Iterator;" line="379"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Iterator;" line="406"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Iterator;" line="420"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/Iterator;" line="440"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/Iterator;" line="464"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/Iterator;" line="468"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/Iterator;" line="525"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/Iterator;" line="549"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/Iterator;" line="570"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/Iterator;" line="594"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/Iterator;" line="614"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/Iterator;" line="638"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/Iterator;" line="642"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/Iterator;" line="701"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/Iterator;" line="725"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/Iterator;" line="773"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/Iterator;" line="797"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="from" desc="(I)Ljavaslang/collection/Iterator;" line="837"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="from" desc="(J)Ljavaslang/collection/Iterator;" line="861"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gen" desc="(Ljava/util/function/Supplier;)Ljavaslang/collection/Iterator;" line="884"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gen" desc="(Ljava/lang/Object;Ljava/util/function/Function;)Ljavaslang/collection/Iterator;" line="908"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="repeat" desc="(Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="934"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="concat" desc="(Ljava/util/Iterator;)Ljavaslang/collection/Iterator;" line="951"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="968"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="1004"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Iterator;" line="1010"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="1032"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Iterator;" line="1056"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1079"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1091"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/Iterator;" line="1104"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/Iterator;" line="1109"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Iterator;" line="1118"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Iterator;" line="1128"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/Iterator;" line="1144"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/Iterator;" line="1173"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Iterator;" line="1202"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Iterator;" line="1208"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Iterator;" line="1246"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Iterator;" line="1278"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="findLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="1284"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Iterator;" line="1304"><counter type="INSTRUCTION" missed="2" covered="16"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="1333"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="1339"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="1344"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="1359"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="1364"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="1369"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="1377"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/Iterator;" line="1382"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="1391"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1396"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="1401"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="1406"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="1411"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Iterator;" line="1423"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="1445"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1450"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Iterator;" line="1463"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceLeft" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="1486"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceRight" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="1497"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="1508"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Iterator;" line="1537"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Iterator;" line="1564"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Traversable;" line="1571"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Iterator;" line="1576"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Iterator;" line="1608"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="1618"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="1623"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1656"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="1668"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1675"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Iterator;" line="1680"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="1690"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/Iterator;" line="1706"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/Iterator;" line="1730"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Iterator;" line="1760"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Iterator;" line="1766"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Iterator;" line="1802"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$reduceRight$11" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="1502"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$length$10" desc="(Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Integer;" line="1411"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$9" desc="(Ljava/lang/Object;Ljavaslang/collection/Stream;)Ljavaslang/Tuple2;" line="1353"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$8" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashMap;Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="1349"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$7" desc="(Ljava/lang/Object;Ljavaslang/collection/Stream;)Ljavaslang/collection/Stream;" line="1350"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$6" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="1096"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$5" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="1096"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$4" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="1096"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip$3" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="1084"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip$2" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="1084"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$rangeClosedBy$1" desc="(Ljava/lang/Integer;)Ljava/lang/Character;" line="638"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$rangeBy$0" desc="(Ljava/lang/Integer;)Ljava/lang/Character;" line="464"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="51"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="1334"/><counter type="BRANCH" missed="3" covered="141"/><counter type="LINE" missed="4" covered="299"/><counter type="COMPLEXITY" missed="3" covered="175"/><counter type="METHOD" missed="1" covered="105"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$LeafNode"><method name="&lt;init&gt;" desc="()V" line="213"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mergeLeaves" desc="(ILjavaslang/collection/HashArrayMappedTrieModule$LeafNode;Ljavaslang/collection/HashArrayMappedTrieModule$LeafSingleton;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="222"><counter type="INSTRUCTION" missed="0" covered="88"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="241"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="93"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Seq$1Util"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Seq;)V" line="321"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOfSlice" desc="(Ljavaslang/collection/Seq;Ljavaslang/collection/Seq;I)I" line="323"><counter type="INSTRUCTION" missed="2" covered="36"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="checkPrefix" desc="(Ljavaslang/collection/Seq;Ljavaslang/collection/Seq;)Z" line="334"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="67"/><counter type="BRANCH" missed="2" covered="18"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="2" covered="11"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$Zip"><method name="&lt;init&gt;" desc="()V" line="1140"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Tree$Node;Ljava/util/Iterator;)Ljavaslang/collection/Tree;" line="1144"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/util/Iterator;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Tree;" line="1150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$EmptyNode"><method name="&lt;init&gt;" desc="()V" line="158"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="instance" desc="()Ljavaslang/collection/HashArrayMappedTrieModule$EmptyNode;" line="163"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lookup" desc="(ILjava/lang/Object;)Ljavaslang/control/Option;" line="168"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modify" desc="(ILjava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/HashArrayMappedTrieModule$Action;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="173"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="178"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="183"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="188"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="193"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="203"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="156"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Traversable"><method name="hash" desc="(Ljava/lang/Iterable;)I" line="184"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="average" desc="()Ljavaslang/control/Option;" line="211"><counter type="INSTRUCTION" missed="0" covered="73"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsAll" desc="(Ljava/lang/Iterable;)Z" line="261"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="count" desc="(Ljava/util/function/Predicate;)I" line="273"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="existsUnique" desc="(Ljava/util/function/Predicate;)Z" line="356"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="findFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="391"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="findLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="410"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="442"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="467"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="565"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="584"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="last" desc="()Ljava/lang/Object;" line="610"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastOption" desc="()Ljavaslang/control/Option;" line="628"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="()Ljavaslang/control/Option;" line="661"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxBy" desc="(Ljava/util/Comparator;)Ljavaslang/control/Option;" line="677"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxBy" desc="(Ljava/util/function/Function;)Ljavaslang/control/Option;" line="695"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="()Ljavaslang/control/Option;" line="721"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minBy" desc="(Ljava/util/Comparator;)Ljavaslang/control/Option;" line="737"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minBy" desc="(Ljava/util/function/Function;)Ljavaslang/control/Option;" line="755"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mkString" desc="()Ljava/lang/String;" line="782"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mkString" desc="(Ljava/lang/CharSequence;)Ljava/lang/String;" line="794"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mkString" desc="(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;" line="808"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="product" desc="()Ljava/lang/Number;" line="845"><counter type="INSTRUCTION" missed="0" covered="73"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceLeft" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="875"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceRight" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="893"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="983"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sum" desc="()Ljava/lang/Number;" line="1046"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$product$8" desc="(JJ)J" line="858"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$product$7" desc="(DD)D" line="855"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$product$6" desc="(II)I" line="852"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minBy$5" desc="(Ljava/util/Comparator;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="741"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$min$4" desc="(Ljava/lang/Object;Ljava/lang/Object;)I" line="725"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxBy$3" desc="(Ljava/util/Comparator;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="681"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$max$2" desc="(Ljava/lang/Object;Ljava/lang/Object;)I" line="665"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$count$1" desc="(Ljava/util/function/Predicate;Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Integer;" line="274"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$containsAll$0" desc="(Ljava/lang/Object;)Z" line="262"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="676"/><counter type="BRANCH" missed="2" covered="114"/><counter type="LINE" missed="0" covered="153"/><counter type="COMPLEXITY" missed="2" covered="92"/><counter type="METHOD" missed="0" covered="36"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stream$2"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Stream;Ljava/util/function/Function;)V" line="753"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="761"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="next" desc="()Ljava/lang/Object;" line="769"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stream$1"><method name="&lt;init&gt;" desc="([Ljava/lang/Object;)V" line="221"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="226"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="next" desc="()Ljava/lang/Object;" line="231"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$Unzip"><method name="&lt;init&gt;" desc="()V" line="1114"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Tree$Node;Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1118"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply3" desc="(Ljavaslang/collection/Tree$Node;Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1129"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply3$6" desc="(Ljavaslang/Tuple3;)Ljavaslang/collection/Tree$Node;" line="1134"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply3$5" desc="(Ljavaslang/Tuple3;)Ljavaslang/collection/Tree$Node;" line="1133"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply3$4" desc="(Ljavaslang/Tuple3;)Ljavaslang/collection/Tree$Node;" line="1132"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply3$3" desc="(Ljava/util/function/Function;Ljavaslang/collection/Tree$Node;)Ljavaslang/Tuple3;" line="1131"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$2" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/Tree$Node;" line="1123"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/Tree$Node;" line="1122"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/util/function/Function;Ljavaslang/collection/Tree$Node;)Ljavaslang/Tuple2;" line="1121"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="106"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="1" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/StreamModule$StreamIterator"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Stream$Cons;)V" line="1668"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1674"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1679"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="(Ljavaslang/collection/Stream$Cons;)Ljavaslang/collection/Stream;" line="1669"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashSet"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/HashArrayMappedTrie;)V" line="39"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/HashSet;" line="46"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="57"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="75"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="90"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/HashSet;" line="109"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/HashSet;" line="123"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashSet;" line="136"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/HashSet;" line="152"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/HashSet;" line="163"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/HashSet;" line="174"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/HashSet;" line="185"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/HashSet;" line="196"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/HashSet;" line="207"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/HashSet;" line="218"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/HashSet;" line="229"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/HashSet;" line="250"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/HashSet;" line="254"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/HashSet;" line="280"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/HashSet;" line="284"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/HashSet;" line="288"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/HashSet;" line="308"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/HashSet;" line="334"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/HashSet;" line="354"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/HashSet;" line="358"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/HashSet;" line="384"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/HashSet;" line="388"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/HashSet;" line="392"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/HashSet;" line="412"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/HashSet;" line="438"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="443"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashSet;" line="448"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/HashSet;" line="459"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/Object;)Z" line="464"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diff" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/HashSet;" line="469"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/HashSet;" line="479"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/HashSet;" line="484"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/HashSet;" line="490"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/HashSet;" line="496"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/HashSet;" line="505"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashSet;" line="510"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashSet;" line="516"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashSet;" line="523"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashSet;" line="530"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/HashSet;" line="536"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="548"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="553"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="562"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="567"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="572"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="580"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/HashSet;" line="585"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="590"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersect" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/HashSet;" line="595"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="605"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="610"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="615"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="620"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/HashSet;" line="625"><counter type="INSTRUCTION" missed="2" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="639"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mkString" desc="(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;" line="644"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="649"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/HashSet;" line="656"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="665"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashSet;" line="671"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="681"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="690"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashSet;" line="695"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/HashSet;" line="708"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/HashSet;" line="713"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/HashSet;" line="722"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="728"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="733"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="738"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/HashSet;" line="745"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="753"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/HashSet;" line="762"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/HashSet;" line="770"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashSet;" line="775"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashSet;" line="781"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="union" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/HashSet;" line="789"><counter type="INSTRUCTION" missed="5" covered="34"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="9"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashSet;" line="810"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="816"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="824"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashSet;" line="831"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/HashSet;" line="837"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/HashSet;" line="843"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="850"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="856"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="868"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="873"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addAll" desc="(Ljavaslang/collection/HashArrayMappedTrie;Ljava/lang/Iterable;)Ljavaslang/collection/HashArrayMappedTrie;" line="878"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeReplace" desc="()Ljava/lang/Object;" line="896"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="908"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$take$9" desc="(I)Ljava/util/Iterator;" line="765"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanLeft$8" desc="(Ljava/util/ArrayList;Ljava/lang/Object;)Ljava/util/ArrayList;" line="715"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$7" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashArrayMappedTrie;Ljava/lang/Object;)Ljavaslang/collection/HashArrayMappedTrie;" line="630"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$iterator$6" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="615"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$5" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashMap;Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="554"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$4" desc="(Ljava/lang/Object;Ljavaslang/collection/HashSet;)Ljavaslang/collection/HashSet;" line="555"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldRight$3" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="548"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$2" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashArrayMappedTrie;Ljava/lang/Object;)Ljavaslang/collection/HashArrayMappedTrie;" line="541"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$collector$1" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="60"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="(Ljavaslang/collection/HashArrayMappedTrie;)Ljava/lang/Integer;" line="41"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="34"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="43" covered="1035"/><counter type="BRANCH" missed="7" covered="67"/><counter type="LINE" missed="11" covered="207"/><counter type="COMPLEXITY" missed="10" covered="132"/><counter type="METHOD" missed="4" covered="101"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Tree$Node"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljavaslang/collection/List;)V" line="716"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getChildren" desc="()Ljavaslang/collection/List;" line="726"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getValue" desc="()Ljava/lang/Object;" line="731"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="736"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLeaf" desc="()Z" line="741"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="746"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="751"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="764"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="769"><counter type="INSTRUCTION" missed="12" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="draw" desc="()Ljava/lang/String;" line="774"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drawAux" desc="(Ljava/lang/String;Ljava/lang/StringBuilder;)V" line="780"><counter type="INSTRUCTION" missed="0" covered="49"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLispString" desc="(Ljavaslang/collection/Tree;)Ljava/lang/String;" line="791"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeReplace" desc="()Ljava/lang/Object;" line="810"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="822"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$1" desc="(Ljavaslang/collection/List;)Ljava/lang/Integer;" line="720"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljava/lang/Integer;Ljavaslang/collection/Tree$Node;)Ljava/lang/Integer;" line="720"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="208"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="38"/><counter type="COMPLEXITY" missed="1" covered="24"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$IndexedNode"><method name="&lt;init&gt;" desc="(IILjavaslang/collection/List;)V" line="466"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lookup" desc="(ILjava/lang/Object;)Ljavaslang/control/Option;" line="474"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modify" desc="(ILjava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/HashArrayMappedTrieModule$Action;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="482"><counter type="INSTRUCTION" missed="0" covered="181"/><counter type="BRANCH" missed="0" covered="32"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="17"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="518"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expand" desc="(ILjavaslang/collection/HashArrayMappedTrieModule$AbstractNode;ILjavaslang/collection/List;)Ljavaslang/collection/HashArrayMappedTrieModule$ArrayNode;" line="522"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="544"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="549"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="554"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="295"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="52"/><counter type="COMPLEXITY" missed="0" covered="28"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/LinearSeqModule$LastIndexOfSlice"><method name="lastIndexOfSlice" desc="(Ljavaslang/collection/LinearSeq;Ljavaslang/collection/LinearSeq;I)I" line="300"><counter type="INSTRUCTION" missed="0" covered="79"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="findSlice" desc="(Ljavaslang/collection/LinearSeq;Ljavaslang/collection/LinearSeq;)Ljavaslang/Tuple2;" line="329"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="102"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$Map"><method name="&lt;init&gt;" desc="()V" line="1043"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Tree$Node;Ljava/util/function/Function;)Ljavaslang/collection/Tree$Node;" line="1046"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/util/function/Function;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Tree$Node;" line="1047"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="21"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/CharSeq"><method name="&lt;init&gt;" desc="(Ljava/lang/String;)V" line="40"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/CharSeq;" line="45"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="55"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/CharSequence;)Ljavaslang/collection/CharSeq;" line="73"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(C)Ljavaslang/collection/CharSeq;" line="88"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([C)Ljavaslang/collection/CharSeq;" line="99"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/CharSeq;" line="120"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/CharSeq;" line="138"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/CharSeq;" line="155"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/CharSeq;" line="174"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/CharSeq;" line="178"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/CharSeq;" line="197"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/CharSeq;" line="221"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitByBuilder" desc="(Ljava/lang/StringBuilder;)Ljavaslang/Tuple2;" line="225"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="repeat" desc="(CI)Ljavaslang/collection/CharSeq;" line="242"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="repeat" desc="(I)Ljavaslang/collection/CharSeq;" line="257"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="append" desc="(Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="272"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/CharSeq;" line="277"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/CharSeq;" line="287"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="()Ljavaslang/collection/IndexedSeq;" line="292"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="(I)Ljavaslang/collection/IndexedSeq;" line="297"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="()Ljavaslang/collection/IndexedSeq;" line="302"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(I)Ljavaslang/collection/IndexedSeq;" line="307"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/IndexedSeq;" line="312"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/CharSeq;" line="319"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/CharSeq;" line="324"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/CharSeq;" line="331"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/CharSeq;" line="338"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/CharSeq;" line="349"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="360"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="366"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="376"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="389"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/IndexedSeq;" line="395"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMapChars" desc="(Ljavaslang/collection/CharSeq$CharFunction;)Ljavaslang/collection/CharSeq;" line="410"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="422"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="428"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="433"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/CharSeq;" line="438"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="447"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(ILjava/lang/Character;)Ljavaslang/collection/CharSeq;" line="456"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insertAll" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/CharSeq;" line="467"><counter type="INSTRUCTION" missed="0" covered="77"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="485"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="502"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/IndexedSeq;" line="514"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="padTo" desc="(ILjava/lang/Character;)Ljavaslang/collection/CharSeq;" line="524"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="patch" desc="(ILjava/lang/Iterable;I)Ljavaslang/collection/CharSeq;" line="537"><counter type="INSTRUCTION" missed="0" covered="69"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapChars" desc="(Ljavaslang/collection/CharSeq$CharUnaryOperator;)Ljavaslang/collection/CharSeq;" line="551"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="565"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="570"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/CharSeq;" line="591"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="permutations" desc="()Ljavaslang/collection/IndexedSeq;" line="600"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prepend" desc="(Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="619"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prependAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/CharSeq;" line="624"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="635"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="650"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="669"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAt" desc="(I)Ljavaslang/collection/CharSeq;" line="680"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="686"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/CharSeq;" line="698"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Character;Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="715"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Character;Ljava/lang/Character;)Ljavaslang/collection/CharSeq;" line="731"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/CharSeq;" line="747"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverse" desc="()Ljavaslang/collection/CharSeq;" line="764"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Character;Ljava/util/function/BiFunction;)Ljavaslang/collection/IndexedSeq;" line="769"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/IndexedSeq;" line="774"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/IndexedSeq;" line="780"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="slice" desc="(II)Ljavaslang/collection/CharSeq;" line="786"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="799"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="804"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="()Ljavaslang/collection/CharSeq;" line="809"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="(Ljava/util/Comparator;)Ljavaslang/collection/CharSeq;" line="814"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/CharSeq;" line="820"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/CharSeq;" line="825"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="833"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="848"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(I)Ljavaslang/collection/CharSeq;" line="853"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/CharSeq;" line="867"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="876"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/CharSeq;" line="885"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/CharSeq;" line="896"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="907"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/CharSeq;" line="913"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/IndexedSeq;" line="927"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="933"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="947"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="(ILjava/lang/Character;)Ljavaslang/collection/CharSeq;" line="962"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/IndexedSeq;" line="973"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Character;Ljava/lang/Object;)Ljavaslang/collection/IndexedSeq;" line="985"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/IndexedSeq;" line="999"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(I)Ljava/lang/Character;" line="1008"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Character;I)I" line="1013"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Character;I)I" line="1018"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(I)Ljavaslang/Tuple2;" line="1023"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1034"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAtInclusive" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1052"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljava/lang/Iterable;I)Z" line="1069"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Character;" line="1074"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="1083"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1092"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="1097"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1101"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1106"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1117"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="charAt" desc="(I)C" line="1146"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="1159"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="codePointAt" desc="(I)I" line="1190"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="codePointBefore" desc="(I)I" line="1215"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="codePointCount" desc="(II)I" line="1239"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="offsetByCodePoints" desc="(II)I" line="1262"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getChars" desc="(II[CI)V" line="1296"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getBytes" desc="(Ljava/lang/String;)[B" line="1314"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getBytes" desc="(Ljava/nio/charset/Charset;)[B" line="1332"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getBytes" desc="()[B" line="1347"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contentEquals" desc="(Ljava/lang/StringBuffer;)Z" line="1362"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contentEquals" desc="(Ljava/lang/CharSequence;)Z" line="1378"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equalsIgnoreCase" desc="(Ljavaslang/collection/CharSeq;)Z" line="1407"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/collection/CharSeq;)I" line="1452"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareToIgnoreCase" desc="(Ljavaslang/collection/CharSeq;)I" line="1474"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="regionMatches" desc="(ILjavaslang/collection/CharSeq;II)Z" line="1510"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="regionMatches" desc="(ZILjavaslang/collection/CharSeq;II)Z" line="1564"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(II)Ljavaslang/collection/CharSeq;" line="1569"><counter type="INSTRUCTION" missed="0" covered="74"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljavaslang/collection/CharSeq;I)Z" line="1604"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljavaslang/collection/CharSeq;)Z" line="1620"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="endsWith" desc="(Ljavaslang/collection/CharSeq;)Z" line="1635"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(I)I" line="1663"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(II)I" line="1706"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(I)I" line="1733"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(II)I" line="1771"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljavaslang/collection/CharSeq;)I" line="1789"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljavaslang/collection/CharSeq;I)I" line="1809"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljavaslang/collection/CharSeq;)I" line="1828"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljavaslang/collection/CharSeq;I)I" line="1848"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="substring" desc="(I)Ljavaslang/collection/CharSeq;" line="1869"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="substring" desc="(II)Ljavaslang/collection/CharSeq;" line="1895"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1900"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1912"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="concat" desc="(Ljavaslang/collection/CharSeq;)Ljavaslang/collection/CharSeq;" line="1936"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matches" desc="(Ljava/lang/String;)Z" line="1959"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/CharSequence;)Z" line="1970"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceFirst" desc="(Ljava/lang/String;Ljava/lang/String;)Ljavaslang/collection/CharSeq;" line="2006"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/String;Ljava/lang/String;)Ljavaslang/collection/CharSeq;" line="2042"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljavaslang/collection/CharSeq;" line="2057"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="split" desc="(Ljava/lang/String;I)[Ljavaslang/collection/CharSeq;" line="2136"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="split" desc="(Ljava/lang/String;)[Ljavaslang/collection/CharSeq;" line="2174"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLowerCase" desc="(Ljava/util/Locale;)Ljavaslang/collection/CharSeq;" line="2229"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLowerCase" desc="()Ljavaslang/collection/CharSeq;" line="2253"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toUpperCase" desc="(Ljava/util/Locale;)Ljavaslang/collection/CharSeq;" line="2305"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toUpperCase" desc="()Ljavaslang/collection/CharSeq;" line="2329"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trim" desc="()Ljavaslang/collection/CharSeq;" line="2364"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toCharArray" desc="()[C" line="2375"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sortBy$7" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/lang/Character;Ljava/lang/Character;)I" line="827"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$6" desc="(Ljava/lang/Object;Ljavaslang/collection/Iterator;)Ljavaslang/Tuple2;" line="423"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMapChars$5" desc="(Ljava/lang/StringBuilder;Ljavaslang/collection/CharSeq$CharFunction;I)V" line="415"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$distinctBy$4" desc="(Ljava/util/Set;Ljava/util/function/Function;Ljava/lang/Character;)Z" line="333"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$crossProduct$3" desc="(Ljavaslang/collection/IndexedSeq;Ljava/lang/Character;)Ljava/lang/Iterable;" line="314"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljava/lang/Character;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="314"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fill$1" desc="(Ljava/util/function/Supplier;Ljava/lang/Integer;)Ljava/lang/Character;" line="155"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="58"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="36"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="2704"/><counter type="BRANCH" missed="0" covered="290"/><counter type="LINE" missed="1" covered="499"/><counter type="COMPLEXITY" missed="1" covered="304"/><counter type="METHOD" missed="1" covered="159"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/ArrayModule$Combinations"><method name="&lt;init&gt;" desc="()V" line="1329"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Array;I)Ljavaslang/collection/Array;" line="1332"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljavaslang/collection/Array;ILjavaslang/Tuple2;)Ljava/lang/Iterable;" line="1336"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$0" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/Array;)Ljavaslang/collection/Array;" line="1336"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Tree$Empty"><method name="&lt;init&gt;" desc="()V" line="906"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="instance" desc="()Ljavaslang/collection/Tree$Empty;" line="911"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getChildren" desc="()Ljavaslang/collection/List;" line="916"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getValue" desc="()Ljava/lang/Object;" line="921"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="926"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLeaf" desc="()Z" line="931"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="936"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="941"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="946"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="951"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="draw" desc="()Ljava/lang/String;" line="955"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="966"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="903"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="14"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/StreamModule$AppendSelf"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Stream$Cons;Ljava/util/function/Function;)V" line="1613"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljavaslang/collection/Stream$Cons;Ljava/util/function/Function;)Ljavaslang/collection/Stream$Cons;" line="1618"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stream" desc="()Ljavaslang/collection/Stream$Cons;" line="1625"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$appendAll$0" desc="(Ljavaslang/collection/Stream$Cons;Ljava/util/function/Function;)Ljavaslang/collection/Stream;" line="1619"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/IndexedSeq"><method name="endsWith" desc="(Ljavaslang/collection/Seq;)Z" line="83"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexWhere" desc="(Ljava/util/function/Predicate;I)I" line="118"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="last" desc="()Ljava/lang/Object;" line="144"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOfSlice" desc="(Ljava/lang/Iterable;I)I" line="153"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexWhere" desc="(Ljava/util/function/Predicate;I)I" line="158"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverseIterator" desc="()Ljavaslang/collection/Iterator;" line="225"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="segmentLength" desc="(Ljava/util/function/Predicate;I)I" line="251"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljava/lang/Iterable;I)Z" line="286"><counter type="INSTRUCTION" missed="0" covered="80"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="221"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="53"/><counter type="COMPLEXITY" missed="0" covered="28"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Seq"><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Seq;" line="113"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="131"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsSlice" desc="(Ljava/lang/Iterable;)Z" line="191"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="endsWith" desc="(Ljavaslang/collection/Seq;)Z" line="253"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Object;)I" line="280"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOfSlice" desc="(Ljava/lang/Iterable;)I" line="304"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOfSlice" desc="(Ljava/lang/Iterable;I)I" line="320"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexWhere" desc="(Ljava/util/function/Predicate;)I" line="354"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="(I)Ljavaslang/collection/Iterator;" line="405"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Object;)I" line="415"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexWhere" desc="(Ljava/util/function/Predicate;)I" line="426"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOfSlice" desc="(Ljava/lang/Iterable;)I" line="461"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prefixLength" desc="(Ljava/util/function/Predicate;)I" line="529"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljava/lang/Iterable;)Z" line="722"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljava/lang/Iterable;I)Z" line="735"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="809"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="863"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldRight$0" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="864"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="199"/><counter type="BRANCH" missed="1" covered="21"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/IndexedSeq$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/IndexedSeq;)V" line="225"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="230"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="235"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Comparators"><method name="&lt;init&gt;" desc="()V" line="16"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="naturalComparator" desc="()Ljavaslang/collection/Comparators$SerializableComparator;" line="30"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$naturalComparator$7c28a3e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)I" line="30"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="7"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/RedBlackTree$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/RedBlackTree;Ljavaslang/collection/RedBlackTreeModule$Node;)V" line="290"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="296"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="301"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pushLeftChildren" desc="(Ljavaslang/collection/Stack;Ljavaslang/collection/RedBlackTreeModule$Node;)Ljavaslang/collection/Stack;" line="308"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="75"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Set"><method name="apply" desc="(Ljava/lang/Object;)Ljava/lang/Boolean;" line="60"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="108"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="222"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="13" covered="8"/><counter type="LINE" missed="3" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="2" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$LeafList"><method name="&lt;init&gt;" desc="(ILjava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/HashArrayMappedTrieModule$LeafNode;)V" line="334"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lookup" desc="(ILjava/lang/Object;)Ljavaslang/control/Option;" line="345"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modify" desc="(ILjava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/HashArrayMappedTrieModule$Action;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="353"><counter type="INSTRUCTION" missed="2" covered="38"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mergeNodes" desc="(Ljavaslang/collection/HashArrayMappedTrieModule$LeafNode;Ljavaslang/collection/HashArrayMappedTrieModule$LeafNode;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="366"><counter type="INSTRUCTION" missed="0" covered="68"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeElement" desc="(Ljava/lang/Object;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="386"><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="405"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="410"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="415"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hash" desc="()I" line="438"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="key" desc="()Ljava/lang/Object;" line="443"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="value" desc="()Ljava/lang/Object;" line="448"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lookup$1" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="348"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lookup$0" desc="(Ljava/lang/Object;Ljavaslang/Tuple2;)Z" line="348"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="247"/><counter type="BRANCH" missed="1" covered="25"/><counter type="LINE" missed="0" covered="48"/><counter type="COMPLEXITY" missed="1" covered="25"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$ZipAll"><method name="&lt;init&gt;" desc="()V" line="1157"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Tree$Node;Ljava/util/Iterator;Ljava/lang/Object;)Ljavaslang/collection/Tree;" line="1161"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljava/util/Iterator;Ljava/lang/Object;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Tree;" line="1167"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="1162"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="39"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Array"><method name="&lt;init&gt;" desc="([Ljava/lang/Object;)V" line="33"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrap" desc="([Ljava/lang/Object;)Ljavaslang/collection/Array;" line="41"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="56"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Array;" line="68"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Array;" line="79"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Array;" line="93"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="110"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/Array;" line="125"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/Array;" line="136"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/Array;" line="147"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/Array;" line="158"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/Array;" line="169"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/Array;" line="180"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/Array;" line="191"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/Array;" line="202"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Array;" line="217"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Array;" line="231"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/Array;" line="237"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/Array;" line="241"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/Array;" line="245"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/Array;" line="265"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/Array;" line="291"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/Array;" line="311"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/Array;" line="337"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/Array;" line="341"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/Array;" line="345"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/Array;" line="349"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/Array;" line="369"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/Array;" line="395"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/Array;" line="415"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/Array;" line="441"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="append" desc="(Ljava/lang/Object;)Ljavaslang/collection/Array;" line="446"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="453"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="466"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="471"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="477"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/Array;" line="494"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="()Ljavaslang/collection/Array;" line="499"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="(I)Ljavaslang/collection/Array;" line="504"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="()Ljavaslang/collection/Array;" line="509"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(I)Ljavaslang/collection/Array;" line="514"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="519"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(I)Ljava/lang/Object;" line="527"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/Array;" line="535"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Array;" line="540"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Array;" line="547"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/Array;" line="554"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/Array;" line="567"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="578"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="584"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="595"><counter type="INSTRUCTION" missed="2" covered="41"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="611"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Array;" line="617"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="633"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="642"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="648"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="656"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Object;I)I" line="661"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/Array;" line="671"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="681"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="690"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="694"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(ILjava/lang/Object;)Ljavaslang/collection/Array;" line="703"><counter type="INSTRUCTION" missed="0" covered="71"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insertAll" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/Array;" line="718"><counter type="INSTRUCTION" missed="0" covered="84"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Object;)Ljavaslang/collection/Array;" line="738"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Object;I)I" line="754"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="764"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Array;" line="769"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="779"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="padTo" desc="(ILjava/lang/Object;)Ljavaslang/collection/Array;" line="784"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="patch" desc="(ILjava/lang/Iterable;I)Ljavaslang/collection/Array;" line="793"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="803"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Array;" line="813"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="permutations" desc="()Ljavaslang/collection/Array;" line="822"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prepend" desc="(Ljava/lang/Object;)Ljavaslang/collection/Array;" line="840"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prependAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="845"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/Array;" line="850"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="867"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="885"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAt" desc="(I)Ljavaslang/collection/Array;" line="903"><counter type="INSTRUCTION" missed="0" covered="64"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Object;)Ljavaslang/collection/Array;" line="917"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="933"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Array;" line="953"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Array;" line="973"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="989"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverse" desc="()Ljavaslang/collection/Array;" line="1010"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Array;" line="1019"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Array;" line="1024"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Array;" line="1034"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="slice" desc="(II)Ljavaslang/collection/Array;" line="1040"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="1055"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="1060"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="()Ljavaslang/collection/Array;" line="1065"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Array;" line="1073"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Array;" line="1080"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/Array;" line="1085"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(I)Ljavaslang/Tuple2;" line="1093"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1098"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAtInclusive" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1105"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="1121"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1126"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(I)Ljavaslang/collection/Array;" line="1132"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(II)Ljavaslang/collection/Array;" line="1143"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Array;" line="1157"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="1167"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/Array;" line="1172"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/Array;" line="1183"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="1196"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Array;" line="1202"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="1214"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1220"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1237"><counter type="INSTRUCTION" missed="0" covered="66"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="(ILjava/lang/Object;)Ljavaslang/collection/Array;" line="1256"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Array;" line="1269"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Array;" line="1275"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Array;" line="1281"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1286"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1299"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1304"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1309"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="create" desc="(Ljava/lang/Iterable;)[Ljava/lang/Object;" line="1313"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sortBy$14" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)I" line="1087"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sort$13" desc="(Ljava/util/Comparator;Ljava/lang/Object;Ljava/lang/Object;)I" line="1074"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanRight$12" desc="(Ljavaslang/collection/List;)Ljavaslang/collection/Array;" line="1035"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanLeft$11" desc="(Ljava/util/ArrayList;)Ljavaslang/collection/Array;" line="1029"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanLeft$10" desc="(Ljava/util/ArrayList;Ljava/lang/Object;)Ljava/util/ArrayList;" line="1027"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$permutations$9" desc="(Ljavaslang/collection/Array;Ljava/lang/Object;)Ljavaslang/collection/Array;" line="831"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$8" desc="(Ljava/lang/Object;Ljavaslang/collection/Array;)Ljavaslang/collection/Array;" line="831"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$padTo$7" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="787"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$6" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashMap;Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="634"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$5" desc="(Ljava/lang/Object;Ljavaslang/collection/Array;)Ljavaslang/collection/Array;" line="635"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$distinctBy$4" desc="(Ljava/util/Set;Ljava/util/function/Function;Ljava/lang/Object;)Z" line="549"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$crossProduct$3" desc="(Ljavaslang/collection/Array;Ljava/lang/Object;)Ljava/lang/Iterable;" line="521"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="521"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$1" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="59"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="()Ljava/lang/Integer;" line="33"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="30"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="2298"/><counter type="BRANCH" missed="1" covered="213"/><counter type="LINE" missed="0" covered="454"/><counter type="COMPLEXITY" missed="1" covered="243"/><counter type="METHOD" missed="0" covered="137"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Stream$Empty"><method name="&lt;init&gt;" desc="()V" line="1348"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="instance" desc="()Ljavaslang/collection/Stream$Empty;" line="1359"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="1364"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1369"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="1374"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Stream;" line="1379"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1384"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1389"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1394"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1404"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="1345"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="11"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/List$Nil"><method name="&lt;init&gt;" desc="()V" line="1404"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="instance" desc="()Ljavaslang/collection/List$Nil;" line="1415"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="1420"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="1425"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/List;" line="1430"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1435"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1440"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1445"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1450"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1460"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="1401"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="11"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Tree$1"><method name="&lt;clinit&gt;" desc="()V" line="253"><counter type="INSTRUCTION" missed="4" covered="29"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="29"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Collections$1"><method name="&lt;init&gt;" desc="(ILjava/util/function/Function;)V" line="111"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="117"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="122"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeSet"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/RedBlackTree;)V" line="38"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="50"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/TreeSet;" line="61"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="(Ljava/util/Comparator;)Ljavaslang/collection/TreeSet;" line="65"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Comparable;)Ljavaslang/collection/TreeSet;" line="70"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="of" desc="(Ljava/util/Comparator;Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="74"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Comparable;)Ljavaslang/collection/TreeSet;" line="81"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/util/Comparator;[Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="88"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(Ljava/util/Comparator;ILjava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="105"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="122"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="fill" desc="(Ljava/util/Comparator;ILjava/util/function/Supplier;)Ljavaslang/collection/TreeSet;" line="137"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/TreeSet;" line="153"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="158"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/util/Comparator;Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="164"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/TreeSet;" line="178"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/TreeSet;" line="189"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/TreeSet;" line="200"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/TreeSet;" line="211"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/TreeSet;" line="222"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/TreeSet;" line="233"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/TreeSet;" line="244"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/TreeSet;" line="255"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/TreeSet;" line="276"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/TreeSet;" line="280"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/TreeSet;" line="306"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/TreeSet;" line="310"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/TreeSet;" line="314"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/TreeSet;" line="334"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/TreeSet;" line="360"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/TreeSet;" line="380"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/TreeSet;" line="384"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/TreeSet;" line="410"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/TreeSet;" line="414"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/TreeSet;" line="418"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/TreeSet;" line="438"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/TreeSet;" line="464"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="469"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="474"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/TreeSet;" line="488"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="()Ljava/util/Comparator;" line="493"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diff" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/TreeSet;" line="499"><counter type="INSTRUCTION" missed="4" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/Object;)Z" line="510"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/TreeSet;" line="515"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/TreeSet;" line="520"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="526"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/TreeSet;" line="532"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/TreeSet;" line="543"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeSet;" line="554"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeSet;" line="560"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeSet;" line="567"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeSet;" line="574"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="581"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="587"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="592"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="598"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="605"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="610"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="615"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="624"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/TreeSet;" line="629"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="638"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersect" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/TreeSet;" line="644"><counter type="INSTRUCTION" missed="4" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="655"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="660"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="665"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="670"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="675"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/TreeSet;" line="681"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="686"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="()Ljavaslang/control/Option;" line="691"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="()Ljavaslang/control/Option;" line="696"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="701"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/TreeSet;" line="708"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="717"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="722"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="741"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="751"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="756"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/TreeSet;" line="768"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Set;" line="774"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Set;" line="788"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="802"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="807"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="812"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/TreeSet;" line="819"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="828"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/TreeSet;" line="833"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/TreeSet;" line="844"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeSet;" line="855"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/TreeSet;" line="862"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="union" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/TreeSet;" line="870"><counter type="INSTRUCTION" missed="4" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="881"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="887"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="895"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/TreeSet;" line="904"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="911"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/TreeSet;" line="918"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="927"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="939"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="944"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="949"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$zipWithIndex$17" desc="(Ljava/util/Comparator;Ljavaslang/Tuple2;Ljavaslang/Tuple2;)I" line="919"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$16" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="899"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$15" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="898"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip3$14" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="897"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip$13" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="889"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unzip$12" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="888"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$span$11" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="814"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$span$10" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="813"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sliding$9" desc="(Ljavaslang/collection/Seq;)Ljavaslang/collection/TreeSet;" line="807"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanRight$8" desc="(Ljava/util/ArrayList;Ljava/lang/Object;)Ljava/util/ArrayList;" line="794"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanLeft$7" desc="(Ljava/util/ArrayList;Ljava/lang/Object;)Ljava/util/ArrayList;" line="780"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$partition$6" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="703"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$partition$5" desc="(Ljavaslang/collection/Iterator;)Ljavaslang/collection/TreeSet;" line="702"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$4" desc="(Ljava/lang/Object;Ljavaslang/collection/Iterator;)Ljavaslang/Tuple2;" line="600"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fill$3" desc="(Ljava/util/Comparator;[Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="139"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$tabulate$2" desc="(Ljava/util/Comparator;[Ljava/lang/Object;)Ljavaslang/collection/TreeSet;" line="107"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$1" desc="(Ljava/util/ArrayList;)Ljavaslang/collection/TreeSet;" line="56"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="53"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="60" covered="1207"/><counter type="BRANCH" missed="4" covered="70"/><counter type="LINE" missed="12" covered="232"/><counter type="COMPLEXITY" missed="10" covered="146"/><counter type="METHOD" missed="6" covered="113"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Vector"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/HashArrayMappedTrie;)V" line="37"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(ILjavaslang/collection/HashArrayMappedTrie;)V" line="34"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Vector;" line="53"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="64"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="82"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="95"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Vector;" line="114"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Vector;" line="128"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="145"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/Vector;" line="164"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/Vector;" line="175"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/Vector;" line="186"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/Vector;" line="197"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/Vector;" line="208"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/Vector;" line="219"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/Vector;" line="230"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/Vector;" line="241"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/Vector;" line="246"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/Vector;" line="250"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/Vector;" line="254"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/Vector;" line="274"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/Vector;" line="300"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/Vector;" line="320"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/Vector;" line="346"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/Vector;" line="350"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/Vector;" line="354"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/Vector;" line="358"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/Vector;" line="378"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/Vector;" line="404"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/Vector;" line="424"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/Vector;" line="450"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="append" desc="(Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="455"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="460"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/Vector;" line="469"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="()Ljavaslang/collection/Vector;" line="474"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="(I)Ljavaslang/collection/Vector;" line="479"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="()Ljavaslang/collection/Vector;" line="484"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(I)Ljavaslang/collection/Vector;" line="489"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="494"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/Vector;" line="501"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Vector;" line="506"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Vector;" line="513"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/Vector;" line="520"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/Vector;" line="535"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="550"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="556"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="567"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="583"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Vector;" line="589"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(I)Ljava/lang/Object;" line="605"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="613"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="622"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="631"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="637"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="642"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Object;I)I" line="647"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/Vector;" line="657"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="665"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(ILjava/lang/Object;)Ljavaslang/collection/Vector;" line="674"><counter type="INSTRUCTION" missed="0" covered="75"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insertAll" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/Vector;" line="694"><counter type="INSTRUCTION" missed="0" covered="85"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="716"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="728"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="733"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="738"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Object;I)I" line="756"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="766"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Vector;" line="771"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="781"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="padTo" desc="(ILjava/lang/Object;)Ljavaslang/collection/Vector;" line="786"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="patch" desc="(ILjava/lang/Iterable;I)Ljavaslang/collection/Vector;" line="795"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="805"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Vector;" line="816"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="permutations" desc="()Ljavaslang/collection/Vector;" line="825"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prepend" desc="(Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="843"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prependAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="849"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="861"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="880"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="900"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAt" desc="(I)Ljavaslang/collection/Vector;" line="911"><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="928"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="941"><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="961"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="981"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="998"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverse" desc="()Ljavaslang/collection/Vector;" line="1012"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Vector;" line="1021"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Vector;" line="1026"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Vector;" line="1032"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="slice" desc="(II)Ljavaslang/collection/Vector;" line="1038"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="1055"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="1060"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="()Ljavaslang/collection/Vector;" line="1065"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Vector;" line="1070"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Vector;" line="1076"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/Vector;" line="1081"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1089"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(I)Ljavaslang/Tuple2;" line="1095"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1100"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAtInclusive" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1107"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="1124"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(I)Ljavaslang/collection/Vector;" line="1129"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(II)Ljavaslang/collection/Vector;" line="1140"><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Vector;" line="1156"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="1169"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/Vector;" line="1178"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/Vector;" line="1193"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="1208"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Vector;" line="1214"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="1228"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1234"><counter type="INSTRUCTION" missed="0" covered="49"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1247"><counter type="INSTRUCTION" missed="0" covered="63"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="(ILjava/lang/Object;)Ljavaslang/collection/Vector;" line="1262"><counter type="INSTRUCTION" missed="0" covered="49"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Vector;" line="1273"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="1279"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Vector;" line="1285"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1289"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1294"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1315"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1320"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1325"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrap" desc="(Ljavaslang/collection/HashArrayMappedTrie;)Ljavaslang/collection/Vector;" line="1329"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sortBy$9" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)I" line="1083"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$permutations$8" desc="(Ljavaslang/collection/Vector;Ljava/lang/Object;)Ljavaslang/collection/Vector;" line="834"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$7" desc="(Ljava/lang/Object;Ljavaslang/collection/Vector;)Ljavaslang/collection/Vector;" line="834"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$padTo$6" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="789"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$5" desc="(Ljava/lang/Object;Ljavaslang/collection/Iterator;)Ljavaslang/Tuple2;" line="632"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$distinctBy$4" desc="(Ljava/util/Set;Ljava/util/function/Function;Ljava/lang/Object;)Z" line="515"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$crossProduct$3" desc="(Ljavaslang/collection/Vector;Ljava/lang/Object;)Ljava/lang/Iterable;" line="496"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="496"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$1" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="67"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="()Ljava/lang/Integer;" line="34"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="30"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="2435"/><counter type="BRANCH" missed="0" covered="254"/><counter type="LINE" missed="0" covered="459"/><counter type="COMPLEXITY" missed="0" covered="259"/><counter type="METHOD" missed="0" covered="132"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/AbstractIterator"><method name="&lt;init&gt;" desc="()V" line="20"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="24"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="next" desc="()Ljava/lang/Object;" line="31"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/LinkedHashSet"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/LinkedHashMap;)V" line="37"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/LinkedHashSet;" line="43"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="54"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="72"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="87"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/LinkedHashSet;" line="106"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/LinkedHashSet;" line="120"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashSet;" line="133"><counter type="INSTRUCTION" missed="3" covered="21"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/LinkedHashSet;" line="149"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/LinkedHashSet;" line="160"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/LinkedHashSet;" line="171"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/LinkedHashSet;" line="182"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/LinkedHashSet;" line="193"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/LinkedHashSet;" line="204"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/LinkedHashSet;" line="215"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/LinkedHashSet;" line="226"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/LinkedHashSet;" line="247"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/LinkedHashSet;" line="251"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/LinkedHashSet;" line="277"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/LinkedHashSet;" line="281"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/LinkedHashSet;" line="285"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/LinkedHashSet;" line="305"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/LinkedHashSet;" line="331"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/LinkedHashSet;" line="351"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/LinkedHashSet;" line="355"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/LinkedHashSet;" line="381"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/LinkedHashSet;" line="385"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/LinkedHashSet;" line="389"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/LinkedHashSet;" line="409"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/LinkedHashSet;" line="435"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="440"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashSet;" line="445"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/LinkedHashSet;" line="456"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/Object;)Z" line="461"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diff" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/LinkedHashSet;" line="466"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/LinkedHashSet;" line="476"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/LinkedHashSet;" line="481"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashSet;" line="487"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/LinkedHashSet;" line="493"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/LinkedHashSet;" line="502"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashSet;" line="511"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashSet;" line="517"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashSet;" line="524"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashSet;" line="531"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashSet;" line="537"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="549"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="555"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="564"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="569"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="574"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="582"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/LinkedHashSet;" line="587"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="596"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersect" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/LinkedHashSet;" line="605"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="615"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="620"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="625"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="630"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/LinkedHashSet;" line="635"><counter type="INSTRUCTION" missed="2" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="649"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mkString" desc="(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;" line="654"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="659"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/LinkedHashSet;" line="666"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="675"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashSet;" line="681"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="691"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="700"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashSet;" line="705"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashSet;" line="718"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashSet;" line="723"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/LinkedHashSet;" line="732"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="738"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="743"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="748"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/LinkedHashSet;" line="755"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="763"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/LinkedHashSet;" line="772"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/LinkedHashSet;" line="780"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashSet;" line="788"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/LinkedHashSet;" line="794"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="union" desc="(Ljavaslang/collection/Set;)Ljavaslang/collection/LinkedHashSet;" line="802"><counter type="INSTRUCTION" missed="5" covered="34"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="9"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashSet;" line="823"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="829"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="837"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashSet;" line="844"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashSet;" line="850"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/LinkedHashSet;" line="856"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="863"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="869"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="881"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="886"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addAll" desc="(Ljavaslang/collection/LinkedHashMap;Ljava/lang/Iterable;)Ljavaslang/collection/LinkedHashMap;" line="891"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeReplace" desc="()Ljava/lang/Object;" line="909"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="921"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$takeRight$8" desc="(I)Ljava/util/Iterator;" line="783"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$take$7" desc="(I)Ljava/util/Iterator;" line="775"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanLeft$6" desc="(Ljava/util/ArrayList;Ljava/lang/Object;)Ljava/util/ArrayList;" line="725"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$5" desc="(Ljava/util/function/Function;Ljavaslang/collection/LinkedHashMap;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashMap;" line="640"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$iterator$4" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="625"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$3" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashMap;Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="556"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljava/lang/Object;Ljavaslang/collection/LinkedHashSet;)Ljavaslang/collection/LinkedHashSet;" line="557"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$1" desc="(Ljava/util/function/Function;Ljavaslang/collection/LinkedHashMap;Ljava/lang/Object;)Ljavaslang/collection/LinkedHashMap;" line="542"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="57"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="33"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="46" covered="1055"/><counter type="BRANCH" missed="8" covered="74"/><counter type="LINE" missed="12" covered="214"/><counter type="COMPLEXITY" missed="11" covered="134"/><counter type="METHOD" missed="4" covered="100"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Tree$Node$SerializationProxy"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Tree$Node;)V" line="848"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeObject" desc="(Ljava/io/ObjectOutputStream;)V" line="859"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="873"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="889"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/IteratorModule$DistinctIterator"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Set;Ljava/util/function/Function;)V" line="1841"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1851"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1864"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Vector$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Vector;)V" line="738"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="744"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="749"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$36"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Stream;II)V" line="1630"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1636"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljavaslang/collection/IndexedSeq;" line="1646"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="71"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$37"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;ILjavaslang/collection/Iterator;)V" line="1710"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1716"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1721"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$38"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;I)V" line="1734"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1739"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1750"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Tree"><method name="collector" desc="()Ljava/util/stream/Collector;" line="43"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Tree$Empty;" line="60"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Tree$Node;" line="71"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;[Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Tree$Node;" line="85"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Iterable;)Ljavaslang/collection/Tree$Node;" line="98"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Tree;" line="113"><counter type="INSTRUCTION" missed="2" covered="20"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Tree;" line="131"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Tree;" line="151"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Tree;" line="165"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBranch" desc="()Z" line="199"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="(Ljavaslang/collection/Tree$Order;)Ljavaslang/collection/Iterator;" line="209"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="228"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="traverse" desc="()Ljavaslang/collection/Seq;" line="238"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="traverse" desc="(Ljavaslang/collection/Tree$Order;)Ljavaslang/collection/Seq;" line="249"><counter type="INSTRUCTION" missed="13" covered="26"/><counter type="BRANCH" missed="1" covered="6"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="branchCount" desc="()I" line="274"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leafCount" desc="()I" line="287"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nodeCount" desc="()I" line="302"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/Tree;" line="313"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/Seq;" line="318"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Seq;" line="323"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Seq;" line="333"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/Seq;" line="343"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/Seq;" line="352"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Seq;" line="361"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Seq;" line="367"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Seq;" line="377"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Seq;" line="387"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Tree;" line="393"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="399"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="410"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="420"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="425"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="430"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="439"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/Seq;" line="444"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="453"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="458"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="463"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="468"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Tree;" line="473"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="479"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="485"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Tree;" line="495"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Tree;" line="504"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Tree;" line="513"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Seq;" line="518"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="524"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="529"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="535"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="541"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="546"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="552"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="563"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="568"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Seq;" line="573"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="582"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/Seq;" line="587"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/Seq;" line="596"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Seq;" line="605"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Seq;" line="611"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Tree;" line="617"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="624"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="636"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Tree;" line="646"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Tree;" line="656"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Tree;" line="675"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$zipAll$6" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Tree$Node;" line="665"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$zipAll$5" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="658"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$replaceAll$4" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="513"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nodeCount$3" desc="(Ljava/lang/Integer;Ljavaslang/collection/Tree$Node;)Ljava/lang/Integer;" line="305"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$leafCount$2" desc="(Ljava/lang/Integer;Ljavaslang/collection/Tree$Node;)Ljava/lang/Integer;" line="292"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$branchCount$1" desc="(Ljava/lang/Integer;Ljavaslang/collection/Tree$Node;)Ljava/lang/Integer;" line="277"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$0" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="46"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="31" covered="753"/><counter type="BRANCH" missed="2" covered="81"/><counter type="LINE" missed="5" covered="165"/><counter type="COMPLEXITY" missed="5" covered="111"/><counter type="METHOD" missed="3" covered="70"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$39"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/function/Predicate;)V" line="1771"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1778"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1791"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeMap$EntryComparator"><method name="&lt;init&gt;" desc="(Ljava/util/Comparator;)V" line="820"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compare" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)I" line="826"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$30"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/function/Function;)V" line="1309"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1317"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1325"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$31"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/function/Function;)V" line="1428"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1432"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1437"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/List$Cons"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljavaslang/collection/List;)V" line="1486"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="1495"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="1500"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/List;" line="1505"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1510"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1515"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1536"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1541"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeReplace" desc="()Ljava/lang/Object;" line="1553"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="1565"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="110"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="17"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$32"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/function/Consumer;)V" line="1468"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1471"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1476"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$33"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)V" line="1512"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1518"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1523"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$34"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/lang/Object;Ljava/lang/Object;)V" line="1541"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1545"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1550"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$35"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljava/lang/Object;Ljavaslang/collection/Iterator;Ljava/util/function/BiFunction;)V" line="1581"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1588"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1593"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/RedBlackTreeModule$Empty"><method name="&lt;init&gt;" desc="(Ljava/util/Comparator;)V" line="885"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/RedBlackTreeModule$Empty;" line="891"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="color" desc="()Ljavaslang/collection/RedBlackTree$Color;" line="896"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="()Ljava/util/Comparator;" line="901"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/Object;)Z" line="906"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="find" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="911"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="916"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="left" desc="()Ljavaslang/collection/RedBlackTree;" line="921"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="right" desc="()Ljavaslang/collection/RedBlackTree;" line="926"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="931"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="value" desc="()Ljava/lang/Object;" line="936"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="942"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="947"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="952"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="16"/><counter type="COMPLEXITY" missed="1" covered="15"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/SortedMap"><method name="last" desc="()Ljavaslang/Tuple2;" line="133"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$last$0" desc="()Ljava/util/NoSuchElementException;" line="133"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$LeafSingleton"><method name="&lt;init&gt;" desc="(ILjava/lang/Object;Ljava/lang/Object;)V" line="260"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lookup" desc="(ILjava/lang/Object;)Ljavaslang/control/Option;" line="269"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modify" desc="(ILjava/lang/Object;Ljava/lang/Object;Ljavaslang/collection/HashArrayMappedTrieModule$Action;)Ljavaslang/collection/HashArrayMappedTrieModule$AbstractNode;" line="278"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="287"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="292"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="298"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hash" desc="()I" line="303"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="key" desc="()Ljava/lang/Object;" line="308"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="value" desc="()Ljava/lang/Object;" line="313"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="93"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="13"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$Action"><method name="values" desc="()[Ljavaslang/collection/HashArrayMappedTrieModule$Action;" line="53"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="valueOf" desc="(Ljava/lang/String;)Ljavaslang/collection/HashArrayMappedTrieModule$Action;" line="53"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/String;I)V" line="53"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="53"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="29"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="2" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/IndexedSeqModule$LastIndexOfSlice"><method name="lastIndexOfSlice" desc="(Ljavaslang/collection/IndexedSeq;Ljavaslang/collection/IndexedSeq;I)I" line="363"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="findSlice" desc="(Ljavaslang/collection/IndexedSeq;IILjavaslang/collection/IndexedSeq;)I" line="392"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="79"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="25"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$14"><method name="&lt;init&gt;" desc="(DDD)V" line="655"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="663"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Double;" line="668"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="83"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$15"><method name="&lt;init&gt;" desc="(III)V" line="732"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="739"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Integer;" line="744"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$16"><method name="&lt;init&gt;" desc="(JJJ)V" line="804"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="811"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Long;" line="816"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashMap"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/HashArrayMappedTrie;)V" line="38"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="52"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/HashMap;" line="64"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="76"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/util/Map;)Ljavaslang/collection/HashMap;" line="88"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="106"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="119"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/HashMap;" line="143"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/HashMap;" line="159"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="([Ljava/util/Map$Entry;)Ljavaslang/collection/HashMap;" line="173"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="([Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="191"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofEntries" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashMap;" line="209"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/collection/HashMap;" line="223"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="clear" desc="()Ljavaslang/collection/HashMap;" line="231"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsKey" desc="(Ljava/lang/Object;)Z" line="236"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsValue" desc="(Ljava/lang/Object;)Z" line="241"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/HashMap;" line="246"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/HashMap;" line="251"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/HashMap;" line="257"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/HashMap;" line="263"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/HashMap;" line="274"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashMap;" line="285"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashMap;" line="291"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashMap;" line="297"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashMap;" line="309"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/HashMap;" line="315"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="326"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="332"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="337"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="350"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="355"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljavaslang/Tuple2;" line="360"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="369"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/HashMap;" line="374"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="383"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="392"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="397"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="402"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keySet" desc="()Ljavaslang/collection/Set;" line="407"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="412"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/BiFunction;)Ljavaslang/collection/HashMap;" line="417"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapValues" desc="(Ljava/util/function/Function;)Ljavaslang/collection/HashMap;" line="423"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="429"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="merge" desc="(Ljavaslang/collection/Map;)Ljavaslang/collection/HashMap;" line="434"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="merge" desc="(Ljavaslang/collection/Map;Ljava/util/function/BiFunction;)Ljavaslang/collection/HashMap;" line="440"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="445"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/HashMap;" line="452"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="461"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="466"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/HashMap;" line="471"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashMap;" line="477"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="487"><counter type="INSTRUCTION" missed="1" covered="21"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="494"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/HashMap;" line="499"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljavaslang/Tuple2;Ljava/util/function/BiFunction;)Ljavaslang/collection/HashMap;" line="511"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="517"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Seq;" line="523"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="529"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="534"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="539"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="544"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/HashMap;" line="551"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="560"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/HashMap;" line="569"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/HashMap;" line="578"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashMap;" line="587"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/HashMap;" line="593"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="values" desc="()Ljavaslang/collection/Seq;" line="600"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="605"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="610"><counter type="INSTRUCTION" missed="2" covered="16"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="621"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="626"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="631"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrap" desc="(Ljavaslang/collection/HashArrayMappedTrie;)Ljavaslang/collection/HashMap;" line="635"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mapValues$10" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="424"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$9" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/HashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="418"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$8" desc="(Ljava/util/function/Function;Ljavaslang/collection/HashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="339"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$7" desc="(Ljavaslang/Tuple2;Ljavaslang/collection/HashMap;)Ljavaslang/collection/HashMap;" line="342"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$foldRight$6" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljavaslang/Tuple2;)Ljava/lang/Object;" line="327"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$flatMap$5" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/HashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="317"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filter$4" desc="(Ljava/util/function/Predicate;Ljavaslang/collection/HashMap;Ljavaslang/Tuple2;)Ljavaslang/collection/HashMap;" line="299"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$containsValue$3" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="241"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$bimap$2" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljavaslang/Tuple2;)Ljavaslang/Tuple2;" line="225"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$collector$1" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="55"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="(Ljavaslang/collection/HashArrayMappedTrie;)Ljava/lang/Integer;" line="40"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="33"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="34" covered="945"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="6" covered="187"/><counter type="COMPLEXITY" missed="6" covered="113"/><counter type="METHOD" missed="3" covered="83"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$17"><method name="&lt;init&gt;" desc="(I)V" line="837"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="842"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Integer;" line="847"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$18"><method name="&lt;init&gt;" desc="(J)V" line="861"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="866"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Long;" line="871"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$19"><method name="&lt;init&gt;" desc="(Ljava/util/function/Supplier;)V" line="885"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="888"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="893"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$10"><method name="&lt;init&gt;" desc="([I)V" line="334"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="339"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Integer;" line="344"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$11"><method name="&lt;init&gt;" desc="([J)V" line="357"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="362"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Long;" line="367"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$12"><method name="&lt;init&gt;" desc="([S)V" line="380"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="385"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Short;" line="390"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$13"><method name="&lt;init&gt;" desc="(DDD)V" line="479"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="487"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Double;" line="492"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="83"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Queue"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/List;Ljavaslang/collection/List;)V" line="53"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="collector" desc="()Ljava/util/stream/Collector;" line="79"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="empty" desc="()Ljavaslang/collection/Queue;" line="97"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="108"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="([Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="122"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="136"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([Z)Ljavaslang/collection/Queue;" line="156"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([B)Ljavaslang/collection/Queue;" line="168"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([C)Ljavaslang/collection/Queue;" line="180"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([D)Ljavaslang/collection/Queue;" line="192"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([F)Ljavaslang/collection/Queue;" line="204"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([I)Ljavaslang/collection/Queue;" line="216"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([J)Ljavaslang/collection/Queue;" line="228"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofAll" desc="([S)Ljavaslang/collection/Queue;" line="240"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Queue;" line="255"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Queue;" line="269"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(CC)Ljavaslang/collection/Queue;" line="274"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(CCI)Ljavaslang/collection/Queue;" line="278"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(DDD)Ljavaslang/collection/Queue;" line="282"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(II)Ljavaslang/collection/Queue;" line="302"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(III)Ljavaslang/collection/Queue;" line="328"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="range" desc="(JJ)Ljavaslang/collection/Queue;" line="348"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeBy" desc="(JJJ)Ljavaslang/collection/Queue;" line="374"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(CC)Ljavaslang/collection/Queue;" line="378"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(CCI)Ljavaslang/collection/Queue;" line="382"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(DDD)Ljavaslang/collection/Queue;" line="386"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(II)Ljavaslang/collection/Queue;" line="406"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(III)Ljavaslang/collection/Queue;" line="432"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosed" desc="(JJ)Ljavaslang/collection/Queue;" line="452"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rangeClosedBy" desc="(JJJ)Ljavaslang/collection/Queue;" line="478"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dequeue" desc="()Ljavaslang/Tuple2;" line="488"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dequeueOption" desc="()Ljavaslang/control/Option;" line="501"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="enqueue" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="511"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="enqueue" desc="([Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="524"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="enqueueAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="541"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="()Ljava/lang/Object;" line="556"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peekOption" desc="()Ljavaslang/control/Option;" line="569"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="append" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="576"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="581"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="clear" desc="()Ljavaslang/collection/Queue;" line="587"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="()Ljavaslang/collection/Queue;" line="592"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combinations" desc="(I)Ljavaslang/collection/Queue;" line="597"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="()Ljavaslang/collection/Queue;" line="602"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(I)Ljavaslang/collection/Queue;" line="607"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="613"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinct" desc="()Ljavaslang/collection/Queue;" line="618"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Queue;" line="623"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="distinctBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Queue;" line="629"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="drop" desc="(I)Ljavaslang/collection/Queue;" line="635"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropRight" desc="(I)Ljavaslang/collection/Queue;" line="646"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="657"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dropWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="663"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="670"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="677"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Queue;" line="683"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="(I)Ljava/lang/Object;" line="689"><counter type="INSTRUCTION" missed="0" covered="86"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="groupBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="712"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="grouped" desc="(I)Ljavaslang/collection/Iterator;" line="718"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasDefiniteSize" desc="()Z" line="723"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="head" desc="()Ljava/lang/Object;" line="728"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="headOption" desc="()Ljavaslang/control/Option;" line="737"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="indexOf" desc="(Ljava/lang/Object;I)I" line="742"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="init" desc="()Ljavaslang/collection/Queue;" line="754"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="initOption" desc="()Ljavaslang/control/Option;" line="765"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insert" desc="(ILjava/lang/Object;)Ljavaslang/collection/Queue;" line="770"><counter type="INSTRUCTION" missed="0" covered="79"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="insertAll" desc="(ILjava/lang/Iterable;)Ljavaslang/collection/Queue;" line="791"><counter type="INSTRUCTION" missed="0" covered="85"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intersperse" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="813"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="824"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTraversableAgain" desc="()Z" line="829"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lastIndexOf" desc="(Ljava/lang/Object;I)I" line="834"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="length" desc="()I" line="839"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Queue;" line="844"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="850"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="padTo" desc="(ILjava/lang/Object;)Ljavaslang/collection/Queue;" line="855"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="patch" desc="(ILjava/lang/Iterable;I)Ljavaslang/collection/Queue;" line="863"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="partition" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="873"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/collection/Queue;" line="879"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="permutations" desc="()Ljavaslang/collection/Queue;" line="888"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prepend" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="893"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="prependAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="898"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="remove" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="904"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeFirst" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="910"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeLast" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="916"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAt" desc="(I)Ljavaslang/collection/Queue;" line="922"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="927"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="removeAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="934"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replace" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="942"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="replaceAll" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="951"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="retainAll" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="960"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reverse" desc="()Ljavaslang/collection/Queue;" line="970"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scan" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Queue;" line="975"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Queue;" line="980"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljavaslang/collection/Queue;" line="988"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="slice" desc="(II)Ljavaslang/collection/Queue;" line="994"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(I)Ljavaslang/collection/Iterator;" line="999"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sliding" desc="(II)Ljavaslang/collection/Iterator;" line="1004"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="()Ljavaslang/collection/Queue;" line="1009"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sort" desc="(Ljava/util/Comparator;)Ljavaslang/collection/Queue;" line="1014"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Queue;" line="1020"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sortBy" desc="(Ljava/util/Comparator;Ljava/util/function/Function;)Ljavaslang/collection/Queue;" line="1025"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="span" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1033"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(I)Ljavaslang/Tuple2;" line="1039"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAt" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1044"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="splitAtInclusive" desc="(Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1049"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljava/lang/Iterable;I)Z" line="1054"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="spliterator" desc="()Ljava/util/Spliterator;" line="1059"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(I)Ljavaslang/collection/Queue;" line="1064"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subSequence" desc="(II)Ljavaslang/collection/Queue;" line="1069"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tail" desc="()Ljavaslang/collection/Queue;" line="1074"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tailOption" desc="()Ljavaslang/control/Option;" line="1083"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="take" desc="(I)Ljavaslang/collection/Queue;" line="1088"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeRight" desc="(I)Ljavaslang/collection/Queue;" line="1106"><counter type="INSTRUCTION" missed="10" covered="40"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="9"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeUntil" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="1124"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="takeWhile" desc="(Ljava/util/function/Predicate;)Ljavaslang/collection/Queue;" line="1130"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="1137"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="1143"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unzip3" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="1149"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="update" desc="(ILjava/lang/Object;)Ljavaslang/collection/Queue;" line="1155"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zip" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Queue;" line="1160"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipAll" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Queue;" line="1166"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="zipWithIndex" desc="()Ljavaslang/collection/Queue;" line="1172"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1176"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="1181"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="1193"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="1198"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1203"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sortBy$3" desc="(Ljava/util/Comparator;Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)I" line="1027"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$groupBy$2" desc="(Ljava/lang/Object;Ljavaslang/collection/Iterator;)Ljavaslang/Tuple2;" line="713"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$collector$1" desc="(Ljava/util/ArrayList;Ljava/util/ArrayList;)Ljava/util/ArrayList;" line="82"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$new$0" desc="()Ljava/lang/Integer;" line="53"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="26" covered="1752"/><counter type="BRANCH" missed="3" covered="137"/><counter type="LINE" missed="3" covered="302"/><counter type="COMPLEXITY" missed="4" covered="197"/><counter type="METHOD" missed="1" covered="130"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$25"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;)V" line="1060"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1065"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljavaslang/Tuple2;" line="1070"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$26"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;ILjavaslang/collection/Iterator;)V" line="1150"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1156"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1165"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$27"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;ILjavaslang/collection/Iterator;)V" line="1179"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1184"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1192"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="64"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$28"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/function/Predicate;)V" line="1213"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1219"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1230"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$29"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/function/Predicate;)V" line="1251"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1257"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="1268"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/ListModule$SplitAt"><method name="splitByPredicateReversed" desc="(Ljavaslang/collection/List;Ljava/util/function/Predicate;)Ljavaslang/Tuple2;" line="1666"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/RedBlackTree$Color"><method name="values" desc="()[Ljavaslang/collection/RedBlackTree$Color;" line="345"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="valueOf" desc="(Ljava/lang/String;)Ljavaslang/collection/RedBlackTree$Color;" line="345"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/String;I)V" line="345"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="351"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="345"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="40"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$Replace"><method name="&lt;init&gt;" desc="()V" line="1052"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="apply" desc="(Ljavaslang/collection/Tree$Node;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/collection/Tree$Node;" line="1058"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Collections"><method name="&lt;init&gt;" desc="()V" line="19"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mergeMaps" desc="(Ljavaslang/collection/Map;Ljavaslang/collection/Map;Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="23"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mergeMaps" desc="(Ljavaslang/collection/Map;Ljavaslang/collection/Map;Ljava/util/function/Function;Ljava/util/function/BiFunction;)Ljavaslang/collection/Map;" line="36"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanLeft" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/lang/Iterable;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Ljavaslang/collection/Traversable;" line="56"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scanRight" desc="(Ljava/lang/Iterable;Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/lang/Iterable;Ljava/util/function/BiFunction;Ljava/util/function/Function;)Ljavaslang/collection/Traversable;" line="69"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="crossProduct" desc="(Ljavaslang/collection/Seq;I)Ljavaslang/collection/Iterator;" line="75"><counter type="INSTRUCTION" missed="5" covered="13"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;Ljavaslang/collection/Traversable;Ljava/util/function/Function;)Ljavaslang/collection/Traversable;" line="84"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;Ljavaslang/collection/Traversable;Ljava/util/function/Function;)Ljavaslang/collection/Traversable;" line="100"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tabulate" desc="(ILjava/util/function/Function;)Ljavaslang/collection/Iterator;" line="107"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fill" desc="(ILjava/util/function/Supplier;)Ljavaslang/collection/Iterator;" line="129"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fill$7" desc="(Ljava/util/function/Supplier;Ljava/lang/Integer;)Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$fill$6" desc="(Ljava/util/function/Supplier;Ljava/lang/Integer;)Ljava/lang/Object;" line="103"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$crossProduct$5" desc="(Ljavaslang/collection/Seq;Ljavaslang/collection/Iterator;Ljava/lang/Integer;)Ljavaslang/collection/Iterator;" line="80"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$4" desc="(Ljavaslang/collection/Seq;Ljavaslang/collection/Seq;)Ljava/lang/Iterable;" line="80"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scanRight$3" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="70"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mergeMaps$2" desc="(Ljava/util/function/BiFunction;Ljavaslang/collection/Map;Ljavaslang/Tuple2;)Ljavaslang/collection/Map;" line="44"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="46"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mergeMaps$0" desc="(Ljavaslang/collection/Map;Ljavaslang/Tuple2;)Ljavaslang/collection/Map;" line="29"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="8" covered="253"/><counter type="BRANCH" missed="1" covered="19"/><counter type="LINE" missed="2" covered="49"/><counter type="COMPLEXITY" missed="2" covered="26"/><counter type="METHOD" missed="1" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$20"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/util/function/Function;)V" line="909"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="914"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="919"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$21"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="934"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="937"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="942"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$22"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/lang/Object;)V" line="972"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="978"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="983"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/StreamModule$DropRight"><method name="apply" desc="(Ljavaslang/collection/List;Ljavaslang/collection/List;Ljavaslang/collection/Stream;)Ljavaslang/collection/Stream;" line="1646"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljavaslang/collection/List;Ljavaslang/collection/List;Ljavaslang/collection/Stream;)Ljavaslang/collection/Stream;" line="1652"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$23"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/Iterator;)V" line="1016"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1019"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljavaslang/Tuple2;" line="1024"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Iterator$24"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Iterator;Ljavaslang/collection/Iterator;Ljava/util/Iterator;Ljava/lang/Object;Ljava/lang/Object;)V" line="1038"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="1041"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljavaslang/Tuple2;" line="1046"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/TreeModule$Traversal"><method name="&lt;init&gt;" desc="()V" line="1074"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="preOrder" desc="(Ljavaslang/collection/Tree;)Ljavaslang/collection/Stream;" line="1077"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inOrder" desc="(Ljavaslang/collection/Tree;)Ljavaslang/collection/Stream;" line="1082"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="postOrder" desc="(Ljavaslang/collection/Tree;)Ljavaslang/collection/Stream;" line="1095"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="levelOrder" desc="(Ljavaslang/collection/Tree;)Ljavaslang/collection/Stream;" line="1102"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$postOrder$2" desc="(Ljavaslang/collection/Stream;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Stream;" line="1097"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inOrder$1" desc="(Ljavaslang/collection/Stream;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Stream;" line="1088"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$preOrder$0" desc="(Ljavaslang/collection/Stream;Ljavaslang/collection/Tree$Node;)Ljavaslang/collection/Stream;" line="1078"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="91"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="1" covered="23"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="1" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/Array$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/Array;)V" line="477"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="482"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljava/lang/Object;" line="487"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/List$Cons$SerializationProxy"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/List$Cons;)V" line="1591"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeObject" desc="(Ljava/io/ObjectOutputStream;)V" line="1602"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readObject" desc="(Ljava/io/ObjectInputStream;)V" line="1618"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="1642"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/collection/HashArrayMappedTrieModule$LeafList$1"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/HashArrayMappedTrieModule$LeafList;)V" line="415"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasNext" desc="()Z" line="420"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNext" desc="()Ljavaslang/Tuple2;" line="425"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Stream.java"><line nr="109" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="2" mb="0" cb="0"/><line nr="116" mi="0" ci="8" mb="0" cb="0"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="0" ci="4" mb="0" cb="0"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="5" mb="0" cb="0"/><line nr="179" mi="0" ci="4" mb="0" cb="0"/><line nr="180" mi="0" ci="7" mb="0" cb="0"/><line nr="193" mi="0" ci="2" mb="0" cb="0"/><line nr="204" mi="0" ci="7" mb="0" cb="0"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="221" mi="0" ci="11" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="10" mb="0" cb="2"/><line nr="231" mi="0" ci="11" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="0" ci="5" mb="0" cb="0"/><line nr="261" mi="0" ci="4" mb="0" cb="0"/><line nr="262" mi="0" ci="5" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="3" mb="0" cb="2"/><line nr="276" mi="0" ci="3" mb="0" cb="0"/><line nr="278" mi="0" ci="4" mb="0" cb="0"/><line nr="289" mi="0" ci="4" mb="0" cb="0"/><line nr="290" mi="0" ci="4" mb="0" cb="0"/><line nr="300" mi="0" ci="4" mb="0" cb="0"/><line nr="301" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="0" ci="4" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="0"/><line nr="322" mi="0" ci="4" mb="0" cb="0"/><line nr="323" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="355" mi="0" ci="4" mb="0" cb="0"/><line nr="356" mi="0" ci="4" mb="0" cb="0"/><line nr="366" mi="0" ci="4" mb="0" cb="0"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="371" mi="0" ci="5" mb="0" cb="0"/><line nr="375" mi="0" ci="6" mb="0" cb="0"/><line nr="379" mi="0" ci="6" mb="0" cb="0"/><line nr="399" mi="0" ci="5" mb="0" cb="0"/><line nr="425" mi="0" ci="6" mb="0" cb="0"/><line nr="445" mi="0" ci="5" mb="0" cb="0"/><line nr="471" mi="0" ci="6" mb="0" cb="0"/><line nr="475" mi="0" ci="5" mb="0" cb="0"/><line nr="479" mi="0" ci="6" mb="0" cb="0"/><line nr="483" mi="0" ci="6" mb="0" cb="0"/><line nr="503" mi="0" ci="5" mb="0" cb="0"/><line nr="529" mi="0" ci="6" mb="0" cb="0"/><line nr="549" mi="0" ci="5" mb="0" cb="0"/><line nr="575" mi="0" ci="6" mb="0" cb="0"/><line nr="586" mi="0" ci="4" mb="0" cb="0"/><line nr="591" mi="0" ci="3" mb="0" cb="2"/><line nr="592" mi="0" ci="3" mb="0" cb="0"/><line nr="595" mi="0" ci="4" mb="0" cb="0"/><line nr="596" mi="0" ci="16" mb="0" cb="0"/><line nr="602" mi="0" ci="4" mb="0" cb="0"/><line nr="603" mi="0" ci="21" mb="0" cb="2"/><line nr="628" mi="0" ci="4" mb="0" cb="0"/><line nr="629" mi="0" ci="13" mb="0" cb="2"/><line nr="634" mi="0" ci="2" mb="0" cb="0"/><line nr="639" mi="0" ci="10" mb="0" cb="0"/><line nr="644" mi="0" ci="6" mb="0" cb="0"/><line nr="649" mi="0" ci="4" mb="0" cb="0"/><line nr="654" mi="0" ci="7" mb="0" cb="0"/><line nr="659" mi="0" ci="4" mb="0" cb="0"/><line nr="660" mi="0" ci="3" mb="0" cb="0"/><line nr="661" mi="0" ci="14" mb="0" cb="0"/><line nr="678" mi="0" ci="4" mb="0" cb="0"/><line nr="683" mi="0" ci="4" mb="0" cb="0"/><line nr="688" mi="0" ci="4" mb="0" cb="0"/><line nr="689" mi="0" ci="5" mb="0" cb="0"/><line nr="690" mi="0" ci="8" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="12" mb="0" cb="0"/><line nr="701" mi="0" ci="2" mb="0" cb="0"/><line nr="702" mi="0" ci="6" mb="0" cb="4"/><line nr="703" mi="0" ci="4" mb="0" cb="0"/><line nr="705" mi="0" ci="2" mb="0" cb="0"/><line nr="710" mi="0" ci="2" mb="0" cb="2"/><line nr="711" mi="0" ci="2" mb="0" cb="0"/><line nr="713" mi="0" ci="10" mb="0" cb="0"/><line nr="719" mi="0" ci="4" mb="0" cb="0"/><line nr="720" mi="0" ci="5" mb="0" cb="0"/><line nr="725" mi="0" ci="4" mb="0" cb="0"/><line nr="726" mi="0" ci="2" mb="0" cb="0"/><line nr="727" mi="0" ci="8" mb="0" cb="4"/><line nr="728" mi="0" ci="4" mb="0" cb="0"/><line nr="730" mi="0" ci="2" mb="0" cb="0"/><line nr="735" mi="0" ci="4" mb="0" cb="0"/><line nr="736" mi="0" ci="2" mb="0" cb="0"/><line nr="737" mi="0" ci="8" mb="0" cb="4"/><line nr="738" mi="0" ci="4" mb="0" cb="0"/><line nr="740" mi="0" ci="2" mb="0" cb="0"/><line nr="741" mi="0" ci="20" mb="0" cb="2"/><line nr="746" mi="0" ci="4" mb="0" cb="0"/><line nr="747" mi="0" ci="5" mb="0" cb="0"/><line nr="752" mi="0" ci="4" mb="0" cb="0"/><line nr="753" mi="0" ci="20" mb="0" cb="2"/><line nr="755" mi="0" ci="5" mb="0" cb="0"/><line nr="756" mi="0" ci="4" mb="0" cb="0"/><line nr="761" mi="0" ci="10" mb="0" cb="4"/><line nr="762" mi="0" ci="11" mb="0" cb="0"/><line nr="764" mi="0" ci="2" mb="0" cb="0"/><line nr="769" mi="0" ci="4" mb="0" cb="0"/><line nr="776" mi="0" ci="3" mb="0" cb="2"/><line nr="777" mi="0" ci="14" mb="0" cb="0"/><line nr="779" mi="0" ci="2" mb="0" cb="2"/><line nr="780" mi="0" ci="14" mb="0" cb="0"/><line nr="782" mi="0" ci="2" mb="0" cb="0"/><line nr="783" mi="0" ci="8" mb="0" cb="2"/><line nr="784" mi="0" ci="3" mb="0" cb="0"/><line nr="785" mi="0" ci="3" mb="0" cb="2"/><line nr="786" mi="0" ci="20" mb="0" cb="0"/><line nr="789" mi="0" ci="3" mb="0" cb="0"/><line nr="794" mi="0" ci="4" mb="0" cb="0"/><line nr="795" mi="0" ci="12" mb="0" cb="0"/><line nr="800" mi="0" ci="5" mb="0" cb="0"/><line nr="805" mi="0" ci="2" mb="0" cb="0"/><line nr="810" mi="0" ci="9" mb="0" cb="2"/><line nr="815" mi="0" ci="2" mb="0" cb="0"/><line nr="816" mi="0" ci="10" mb="0" cb="2"/><line nr="817" mi="0" ci="8" mb="0" cb="4"/><line nr="818" mi="0" ci="2" mb="0" cb="0"/><line nr="821" mi="0" ci="2" mb="0" cb="0"/><line nr="826" mi="0" ci="3" mb="0" cb="2"/><line nr="827" mi="0" ci="5" mb="0" cb="0"/><line nr="829" mi="0" ci="3" mb="0" cb="0"/><line nr="830" mi="0" ci="3" mb="0" cb="2"/><line nr="831" mi="0" ci="2" mb="0" cb="0"/><line nr="833" mi="0" ci="12" mb="0" cb="0"/><line nr="840" mi="0" ci="9" mb="0" cb="2"/><line nr="845" mi="0" ci="2" mb="0" cb="2"/><line nr="846" mi="0" ci="14" mb="0" cb="0"/><line nr="847" mi="0" ci="2" mb="0" cb="2"/><line nr="848" mi="0" ci="10" mb="0" cb="0"/><line nr="849" mi="0" ci="3" mb="0" cb="2"/><line nr="850" mi="0" ci="14" mb="0" cb="0"/><line nr="852" mi="0" ci="19" mb="0" cb="0"/><line nr="859" mi="0" ci="4" mb="0" cb="0"/><line nr="860" mi="0" ci="2" mb="0" cb="2"/><line nr="861" mi="0" ci="14" mb="0" cb="0"/><line nr="862" mi="0" ci="2" mb="0" cb="2"/><line nr="863" mi="0" ci="11" mb="0" cb="2"/><line nr="864" mi="0" ci="3" mb="0" cb="2"/><line nr="865" mi="0" ci="14" mb="0" cb="0"/><line nr="867" mi="0" ci="19" mb="0" cb="0"/><line nr="873" mi="0" ci="3" mb="0" cb="2"/><line nr="874" mi="0" ci="2" mb="0" cb="0"/><line nr="876" mi="0" ci="10" mb="0" cb="0"/><line nr="877" mi="0" ci="3" mb="0" cb="0"/><line nr="878" mi="0" ci="18" mb="0" cb="2"/><line nr="885" mi="0" ci="2" mb="0" cb="0"/><line nr="890" mi="0" ci="4" mb="0" cb="0"/><line nr="891" mi="0" ci="13" mb="0" cb="4"/><line nr="892" mi="0" ci="5" mb="0" cb="2"/><line nr="893" mi="0" ci="2" mb="0" cb="0"/><line nr="896" mi="0" ci="2" mb="0" cb="0"/><line nr="901" mi="0" ci="14" mb="0" cb="0"/><line nr="906" mi="0" ci="4" mb="0" cb="0"/><line nr="907" mi="0" ci="3" mb="0" cb="2"/><line nr="908" mi="0" ci="2" mb="0" cb="0"/><line nr="910" mi="0" ci="17" mb="0" cb="0"/><line nr="916" mi="0" ci="3" mb="0" cb="0"/><line nr="921" mi="0" ci="2" mb="0" cb="2"/><line nr="922" mi="0" ci="2" mb="0" cb="0"/><line nr="923" mi="0" ci="3" mb="0" cb="2"/><line nr="924" mi="0" ci="9" mb="0" cb="0"/><line nr="926" mi="0" ci="19" mb="0" cb="0"/><line nr="932" mi="0" ci="6" mb="0" cb="2"/><line nr="933" mi="0" ci="6" mb="0" cb="2"/><line nr="934" mi="0" ci="6" mb="0" cb="0"/><line nr="935" mi="0" ci="4" mb="0" cb="0"/><line nr="936" mi="0" ci="6" mb="0" cb="0"/><line nr="937" mi="0" ci="2" mb="0" cb="0"/><line nr="942" mi="0" ci="4" mb="0" cb="0"/><line nr="943" mi="0" ci="9" mb="0" cb="0"/><line nr="948" mi="0" ci="4" mb="0" cb="0"/><line nr="949" mi="0" ci="3" mb="0" cb="2"/><line nr="950" mi="0" ci="2" mb="0" cb="0"/><line nr="952" mi="0" ci="3" mb="0" cb="0"/><line nr="953" mi="0" ci="3" mb="0" cb="0"/><line nr="954" mi="0" ci="14" mb="0" cb="0"/><line nr="960" mi="0" ci="3" mb="0" cb="2"/><line nr="961" mi="0" ci="2" mb="0" cb="0"/><line nr="963" mi="0" ci="3" mb="0" cb="0"/><line nr="964" mi="0" ci="3" mb="0" cb="2"/><line nr="965" mi="0" ci="3" mb="0" cb="0"/><line nr="967" mi="0" ci="2" mb="0" cb="0"/><line nr="968" mi="0" ci="8" mb="0" cb="0"/><line nr="969" mi="0" ci="7" mb="0" cb="0"/><line nr="970" mi="0" ci="9" mb="0" cb="0"/><line nr="978" mi="0" ci="10" mb="0" cb="0"/><line nr="984" mi="0" ci="4" mb="0" cb="0"/><line nr="985" mi="0" ci="5" mb="0" cb="0"/><line nr="990" mi="0" ci="3" mb="0" cb="2"/><line nr="991" mi="0" ci="2" mb="0" cb="0"/><line nr="993" mi="0" ci="3" mb="0" cb="0"/><line nr="994" mi="0" ci="21" mb="0" cb="2"/><line nr="1000" mi="0" ci="4" mb="0" cb="0"/><line nr="1001" mi="0" ci="3" mb="0" cb="2"/><line nr="1002" mi="0" ci="2" mb="0" cb="0"/><line nr="1004" mi="0" ci="3" mb="0" cb="0"/><line nr="1005" mi="0" ci="21" mb="0" cb="2"/><line nr="1011" mi="0" ci="11" mb="0" cb="2"/><line nr="1016" mi="0" ci="2" mb="0" cb="2"/><line nr="1017" mi="0" ci="14" mb="0" cb="0"/><line nr="1018" mi="0" ci="2" mb="0" cb="2"/><line nr="1019" mi="0" ci="3" mb="0" cb="0"/><line nr="1020" mi="0" ci="3" mb="0" cb="2"/><line nr="1021" mi="0" ci="5" mb="0" cb="0"/><line nr="1023" mi="0" ci="17" mb="0" cb="0"/><line nr="1029" mi="0" ci="13" mb="0" cb="2"/><line nr="1035" mi="0" ci="4" mb="0" cb="0"/><line nr="1036" mi="0" ci="4" mb="0" cb="0"/><line nr="1037" mi="0" ci="13" mb="0" cb="2"/><line nr="1042" mi="0" ci="3" mb="0" cb="2"/><line nr="1043" mi="0" ci="2" mb="0" cb="0"/><line nr="1045" mi="0" ci="3" mb="0" cb="0"/><line nr="1046" mi="0" ci="4" mb="0" cb="2"/><line nr="1047" mi="0" ci="8" mb="0" cb="0"/><line nr="1049" mi="0" ci="16" mb="0" cb="0"/><line nr="1056" mi="0" ci="3" mb="0" cb="2"/><line nr="1057" mi="0" ci="2" mb="0" cb="0"/><line nr="1059" mi="0" ci="3" mb="0" cb="0"/><line nr="1060" mi="0" ci="8" mb="0" cb="2"/><line nr="1061" mi="0" ci="16" mb="0" cb="0"/><line nr="1068" mi="0" ci="4" mb="0" cb="0"/><line nr="1069" mi="0" ci="3" mb="0" cb="2"/><line nr="1070" mi="0" ci="2" mb="0" cb="0"/><line nr="1072" mi="0" ci="4" mb="0" cb="0"/><line nr="1073" mi="0" ci="8" mb="0" cb="0"/><line nr="1079" mi="0" ci="11" mb="0" cb="2"/><line nr="1084" mi="0" ci="5" mb="0" cb="0"/><line nr="1089" mi="0" ci="4" mb="0" cb="0"/><line nr="1091" mi="0" ci="7" mb="0" cb="0"/><line nr="1097" mi="0" ci="4" mb="0" cb="0"/><line nr="1098" mi="0" ci="9" mb="0" cb="0"/><line nr="1103" mi="0" ci="6" mb="0" cb="4"/><line nr="1104" mi="0" ci="2" mb="0" cb="0"/><line nr="1106" mi="0" ci="4" mb="0" cb="0"/><line nr="1107" mi="0" ci="2" mb="0" cb="2"/><line nr="1108" mi="0" ci="18" mb="0" cb="0"/><line nr="1110" mi="0" ci="10" mb="0" cb="0"/><line nr="1117" mi="0" ci="5" mb="0" cb="0"/><line nr="1122" mi="0" ci="8" mb="0" cb="0"/><line nr="1127" mi="0" ci="12" mb="0" cb="2"/><line nr="1132" mi="0" ci="4" mb="0" cb="0"/><line nr="1133" mi="0" ci="13" mb="0" cb="2"/><line nr="1138" mi="0" ci="5" mb="0" cb="0"/><line nr="1143" mi="0" ci="8" mb="0" cb="0"/><line nr="1144" mi="0" ci="6" mb="0" cb="0"/><line nr="1145" mi="0" ci="10" mb="0" cb="0"/><line nr="1146" mi="0" ci="3" mb="0" cb="0"/><line nr="1151" mi="0" ci="4" mb="0" cb="0"/><line nr="1152" mi="0" ci="8" mb="0" cb="0"/><line nr="1157" mi="0" ci="8" mb="0" cb="0"/><line nr="1162" mi="0" ci="4" mb="0" cb="0"/><line nr="1163" mi="0" ci="10" mb="0" cb="0"/><line nr="1168" mi="0" ci="4" mb="0" cb="0"/><line nr="1169" mi="0" ci="5" mb="0" cb="2"/><line nr="1170" mi="0" ci="2" mb="0" cb="0"/><line nr="1172" mi="0" ci="14" mb="0" cb="0"/><line nr="1179" mi="0" ci="8" mb="0" cb="0"/><line nr="1184" mi="0" ci="2" mb="0" cb="0"/><line nr="1189" mi="0" ci="2" mb="0" cb="2"/><line nr="1190" mi="0" ci="14" mb="0" cb="0"/><line nr="1192" mi="0" ci="2" mb="0" cb="0"/><line nr="1193" mi="0" ci="10" mb="0" cb="2"/><line nr="1194" mi="0" ci="3" mb="0" cb="2"/><line nr="1195" mi="0" ci="8" mb="0" cb="0"/><line nr="1196" mi="0" ci="10" mb="0" cb="0"/><line nr="1199" mi="0" ci="2" mb="0" cb="0"/><line nr="1204" mi="0" ci="5" mb="0" cb="4"/><line nr="1205" mi="0" ci="18" mb="0" cb="0"/><line nr="1207" mi="0" ci="3" mb="0" cb="2"/><line nr="1208" mi="0" ci="2" mb="0" cb="0"/><line nr="1209" mi="0" ci="3" mb="0" cb="2"/><line nr="1210" mi="0" ci="5" mb="0" cb="0"/><line nr="1211" mi="0" ci="2" mb="0" cb="2"/><line nr="1212" mi="0" ci="18" mb="0" cb="0"/><line nr="1214" mi="0" ci="10" mb="0" cb="0"/><line nr="1223" mi="0" ci="9" mb="0" cb="2"/><line nr="1228" mi="0" ci="6" mb="0" cb="4"/><line nr="1229" mi="0" ci="2" mb="0" cb="0"/><line nr="1231" mi="0" ci="17" mb="0" cb="0"/><line nr="1237" mi="0" ci="2" mb="0" cb="0"/><line nr="1238" mi="0" ci="4" mb="0" cb="0"/><line nr="1239" mi="0" ci="3" mb="0" cb="2"/><line nr="1240" mi="0" ci="3" mb="0" cb="0"/><line nr="1241" mi="0" ci="4" mb="0" cb="0"/><line nr="1243" mi="0" ci="2" mb="0" cb="0"/><line nr="1248" mi="0" ci="4" mb="0" cb="0"/><line nr="1249" mi="0" ci="5" mb="0" cb="0"/><line nr="1254" mi="0" ci="4" mb="0" cb="0"/><line nr="1255" mi="0" ci="3" mb="0" cb="2"/><line nr="1256" mi="0" ci="2" mb="0" cb="0"/><line nr="1258" mi="0" ci="3" mb="0" cb="0"/><line nr="1259" mi="0" ci="4" mb="0" cb="2"/><line nr="1260" mi="0" ci="14" mb="0" cb="0"/><line nr="1262" mi="0" ci="2" mb="0" cb="0"/><line nr="1269" mi="0" ci="3" mb="0" cb="0"/><line nr="1275" mi="0" ci="4" mb="0" cb="0"/><line nr="1276" mi="0" ci="4" mb="0" cb="0"/><line nr="1277" mi="0" ci="7" mb="0" cb="0"/><line nr="1278" mi="0" ci="7" mb="0" cb="0"/><line nr="1279" mi="0" ci="4" mb="0" cb="0"/><line nr="1285" mi="0" ci="4" mb="0" cb="0"/><line nr="1286" mi="0" ci="4" mb="0" cb="0"/><line nr="1287" mi="0" ci="7" mb="0" cb="0"/><line nr="1288" mi="0" ci="7" mb="0" cb="0"/><line nr="1289" mi="0" ci="7" mb="0" cb="0"/><line nr="1290" mi="0" ci="5" mb="0" cb="0"/><line nr="1295" mi="0" ci="3" mb="0" cb="2"/><line nr="1296" mi="0" ci="14" mb="0" cb="0"/><line nr="1298" mi="0" ci="2" mb="0" cb="2"/><line nr="1299" mi="0" ci="14" mb="0" cb="0"/><line nr="1301" mi="0" ci="2" mb="0" cb="0"/><line nr="1302" mi="0" ci="2" mb="0" cb="0"/><line nr="1303" mi="0" ci="9" mb="0" cb="2"/><line nr="1304" mi="0" ci="3" mb="0" cb="2"/><line nr="1305" mi="0" ci="12" mb="0" cb="0"/><line nr="1307" mi="0" ci="5" mb="0" cb="0"/><line nr="1309" mi="0" ci="3" mb="0" cb="2"/><line nr="1310" mi="0" ci="12" mb="0" cb="0"/><line nr="1313" mi="0" ci="8" mb="0" cb="0"/><line nr="1318" mi="0" ci="4" mb="0" cb="0"/><line nr="1319" mi="0" ci="6" mb="0" cb="0"/><line nr="1324" mi="0" ci="4" mb="0" cb="0"/><line nr="1325" mi="0" ci="8" mb="0" cb="0"/><line nr="1330" mi="0" ci="5" mb="0" cb="0"/><line nr="1345" mi="0" ci="5" mb="0" cb="0"/><line nr="1348" mi="0" ci="2" mb="0" cb="0"/><line nr="1349" mi="0" ci="1" mb="0" cb="0"/><line nr="1359" mi="0" ci="2" mb="0" cb="0"/><line nr="1364" mi="0" ci="5" mb="0" cb="0"/><line nr="1369" mi="0" ci="2" mb="0" cb="0"/><line nr="1374" mi="0" ci="2" mb="0" cb="0"/><line nr="1379" mi="0" ci="5" mb="0" cb="0"/><line nr="1384" mi="0" ci="7" mb="0" cb="2"/><line nr="1389" mi="0" ci="3" mb="0" cb="0"/><line nr="1394" mi="0" ci="10" mb="0" cb="0"/><line nr="1404" mi="0" ci="2" mb="0" cb="0"/><line nr="1430" mi="0" ci="2" mb="0" cb="0"/><line nr="1431" mi="0" ci="4" mb="0" cb="0"/><line nr="1432" mi="0" ci="3" mb="0" cb="0"/><line nr="1433" mi="0" ci="4" mb="0" cb="0"/><line nr="1434" mi="0" ci="1" mb="0" cb="0"/><line nr="1438" mi="0" ci="3" mb="0" cb="0"/><line nr="1443" mi="0" ci="2" mb="0" cb="0"/><line nr="1448" mi="0" ci="5" mb="0" cb="0"/><line nr="1453" mi="0" ci="5" mb="0" cb="0"/><line nr="1458" mi="0" ci="3" mb="0" cb="2"/><line nr="1459" mi="0" ci="2" mb="0" cb="0"/><line nr="1460" mi="0" ci="3" mb="0" cb="2"/><line nr="1461" mi="0" ci="2" mb="0" cb="0"/><line nr="1462" mi="0" ci="3" mb="0" cb="0"/><line nr="1463" mi="0" ci="6" mb="0" cb="4"/><line nr="1464" mi="0" ci="6" mb="0" cb="0"/><line nr="1465" mi="0" ci="2" mb="0" cb="2"/><line nr="1466" mi="0" ci="2" mb="0" cb="0"/><line nr="1468" mi="0" ci="3" mb="0" cb="0"/><line nr="1469" mi="0" ci="3" mb="0" cb="0"/><line nr="1470" mi="0" ci="1" mb="0" cb="0"/><line nr="1471" mi="0" ci="10" mb="0" cb="4"/><line nr="1473" mi="0" ci="2" mb="0" cb="0"/><line nr="1479" mi="0" ci="3" mb="0" cb="0"/><line nr="1484" mi="0" ci="8" mb="0" cb="0"/><line nr="1485" mi="0" ci="2" mb="0" cb="0"/><line nr="1486" mi="0" ci="5" mb="0" cb="4"/><line nr="1487" mi="0" ci="3" mb="0" cb="0"/><line nr="1488" mi="0" ci="5" mb="0" cb="0"/><line nr="1489" mi="0" ci="4" mb="0" cb="2"/><line nr="1490" mi="0" ci="5" mb="0" cb="0"/><line nr="1491" mi="0" ci="3" mb="0" cb="2"/><line nr="1492" mi="0" ci="5" mb="0" cb="0"/><line nr="1495" mi="0" ci="4" mb="0" cb="0"/><line nr="1496" mi="0" ci="2" mb="0" cb="0"/><line nr="1498" mi="0" ci="1" mb="0" cb="0"/><line nr="1499" mi="0" ci="5" mb="0" cb="0"/><line nr="1511" mi="0" ci="5" mb="0" cb="0"/><line nr="1523" mi="0" ci="5" mb="0" cb="0"/><line nr="1549" mi="0" ci="2" mb="0" cb="0"/><line nr="1550" mi="0" ci="3" mb="0" cb="0"/><line nr="1551" mi="0" ci="1" mb="0" cb="0"/><line nr="1560" mi="0" ci="2" mb="0" cb="0"/><line nr="1561" mi="0" ci="5" mb="0" cb="0"/><line nr="1562" mi="0" ci="10" mb="0" cb="2"/><line nr="1563" mi="0" ci="4" mb="0" cb="0"/><line nr="1565" mi="0" ci="1" mb="0" cb="0"/><line nr="1576" mi="0" ci="2" mb="0" cb="0"/><line nr="1577" mi="0" ci="3" mb="0" cb="0"/><line nr="1578" mi="0" ci="2" mb="0" cb="2"/><line nr="1579" mi="0" ci="5" mb="0" cb="0"/><line nr="1581" mi="0" ci="2" mb="0" cb="0"/><line nr="1582" mi="0" ci="7" mb="0" cb="2"/><line nr="1584" mi="0" ci="3" mb="0" cb="0"/><line nr="1585" mi="0" ci="4" mb="0" cb="0"/><line nr="1588" mi="0" ci="4" mb="0" cb="0"/><line nr="1589" mi="0" ci="1" mb="0" cb="0"/><line nr="1601" mi="0" ci="3" mb="0" cb="0"/><line nr="1613" mi="0" ci="2" mb="0" cb="0"/><line nr="1614" mi="0" ci="6" mb="0" cb="0"/><line nr="1615" mi="0" ci="1" mb="0" cb="0"/><line nr="1618" mi="0" ci="9" mb="0" cb="0"/><line nr="1619" mi="0" ci="3" mb="0" cb="0"/><line nr="1620" mi="0" ci="15" mb="0" cb="2"/><line nr="1625" mi="0" ci="3" mb="0" cb="0"/><line nr="1632" mi="0" ci="2" mb="0" cb="2"/><line nr="1633" mi="0" ci="3" mb="0" cb="0"/><line nr="1635" mi="0" ci="7" mb="0" cb="0"/><line nr="1636" mi="0" ci="21" mb="0" cb="0"/><line nr="1646" mi="0" ci="3" mb="0" cb="2"/><line nr="1647" mi="0" ci="2" mb="0" cb="0"/><line nr="1648" mi="0" ci="3" mb="0" cb="2"/><line nr="1649" mi="0" ci="6" mb="0" cb="0"/><line nr="1651" mi="0" ci="8" mb="0" cb="0"/><line nr="1652" mi="0" ci="10" mb="0" cb="0"/><line nr="1660" mi="0" ci="14" mb="0" cb="2"/><line nr="1668" mi="0" ci="2" mb="0" cb="0"/><line nr="1669" mi="0" ci="6" mb="0" cb="0"/><line nr="1670" mi="0" ci="1" mb="0" cb="0"/><line nr="1674" mi="0" ci="10" mb="0" cb="2"/><line nr="1679" mi="0" ci="5" mb="0" cb="0"/><line nr="1681" mi="0" ci="7" mb="0" cb="0"/><line nr="1682" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="2441"/><counter type="BRANCH" missed="0" covered="218"/><counter type="LINE" missed="0" covered="435"/><counter type="COMPLEXITY" missed="0" covered="311"/><counter type="METHOD" missed="0" covered="202"/><counter type="CLASS" missed="0" covered="11"/></sourcefile><sourcefile name="Map.java"><line nr="32" mi="0" ci="6" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="4" mb="0" cb="0"/><line nr="171" mi="0" ci="16" mb="0" cb="0"/><line nr="177" mi="3" ci="0" mb="2" cb="0"/><line nr="178" mi="3" ci="0" mb="0" cb="0"/><line nr="180" mi="3" ci="0" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="8" ci="5" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="8" ci="5" mb="0" cb="0"/><line nr="203" mi="0" ci="19" mb="0" cb="0"/><line nr="245" mi="4" ci="0" mb="0" cb="0"/><line nr="246" mi="6" ci="0" mb="0" cb="0"/><line nr="266" mi="0" ci="3" mb="0" cb="0"/><line nr="281" mi="0" ci="4" mb="0" cb="0"/><line nr="283" mi="0" ci="6" mb="0" cb="0"/><line nr="351" mi="0" ci="8" mb="0" cb="0"/><line nr="374" mi="0" ci="4" mb="0" cb="0"/><line nr="375" mi="0" ci="8" mb="0" cb="0"/><line nr="381" mi="0" ci="4" mb="0" cb="0"/><line nr="382" mi="0" ci="9" mb="0" cb="0"/><line nr="387" mi="0" ci="4" mb="0" cb="0"/><line nr="388" mi="0" ci="6" mb="0" cb="0"/><line nr="393" mi="0" ci="4" mb="0" cb="0"/><line nr="394" mi="0" ci="8" mb="0" cb="0"/><line nr="399" mi="0" ci="5" mb="0" cb="0"/><line nr="409" mi="0" ci="4" mb="0" cb="0"/><line nr="410" mi="0" ci="10" mb="0" cb="2"/><line nr="411" mi="0" ci="6" mb="0" cb="0"/><line nr="412" mi="0" ci="1" mb="0" cb="0"/><line nr="413" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="35" covered="166"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="5" covered="28"/><counter type="COMPLEXITY" missed="5" covered="18"/><counter type="METHOD" missed="4" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Traversable.java"><line nr="184" mi="0" ci="2" mb="0" cb="0"/><line nr="185" mi="0" ci="9" mb="0" cb="2"/><line nr="186" mi="0" ci="7" mb="0" cb="0"/><line nr="187" mi="0" ci="1" mb="0" cb="0"/><line nr="188" mi="0" ci="2" mb="0" cb="0"/><line nr="211" mi="0" ci="3" mb="0" cb="2"/><line nr="212" mi="0" ci="2" mb="0" cb="0"/><line nr="214" mi="0" ci="8" mb="0" cb="2"/><line nr="215" mi="0" ci="3" mb="0" cb="0"/><line nr="217" mi="0" ci="9" mb="0" cb="6"/><line nr="218" mi="0" ci="1" mb="0" cb="0"/><line nr="219" mi="0" ci="2" mb="0" cb="0"/><line nr="220" mi="0" ci="1" mb="0" cb="0"/><line nr="221" mi="0" ci="1" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="0" ci="9" mb="0" cb="6"/><line nr="224" mi="0" ci="1" mb="0" cb="0"/><line nr="225" mi="0" ci="2" mb="0" cb="0"/><line nr="226" mi="0" ci="1" mb="0" cb="0"/><line nr="227" mi="0" ci="1" mb="0" cb="0"/><line nr="228" mi="0" ci="3" mb="0" cb="0"/><line nr="229" mi="0" ci="6" mb="0" cb="4"/><line nr="230" mi="0" ci="1" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="232" mi="0" ci="1" mb="0" cb="0"/><line nr="233" mi="0" ci="1" mb="0" cb="0"/><line nr="234" mi="0" ci="3" mb="0" cb="0"/><line nr="236" mi="0" ci="5" mb="0" cb="0"/><line nr="238" mi="0" ci="4" mb="0" cb="0"/><line nr="261" mi="0" ci="4" mb="0" cb="0"/><line nr="262" mi="0" ci="16" mb="0" cb="2"/><line nr="273" mi="0" ci="4" mb="0" cb="0"/><line nr="274" mi="0" ci="22" mb="0" cb="2"/><line nr="356" mi="0" ci="4" mb="0" cb="0"/><line nr="357" mi="0" ci="2" mb="0" cb="0"/><line nr="358" mi="0" ci="9" mb="0" cb="2"/><line nr="359" mi="0" ci="4" mb="0" cb="2"/><line nr="360" mi="0" ci="2" mb="0" cb="2"/><line nr="361" mi="0" ci="2" mb="0" cb="0"/><line nr="363" mi="0" ci="2" mb="0" cb="0"/><line nr="366" mi="0" ci="1" mb="0" cb="0"/><line nr="367" mi="0" ci="2" mb="0" cb="0"/><line nr="391" mi="0" ci="4" mb="0" cb="0"/><line nr="392" mi="0" ci="9" mb="0" cb="2"/><line nr="393" mi="0" ci="4" mb="0" cb="2"/><line nr="394" mi="0" ci="3" mb="0" cb="0"/><line nr="396" mi="0" ci="1" mb="0" cb="0"/><line nr="397" mi="0" ci="2" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="0" cb="0"/><line nr="411" mi="0" ci="5" mb="0" cb="0"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="443" mi="0" ci="2" mb="0" cb="0"/><line nr="444" mi="0" ci="9" mb="0" cb="2"/><line nr="445" mi="0" ci="5" mb="0" cb="0"/><line nr="446" mi="0" ci="1" mb="0" cb="0"/><line nr="447" mi="0" ci="2" mb="0" cb="0"/><line nr="467" mi="0" ci="4" mb="0" cb="0"/><line nr="565" mi="0" ci="2" mb="0" cb="0"/><line nr="584" mi="0" ci="2" mb="0" cb="0"/><line nr="585" mi="0" ci="14" mb="0" cb="0"/><line nr="587" mi="0" ci="5" mb="0" cb="0"/><line nr="591" mi="0" ci="8" mb="0" cb="2"/><line nr="596" mi="0" ci="4" mb="0" cb="0"/><line nr="597" mi="0" ci="5" mb="0" cb="0"/><line nr="598" mi="0" ci="2" mb="0" cb="0"/><line nr="610" mi="0" ci="3" mb="0" cb="2"/><line nr="611" mi="0" ci="5" mb="0" cb="0"/><line nr="613" mi="0" ci="3" mb="0" cb="0"/><line nr="614" mi="0" ci="2" mb="0" cb="0"/><line nr="615" mi="0" ci="3" mb="0" cb="2"/><line nr="616" mi="0" ci="4" mb="0" cb="0"/><line nr="618" mi="0" ci="2" mb="0" cb="0"/><line nr="628" mi="0" ci="9" mb="0" cb="2"/><line nr="661" mi="0" ci="4" mb="0" cb="0"/><line nr="662" mi="0" ci="7" mb="1" cb="3"/><line nr="663" mi="0" ci="2" mb="0" cb="0"/><line nr="665" mi="0" ci="9" mb="0" cb="0"/><line nr="677" mi="0" ci="4" mb="0" cb="0"/><line nr="678" mi="0" ci="3" mb="0" cb="2"/><line nr="679" mi="0" ci="2" mb="0" cb="0"/><line nr="681" mi="0" ci="14" mb="0" cb="2"/><line nr="682" mi="0" ci="3" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="3" mb="0" cb="2"/><line nr="697" mi="0" ci="2" mb="0" cb="0"/><line nr="699" mi="0" ci="3" mb="0" cb="0"/><line nr="700" mi="0" ci="3" mb="0" cb="0"/><line nr="701" mi="0" ci="5" mb="0" cb="0"/><line nr="702" mi="0" ci="3" mb="0" cb="2"/><line nr="703" mi="0" ci="3" mb="0" cb="0"/><line nr="704" mi="0" ci="5" mb="0" cb="0"/><line nr="705" mi="0" ci="4" mb="0" cb="2"/><line nr="706" mi="0" ci="2" mb="0" cb="0"/><line nr="707" mi="0" ci="2" mb="0" cb="0"/><line nr="709" mi="0" ci="1" mb="0" cb="0"/><line nr="710" mi="0" ci="3" mb="0" cb="0"/><line nr="721" mi="0" ci="4" mb="0" cb="0"/><line nr="722" mi="0" ci="7" mb="1" cb="3"/><line nr="723" mi="0" ci="2" mb="0" cb="0"/><line nr="725" mi="0" ci="9" mb="0" cb="0"/><line nr="737" mi="0" ci="4" mb="0" cb="0"/><line nr="738" mi="0" ci="3" mb="0" cb="2"/><line nr="739" mi="0" ci="2" mb="0" cb="0"/><line nr="741" mi="0" ci="14" mb="0" cb="2"/><line nr="742" mi="0" ci="3" mb="0" cb="0"/><line nr="755" mi="0" ci="4" mb="0" cb="0"/><line nr="756" mi="0" ci="3" mb="0" cb="2"/><line nr="757" mi="0" ci="2" mb="0" cb="0"/><line nr="759" mi="0" ci="3" mb="0" cb="0"/><line nr="760" mi="0" ci="3" mb="0" cb="0"/><line nr="761" mi="0" ci="5" mb="0" cb="0"/><line nr="762" mi="0" ci="3" mb="0" cb="2"/><line nr="763" mi="0" ci="3" mb="0" cb="0"/><line nr="764" mi="0" ci="5" mb="0" cb="0"/><line nr="765" mi="0" ci="4" mb="0" cb="2"/><line nr="766" mi="0" ci="2" mb="0" cb="0"/><line nr="767" mi="0" ci="2" mb="0" cb="0"/><line nr="769" mi="0" ci="1" mb="0" cb="0"/><line nr="770" mi="0" ci="3" mb="0" cb="0"/><line nr="782" mi="0" ci="6" mb="0" cb="0"/><line nr="794" mi="0" ci="6" mb="0" cb="0"/><line nr="808" mi="0" ci="5" mb="0" cb="0"/><line nr="809" mi="0" ci="13" mb="0" cb="0"/><line nr="810" mi="0" ci="5" mb="0" cb="0"/><line nr="845" mi="0" ci="3" mb="0" cb="2"/><line nr="846" mi="0" ci="3" mb="0" cb="0"/><line nr="848" mi="0" ci="8" mb="0" cb="2"/><line nr="849" mi="0" ci="3" mb="0" cb="0"/><line nr="850" mi="0" ci="9" mb="0" cb="6"/><line nr="851" mi="0" ci="9" mb="0" cb="0"/><line nr="852" mi="0" ci="4" mb="0" cb="0"/><line nr="853" mi="0" ci="9" mb="0" cb="6"/><line nr="854" mi="0" ci="9" mb="0" cb="0"/><line nr="855" mi="0" ci="4" mb="0" cb="0"/><line nr="856" mi="0" ci="6" mb="0" cb="4"/><line nr="857" mi="0" ci="9" mb="0" cb="0"/><line nr="858" mi="0" ci="4" mb="0" cb="0"/><line nr="860" mi="0" ci="5" mb="0" cb="0"/><line nr="875" mi="0" ci="4" mb="0" cb="0"/><line nr="876" mi="0" ci="3" mb="0" cb="2"/><line nr="877" mi="0" ci="5" mb="0" cb="0"/><line nr="879" mi="0" ci="7" mb="0" cb="0"/><line nr="893" mi="0" ci="4" mb="0" cb="0"/><line nr="894" mi="0" ci="3" mb="0" cb="2"/><line nr="895" mi="0" ci="5" mb="0" cb="0"/><line nr="897" mi="0" ci="5" mb="0" cb="0"/><line nr="983" mi="0" ci="3" mb="0" cb="0"/><line nr="1046" mi="0" ci="3" mb="0" cb="2"/><line nr="1047" mi="0" ci="3" mb="0" cb="0"/><line nr="1049" mi="0" ci="8" mb="0" cb="2"/><line nr="1050" mi="0" ci="3" mb="0" cb="0"/><line nr="1051" mi="0" ci="9" mb="0" cb="6"/><line nr="1052" mi="0" ci="7" mb="0" cb="0"/><line nr="1053" mi="0" ci="9" mb="0" cb="6"/><line nr="1054" mi="0" ci="7" mb="0" cb="0"/><line nr="1055" mi="0" ci="6" mb="0" cb="4"/><line nr="1056" mi="0" ci="7" mb="0" cb="0"/><line nr="1058" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="708"/><counter type="BRANCH" missed="2" covered="116"/><counter type="LINE" missed="0" covered="158"/><counter type="COMPLEXITY" missed="2" covered="96"/><counter type="METHOD" missed="0" covered="39"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="LinkedHashMap.java"><line nr="30" mi="0" ci="7" mb="0" cb="0"/><line nr="35" mi="0" ci="2" mb="0" cb="0"/><line nr="36" mi="0" ci="3" mb="0" cb="0"/><line nr="37" mi="0" ci="3" mb="0" cb="0"/><line nr="38" mi="0" ci="1" mb="0" cb="0"/><line nr="49" mi="0" ci="2" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="0" ci="2" mb="0" cb="0"/><line nr="52" mi="0" ci="4" mb="0" cb="0"/><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="8" mb="0" cb="0"/><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="74" mi="0" ci="3" mb="0" cb="0"/><line nr="75" mi="0" ci="3" mb="0" cb="0"/><line nr="76" mi="0" ci="6" mb="0" cb="0"/><line nr="89" mi="0" ci="4" mb="0" cb="0"/><line nr="90" mi="0" ci="5" mb="0" cb="2"/><line nr="91" mi="0" ci="5" mb="0" cb="0"/><line nr="93" mi="0" ci="2" mb="0" cb="0"/><line nr="94" mi="0" ci="2" mb="0" cb="0"/><line nr="95" mi="0" ci="8" mb="0" cb="2"/><line nr="96" mi="0" ci="4" mb="0" cb="0"/><line nr="97" mi="0" ci="6" mb="0" cb="0"/><line nr="98" mi="0" ci="5" mb="0" cb="0"/><line nr="99" mi="0" ci="6" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="4" mb="0" cb="0"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="11" mb="0" cb="2"/><line nr="116" mi="0" ci="7" mb="0" cb="0"/><line nr="117" mi="0" ci="1" mb="0" cb="0"/><line nr="118" mi="0" ci="2" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="5" mb="0" cb="0"/><line nr="133" mi="0" ci="6" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="5" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="5" mb="0" cb="0"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="2" mb="0" cb="0"/><line nr="181" mi="0" ci="16" mb="0" cb="2"/><line nr="182" mi="0" ci="6" mb="0" cb="0"/><line nr="183" mi="0" ci="4" mb="0" cb="0"/><line nr="184" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="199" mi="0" ci="3" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="201" mi="0" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="3" mb="0" cb="2"/><line nr="216" mi="0" ci="3" mb="0" cb="0"/><line nr="218" mi="0" ci="2" mb="0" cb="0"/><line nr="219" mi="0" ci="2" mb="0" cb="0"/><line nr="220" mi="0" ci="10" mb="0" cb="2"/><line nr="221" mi="0" ci="4" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="0" cb="0"/><line nr="223" mi="0" ci="1" mb="0" cb="0"/><line nr="224" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="4" ci="0" mb="0" cb="0"/><line nr="231" mi="4" ci="0" mb="0" cb="0"/><line nr="232" mi="17" ci="0" mb="0" cb="0"/><line nr="233" mi="3" ci="0" mb="0" cb="0"/><line nr="238" mi="0" ci="2" mb="0" cb="0"/><line nr="243" mi="0" ci="5" mb="0" cb="0"/><line nr="248" mi="0" ci="5" mb="0" cb="0"/><line nr="253" mi="0" ci="5" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="263" mi="0" ci="4" mb="0" cb="0"/><line nr="264" mi="0" ci="6" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="0" ci="6" mb="0" cb="0"/><line nr="275" mi="0" ci="2" mb="0" cb="2"/><line nr="276" mi="0" ci="2" mb="0" cb="0"/><line nr="278" mi="0" ci="4" mb="0" cb="2"/><line nr="279" mi="0" ci="2" mb="0" cb="0"/><line nr="281" mi="0" ci="6" mb="0" cb="0"/><line nr="286" mi="0" ci="2" mb="0" cb="2"/><line nr="287" mi="0" ci="2" mb="0" cb="0"/><line nr="289" mi="0" ci="4" mb="0" cb="2"/><line nr="290" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="6" mb="0" cb="0"/><line nr="297" mi="0" ci="4" mb="0" cb="0"/><line nr="298" mi="0" ci="5" mb="0" cb="0"/><line nr="303" mi="0" ci="4" mb="0" cb="0"/><line nr="304" mi="0" ci="6" mb="0" cb="0"/><line nr="309" mi="0" ci="4" mb="0" cb="0"/><line nr="310" mi="0" ci="6" mb="0" cb="0"/><line nr="315" mi="0" ci="4" mb="0" cb="0"/><line nr="316" mi="0" ci="5" mb="0" cb="0"/><line nr="321" mi="0" ci="4" mb="0" cb="0"/><line nr="322" mi="0" ci="7" mb="0" cb="0"/><line nr="323" mi="0" ci="16" mb="0" cb="2"/><line nr="324" mi="0" ci="4" mb="0" cb="0"/><line nr="325" mi="0" ci="1" mb="0" cb="0"/><line nr="326" mi="0" ci="2" mb="0" cb="0"/><line nr="332" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="6" mb="0" cb="0"/><line nr="338" mi="0" ci="5" mb="0" cb="0"/><line nr="343" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="7" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="346" mi="0" ci="2" mb="0" cb="0"/><line nr="347" mi="0" ci="3" mb="0" cb="0"/><line nr="348" mi="0" ci="6" mb="0" cb="0"/><line nr="349" mi="0" ci="4" mb="0" cb="0"/><line nr="350" mi="0" ci="5" mb="0" cb="0"/><line nr="356" mi="0" ci="5" mb="0" cb="0"/><line nr="361" mi="0" ci="2" mb="0" cb="0"/><line nr="366" mi="0" ci="5" mb="0" cb="0"/><line nr="371" mi="0" ci="4" mb="0" cb="0"/><line nr="376" mi="0" ci="3" mb="0" cb="2"/><line nr="377" mi="0" ci="5" mb="0" cb="0"/><line nr="379" mi="0" ci="5" mb="0" cb="0"/><line nr="385" mi="0" ci="3" mb="0" cb="2"/><line nr="386" mi="0" ci="2" mb="0" cb="0"/><line nr="388" mi="0" ci="4" mb="0" cb="0"/><line nr="394" mi="0" ci="4" mb="0" cb="0"/><line nr="399" mi="0" ci="2" mb="0" cb="0"/><line nr="404" mi="0" ci="4" mb="0" cb="0"/><line nr="409" mi="0" ci="4" mb="0" cb="0"/><line nr="414" mi="0" ci="4" mb="0" cb="0"/><line nr="415" mi="0" ci="13" mb="0" cb="0"/><line nr="420" mi="0" ci="4" mb="0" cb="0"/><line nr="421" mi="0" ci="11" mb="0" cb="0"/><line nr="426" mi="3" ci="0" mb="0" cb="0"/><line nr="431" mi="0" ci="6" mb="0" cb="0"/><line nr="436" mi="0" ci="7" mb="0" cb="0"/><line nr="441" mi="0" ci="4" mb="0" cb="0"/><line nr="442" mi="0" ci="5" mb="0" cb="0"/><line nr="443" mi="0" ci="10" mb="0" cb="0"/><line nr="448" mi="0" ci="4" mb="0" cb="0"/><line nr="449" mi="0" ci="3" mb="0" cb="2"/><line nr="450" mi="0" ci="5" mb="0" cb="0"/><line nr="452" mi="0" ci="2" mb="0" cb="0"/><line nr="457" mi="0" ci="3" mb="0" cb="0"/><line nr="458" mi="0" ci="3" mb="0" cb="0"/><line nr="459" mi="0" ci="4" mb="0" cb="2"/><line nr="460" mi="0" ci="14" mb="0" cb="2"/><line nr="461" mi="0" ci="4" mb="0" cb="0"/><line nr="463" mi="0" ci="6" mb="0" cb="0"/><line nr="464" mi="0" ci="5" mb="0" cb="0"/><line nr="465" mi="0" ci="6" mb="0" cb="0"/><line nr="470" mi="0" ci="7" mb="0" cb="0"/><line nr="475" mi="0" ci="4" mb="0" cb="2"/><line nr="476" mi="0" ci="11" mb="0" cb="0"/><line nr="477" mi="0" ci="5" mb="0" cb="0"/><line nr="478" mi="0" ci="4" mb="0" cb="0"/><line nr="480" mi="0" ci="2" mb="0" cb="0"/><line nr="486" mi="0" ci="4" mb="0" cb="0"/><line nr="487" mi="0" ci="3" mb="0" cb="0"/><line nr="488" mi="0" ci="15" mb="0" cb="2"/><line nr="489" mi="0" ci="15" mb="0" cb="2"/><line nr="490" mi="0" ci="11" mb="0" cb="2"/><line nr="495" mi="0" ci="4" mb="0" cb="0"/><line nr="496" mi="0" ci="4" mb="0" cb="0"/><line nr="497" mi="1" ci="13" mb="1" cb="1"/><line nr="502" mi="0" ci="5" mb="0" cb="0"/><line nr="507" mi="0" ci="4" mb="0" cb="0"/><line nr="508" mi="0" ci="2" mb="0" cb="0"/><line nr="509" mi="0" ci="10" mb="0" cb="2"/><line nr="510" mi="0" ci="4" mb="1" cb="1"/><line nr="511" mi="0" ci="7" mb="0" cb="0"/><line nr="513" mi="0" ci="1" mb="0" cb="0"/><line nr="514" mi="0" ci="2" mb="0" cb="0"/><line nr="519" mi="0" ci="4" mb="0" cb="0"/><line nr="520" mi="0" ci="9" mb="0" cb="0"/><line nr="525" mi="0" ci="4" mb="0" cb="0"/><line nr="526" mi="0" ci="9" mb="0" cb="0"/><line nr="531" mi="0" ci="4" mb="0" cb="0"/><line nr="532" mi="0" ci="9" mb="0" cb="0"/><line nr="537" mi="0" ci="4" mb="0" cb="0"/><line nr="542" mi="0" ci="5" mb="0" cb="0"/><line nr="547" mi="0" ci="8" mb="0" cb="0"/><line nr="552" mi="0" ci="4" mb="0" cb="0"/><line nr="553" mi="0" ci="5" mb="0" cb="0"/><line nr="554" mi="0" ci="10" mb="0" cb="0"/><line nr="559" mi="0" ci="3" mb="0" cb="2"/><line nr="560" mi="0" ci="5" mb="0" cb="0"/><line nr="562" mi="0" ci="5" mb="0" cb="0"/><line nr="568" mi="0" ci="3" mb="0" cb="2"/><line nr="569" mi="0" ci="2" mb="0" cb="0"/><line nr="571" mi="0" ci="4" mb="0" cb="0"/><line nr="577" mi="0" ci="4" mb="0" cb="2"/><line nr="578" mi="0" ci="2" mb="0" cb="0"/><line nr="580" mi="0" ci="6" mb="0" cb="0"/><line nr="586" mi="0" ci="4" mb="0" cb="2"/><line nr="587" mi="0" ci="2" mb="0" cb="0"/><line nr="589" mi="0" ci="6" mb="0" cb="0"/><line nr="595" mi="0" ci="4" mb="0" cb="0"/><line nr="596" mi="0" ci="6" mb="0" cb="0"/><line nr="597" mi="0" ci="9" mb="0" cb="2"/><line nr="602" mi="0" ci="4" mb="0" cb="0"/><line nr="603" mi="0" ci="6" mb="0" cb="0"/><line nr="604" mi="0" ci="9" mb="0" cb="2"/><line nr="609" mi="0" ci="4" mb="0" cb="0"/><line nr="614" mi="0" ci="3" mb="0" cb="2"/><line nr="615" mi="0" ci="2" mb="0" cb="0"/><line nr="616" mi="0" ci="3" mb="1" cb="1"/><line nr="617" mi="0" ci="3" mb="0" cb="0"/><line nr="618" mi="0" ci="6" mb="0" cb="0"/><line nr="620" mi="2" ci="0" mb="0" cb="0"/><line nr="626" mi="0" ci="4" mb="0" cb="0"/><line nr="630" mi="0" ci="7" mb="0" cb="2"/><line nr="635" mi="0" ci="2" mb="0" cb="0"/><line nr="640" mi="0" ci="14" mb="0" cb="0"/><line nr="644" mi="0" ci="11" mb="0" cb="2"/><counter type="INSTRUCTION" missed="34" covered="972"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="6" covered="202"/><counter type="COMPLEXITY" missed="6" covered="113"/><counter type="METHOD" missed="3" covered="83"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="LinearSeq.java"><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="2" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="2"/><line nr="101" mi="0" ci="5" mb="0" cb="2"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="1" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="127" mi="0" ci="7" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="134" mi="0" ci="2" mb="0" cb="0"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="6" mb="0" cb="4"/><line nr="137" mi="0" ci="5" mb="0" cb="2"/><line nr="138" mi="0" ci="2" mb="0" cb="0"/><line nr="140" mi="0" ci="3" mb="0" cb="0"/><line nr="141" mi="0" ci="2" mb="0" cb="0"/><line nr="143" mi="0" ci="2" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="0" ci="4" mb="0" cb="0"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="221" mi="0" ci="4" mb="0" cb="0"/><line nr="222" mi="0" ci="8" mb="0" cb="4"/><line nr="223" mi="0" ci="1" mb="0" cb="0"/><line nr="224" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="2" mb="0" cb="0"/><line nr="300" mi="0" ci="2" mb="0" cb="2"/><line nr="301" mi="0" ci="2" mb="0" cb="0"/><line nr="303" mi="0" ci="3" mb="0" cb="2"/><line nr="304" mi="0" ci="7" mb="0" cb="2"/><line nr="306" mi="0" ci="3" mb="0" cb="2"/><line nr="307" mi="0" ci="3" mb="0" cb="0"/><line nr="308" mi="0" ci="7" mb="0" cb="2"/><line nr="310" mi="0" ci="2" mb="0" cb="0"/><line nr="311" mi="0" ci="2" mb="0" cb="0"/><line nr="312" mi="0" ci="5" mb="0" cb="2"/><line nr="313" mi="0" ci="4" mb="0" cb="0"/><line nr="314" mi="0" ci="2" mb="0" cb="2"/><line nr="315" mi="0" ci="2" mb="0" cb="0"/><line nr="317" mi="0" ci="8" mb="0" cb="2"/><line nr="318" mi="0" ci="7" mb="0" cb="0"/><line nr="319" mi="0" ci="9" mb="0" cb="0"/><line nr="320" mi="0" ci="6" mb="0" cb="0"/><line nr="322" mi="0" ci="2" mb="0" cb="0"/><line nr="324" mi="0" ci="1" mb="0" cb="0"/><line nr="325" mi="0" ci="2" mb="0" cb="0"/><line nr="329" mi="0" ci="2" mb="0" cb="0"/><line nr="330" mi="0" ci="5" mb="0" cb="2"/><line nr="331" mi="0" ci="4" mb="0" cb="2"/><line nr="332" mi="0" ci="5" mb="0" cb="0"/><line nr="334" mi="0" ci="1" mb="0" cb="0"/><line nr="335" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="195"/><counter type="BRANCH" missed="0" covered="34"/><counter type="LINE" missed="0" covered="55"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Vector.java"><line nr="30" mi="0" ci="6" mb="0" cb="0"/><line nr="34" mi="0" ci="9" mb="0" cb="0"/><line nr="37" mi="0" ci="4" mb="0" cb="0"/><line nr="38" mi="0" ci="1" mb="0" cb="0"/><line nr="40" mi="0" ci="2" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="65" mi="0" ci="2" mb="0" cb="0"/><line nr="66" mi="0" ci="2" mb="0" cb="0"/><line nr="67" mi="0" ci="4" mb="0" cb="0"/><line nr="68" mi="0" ci="2" mb="0" cb="0"/><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="71" mi="0" ci="8" mb="0" cb="0"/><line nr="82" mi="0" ci="9" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="16" mb="0" cb="2"/><line nr="98" mi="0" ci="7" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="0"/><line nr="114" mi="0" ci="4" mb="0" cb="0"/><line nr="115" mi="0" ci="7" mb="0" cb="0"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="0" ci="7" mb="0" cb="0"/><line nr="145" mi="0" ci="4" mb="0" cb="0"/><line nr="146" mi="0" ci="3" mb="0" cb="2"/><line nr="147" mi="0" ci="3" mb="0" cb="0"/><line nr="149" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="9" mb="0" cb="2"/><line nr="151" mi="0" ci="7" mb="0" cb="0"/><line nr="152" mi="0" ci="1" mb="0" cb="0"/><line nr="153" mi="0" ci="3" mb="0" cb="0"/><line nr="164" mi="0" ci="4" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="4" mb="0" cb="0"/><line nr="198" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="4" mb="0" cb="0"/><line nr="209" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="0" ci="4" mb="0" cb="0"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="242" mi="0" ci="4" mb="0" cb="0"/><line nr="246" mi="0" ci="5" mb="0" cb="0"/><line nr="250" mi="0" ci="6" mb="0" cb="0"/><line nr="254" mi="0" ci="6" mb="0" cb="0"/><line nr="274" mi="0" ci="5" mb="0" cb="0"/><line nr="300" mi="0" ci="6" mb="0" cb="0"/><line nr="320" mi="0" ci="5" mb="0" cb="0"/><line nr="346" mi="0" ci="6" mb="0" cb="0"/><line nr="350" mi="0" ci="5" mb="0" cb="0"/><line nr="354" mi="0" ci="6" mb="0" cb="0"/><line nr="358" mi="0" ci="6" mb="0" cb="0"/><line nr="378" mi="0" ci="5" mb="0" cb="0"/><line nr="404" mi="0" ci="6" mb="0" cb="0"/><line nr="424" mi="0" ci="5" mb="0" cb="0"/><line nr="450" mi="0" ci="6" mb="0" cb="0"/><line nr="455" mi="0" ci="16" mb="0" cb="0"/><line nr="460" mi="0" ci="3" mb="0" cb="0"/><line nr="461" mi="0" ci="9" mb="0" cb="2"/><line nr="462" mi="0" ci="10" mb="0" cb="0"/><line nr="463" mi="0" ci="1" mb="0" cb="0"/><line nr="464" mi="0" ci="7" mb="0" cb="0"/><line nr="469" mi="0" ci="2" mb="0" cb="0"/><line nr="474" mi="0" ci="10" mb="0" cb="0"/><line nr="479" mi="0" ci="6" mb="0" cb="0"/><line nr="484" mi="0" ci="4" mb="0" cb="0"/><line nr="489" mi="0" ci="7" mb="0" cb="0"/><line nr="494" mi="0" ci="4" mb="0" cb="0"/><line nr="495" mi="0" ci="3" mb="0" cb="0"/><line nr="496" mi="0" ci="14" mb="0" cb="0"/><line nr="501" mi="0" ci="4" mb="0" cb="0"/><line nr="506" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="5" mb="0" cb="0"/><line nr="508" mi="0" ci="8" mb="0" cb="0"/><line nr="513" mi="0" ci="4" mb="0" cb="0"/><line nr="514" mi="0" ci="4" mb="0" cb="0"/><line nr="515" mi="0" ci="12" mb="0" cb="0"/><line nr="520" mi="0" ci="2" mb="0" cb="2"/><line nr="521" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="4" mb="0" cb="2"/><line nr="524" mi="0" ci="2" mb="0" cb="0"/><line nr="526" mi="0" ci="2" mb="0" cb="0"/><line nr="527" mi="0" ci="8" mb="0" cb="2"/><line nr="528" mi="0" ci="10" mb="0" cb="0"/><line nr="530" mi="0" ci="3" mb="0" cb="0"/><line nr="535" mi="0" ci="2" mb="0" cb="2"/><line nr="536" mi="0" ci="2" mb="0" cb="0"/><line nr="538" mi="0" ci="4" mb="0" cb="2"/><line nr="539" mi="0" ci="2" mb="0" cb="0"/><line nr="541" mi="0" ci="2" mb="0" cb="0"/><line nr="542" mi="0" ci="10" mb="0" cb="2"/><line nr="543" mi="0" ci="9" mb="0" cb="0"/><line nr="545" mi="0" ci="3" mb="0" cb="0"/><line nr="550" mi="0" ci="4" mb="0" cb="0"/><line nr="551" mi="0" ci="5" mb="0" cb="0"/><line nr="556" mi="0" ci="4" mb="0" cb="0"/><line nr="557" mi="0" ci="8" mb="0" cb="2"/><line nr="558" mi="0" ci="6" mb="0" cb="2"/><line nr="559" mi="0" ci="4" mb="0" cb="0"/><line nr="562" mi="0" ci="2" mb="0" cb="0"/><line nr="567" mi="0" ci="4" mb="0" cb="0"/><line nr="568" mi="0" ci="2" mb="0" cb="0"/><line nr="569" mi="0" ci="9" mb="0" cb="2"/><line nr="570" mi="0" ci="4" mb="0" cb="2"/><line nr="571" mi="0" ci="7" mb="0" cb="0"/><line nr="573" mi="0" ci="1" mb="0" cb="0"/><line nr="574" mi="0" ci="5" mb="0" cb="2"/><line nr="575" mi="0" ci="2" mb="0" cb="0"/><line nr="577" mi="0" ci="3" mb="0" cb="0"/><line nr="583" mi="0" ci="4" mb="0" cb="0"/><line nr="584" mi="0" ci="5" mb="0" cb="0"/><line nr="589" mi="0" ci="4" mb="0" cb="0"/><line nr="590" mi="0" ci="3" mb="0" cb="2"/><line nr="591" mi="0" ci="2" mb="0" cb="0"/><line nr="593" mi="0" ci="2" mb="0" cb="0"/><line nr="594" mi="0" ci="8" mb="0" cb="2"/><line nr="595" mi="0" ci="14" mb="0" cb="2"/><line nr="596" mi="0" ci="7" mb="0" cb="0"/><line nr="597" mi="0" ci="1" mb="0" cb="0"/><line nr="599" mi="0" ci="3" mb="0" cb="0"/><line nr="605" mi="0" ci="6" mb="0" cb="4"/><line nr="606" mi="0" ci="14" mb="0" cb="0"/><line nr="608" mi="0" ci="10" mb="0" cb="0"/><line nr="613" mi="0" ci="3" mb="0" cb="2"/><line nr="614" mi="0" ci="5" mb="0" cb="0"/><line nr="616" mi="0" ci="4" mb="0" cb="0"/><line nr="622" mi="0" ci="3" mb="0" cb="2"/><line nr="623" mi="0" ci="2" mb="0" cb="0"/><line nr="625" mi="0" ci="5" mb="0" cb="0"/><line nr="631" mi="0" ci="4" mb="0" cb="0"/><line nr="632" mi="0" ci="12" mb="0" cb="0"/><line nr="637" mi="0" ci="5" mb="0" cb="0"/><line nr="642" mi="0" ci="2" mb="0" cb="0"/><line nr="647" mi="0" ci="8" mb="0" cb="2"/><line nr="648" mi="0" ci="6" mb="0" cb="2"/><line nr="649" mi="0" ci="2" mb="0" cb="0"/><line nr="652" mi="0" ci="2" mb="0" cb="0"/><line nr="657" mi="0" ci="3" mb="0" cb="2"/><line nr="658" mi="0" ci="5" mb="0" cb="0"/><line nr="660" mi="0" ci="17" mb="0" cb="0"/><line nr="665" mi="0" ci="3" mb="0" cb="2"/><line nr="666" mi="0" ci="2" mb="0" cb="0"/><line nr="668" mi="0" ci="4" mb="0" cb="0"/><line nr="674" mi="0" ci="2" mb="0" cb="2"/><line nr="675" mi="0" ci="14" mb="0" cb="0"/><line nr="677" mi="0" ci="4" mb="0" cb="2"/><line nr="678" mi="0" ci="17" mb="0" cb="0"/><line nr="680" mi="0" ci="2" mb="0" cb="0"/><line nr="681" mi="0" ci="8" mb="0" cb="2"/><line nr="682" mi="0" ci="3" mb="0" cb="2"/><line nr="683" mi="0" ci="7" mb="0" cb="0"/><line nr="685" mi="0" ci="4" mb="0" cb="2"/><line nr="686" mi="0" ci="9" mb="0" cb="0"/><line nr="689" mi="0" ci="5" mb="0" cb="0"/><line nr="694" mi="0" ci="2" mb="0" cb="2"/><line nr="695" mi="0" ci="14" mb="0" cb="0"/><line nr="697" mi="0" ci="4" mb="0" cb="2"/><line nr="698" mi="0" ci="17" mb="0" cb="0"/><line nr="700" mi="0" ci="2" mb="0" cb="0"/><line nr="701" mi="0" ci="8" mb="0" cb="2"/><line nr="702" mi="0" ci="3" mb="0" cb="2"/><line nr="703" mi="0" ci="9" mb="0" cb="2"/><line nr="704" mi="0" ci="7" mb="0" cb="0"/><line nr="705" mi="0" ci="1" mb="0" cb="0"/><line nr="707" mi="0" ci="4" mb="0" cb="2"/><line nr="708" mi="0" ci="9" mb="0" cb="0"/><line nr="711" mi="0" ci="5" mb="0" cb="0"/><line nr="716" mi="0" ci="2" mb="0" cb="0"/><line nr="717" mi="0" ci="8" mb="0" cb="2"/><line nr="718" mi="0" ci="2" mb="0" cb="2"/><line nr="719" mi="0" ci="7" mb="0" cb="0"/><line nr="721" mi="0" ci="9" mb="0" cb="0"/><line nr="723" mi="0" ci="3" mb="0" cb="0"/><line nr="728" mi="0" ci="4" mb="0" cb="0"/><line nr="733" mi="0" ci="2" mb="0" cb="0"/><line nr="738" mi="0" ci="10" mb="0" cb="0"/><line nr="739" mi="0" ci="5" mb="0" cb="0"/><line nr="740" mi="0" ci="11" mb="0" cb="0"/><line nr="744" mi="0" ci="9" mb="0" cb="2"/><line nr="749" mi="0" ci="14" mb="0" cb="0"/><line nr="756" mi="0" ci="11" mb="0" cb="2"/><line nr="757" mi="0" ci="6" mb="0" cb="2"/><line nr="758" mi="0" ci="2" mb="0" cb="0"/><line nr="761" mi="0" ci="2" mb="0" cb="0"/><line nr="766" mi="0" ci="4" mb="0" cb="0"/><line nr="771" mi="0" ci="4" mb="0" cb="0"/><line nr="772" mi="0" ci="2" mb="0" cb="0"/><line nr="773" mi="0" ci="8" mb="0" cb="2"/><line nr="774" mi="0" ci="10" mb="0" cb="0"/><line nr="776" mi="0" ci="3" mb="0" cb="0"/><line nr="781" mi="0" ci="3" mb="0" cb="0"/><line nr="786" mi="0" ci="4" mb="0" cb="2"/><line nr="787" mi="0" ci="2" mb="0" cb="0"/><line nr="789" mi="0" ci="13" mb="0" cb="0"/><line nr="795" mi="0" ci="6" mb="0" cb="2"/><line nr="796" mi="0" ci="6" mb="0" cb="2"/><line nr="797" mi="0" ci="6" mb="0" cb="0"/><line nr="798" mi="0" ci="4" mb="0" cb="0"/><line nr="799" mi="0" ci="6" mb="0" cb="0"/><line nr="800" mi="0" ci="2" mb="0" cb="0"/><line nr="805" mi="0" ci="4" mb="0" cb="0"/><line nr="806" mi="0" ci="8" mb="0" cb="0"/><line nr="807" mi="0" ci="8" mb="0" cb="2"/><line nr="808" mi="0" ci="4" mb="0" cb="0"/><line nr="809" mi="0" ci="10" mb="0" cb="2"/><line nr="811" mi="0" ci="6" mb="0" cb="0"/><line nr="816" mi="0" ci="4" mb="0" cb="0"/><line nr="817" mi="0" ci="3" mb="0" cb="2"/><line nr="818" mi="0" ci="4" mb="0" cb="0"/><line nr="820" mi="0" ci="2" mb="0" cb="0"/><line nr="825" mi="0" ci="3" mb="0" cb="2"/><line nr="826" mi="0" ci="2" mb="0" cb="0"/><line nr="828" mi="0" ci="3" mb="0" cb="0"/><line nr="829" mi="0" ci="3" mb="0" cb="2"/><line nr="830" mi="0" ci="3" mb="0" cb="0"/><line nr="832" mi="0" ci="2" mb="0" cb="0"/><line nr="833" mi="0" ci="8" mb="0" cb="0"/><line nr="834" mi="0" ci="7" mb="0" cb="0"/><line nr="835" mi="0" ci="9" mb="0" cb="0"/><line nr="843" mi="0" ci="5" mb="0" cb="0"/><line nr="844" mi="0" ci="11" mb="0" cb="0"/><line nr="849" mi="0" ci="3" mb="0" cb="0"/><line nr="850" mi="0" ci="6" mb="0" cb="0"/><line nr="851" mi="0" ci="3" mb="0" cb="0"/><line nr="852" mi="0" ci="7" mb="0" cb="2"/><line nr="853" mi="0" ci="7" mb="0" cb="0"/><line nr="854" mi="0" ci="3" mb="0" cb="0"/><line nr="856" mi="0" ci="6" mb="0" cb="0"/><line nr="861" mi="0" ci="2" mb="0" cb="0"/><line nr="862" mi="0" ci="2" mb="0" cb="0"/><line nr="863" mi="0" ci="8" mb="0" cb="2"/><line nr="864" mi="0" ci="4" mb="0" cb="0"/><line nr="865" mi="0" ci="2" mb="0" cb="2"/><line nr="866" mi="0" ci="8" mb="0" cb="0"/><line nr="868" mi="0" ci="4" mb="0" cb="2"/><line nr="869" mi="0" ci="3" mb="0" cb="0"/><line nr="871" mi="0" ci="7" mb="0" cb="0"/><line nr="875" mi="0" ci="10" mb="0" cb="2"/><line nr="880" mi="0" ci="4" mb="0" cb="0"/><line nr="881" mi="0" ci="2" mb="0" cb="0"/><line nr="882" mi="0" ci="2" mb="0" cb="0"/><line nr="883" mi="0" ci="8" mb="0" cb="2"/><line nr="884" mi="0" ci="4" mb="0" cb="0"/><line nr="885" mi="0" ci="2" mb="0" cb="2"/><line nr="886" mi="0" ci="8" mb="0" cb="0"/><line nr="888" mi="0" ci="4" mb="0" cb="2"/><line nr="889" mi="0" ci="3" mb="0" cb="0"/><line nr="891" mi="0" ci="7" mb="0" cb="0"/><line nr="895" mi="0" ci="10" mb="0" cb="2"/><line nr="900" mi="0" ci="4" mb="0" cb="0"/><line nr="901" mi="0" ci="9" mb="0" cb="2"/><line nr="902" mi="0" ci="6" mb="0" cb="2"/><line nr="903" mi="0" ci="4" mb="0" cb="0"/><line nr="906" mi="0" ci="2" mb="0" cb="0"/><line nr="911" mi="0" ci="2" mb="0" cb="2"/><line nr="912" mi="0" ci="14" mb="0" cb="0"/><line nr="914" mi="0" ci="4" mb="0" cb="2"/><line nr="915" mi="0" ci="14" mb="0" cb="0"/><line nr="917" mi="0" ci="2" mb="0" cb="0"/><line nr="918" mi="0" ci="8" mb="0" cb="2"/><line nr="919" mi="0" ci="3" mb="0" cb="2"/><line nr="920" mi="0" ci="9" mb="0" cb="0"/><line nr="923" mi="0" ci="3" mb="0" cb="0"/><line nr="928" mi="0" ci="2" mb="0" cb="0"/><line nr="929" mi="0" ci="8" mb="0" cb="2"/><line nr="930" mi="0" ci="4" mb="0" cb="0"/><line nr="931" mi="0" ci="4" mb="0" cb="2"/><line nr="932" mi="0" ci="7" mb="0" cb="0"/><line nr="935" mi="0" ci="10" mb="0" cb="2"/><line nr="941" mi="0" ci="4" mb="0" cb="0"/><line nr="942" mi="0" ci="2" mb="0" cb="0"/><line nr="943" mi="0" ci="9" mb="0" cb="2"/><line nr="944" mi="0" ci="5" mb="0" cb="0"/><line nr="945" mi="0" ci="1" mb="0" cb="0"/><line nr="946" mi="0" ci="2" mb="0" cb="0"/><line nr="947" mi="0" ci="2" mb="0" cb="0"/><line nr="948" mi="0" ci="8" mb="0" cb="2"/><line nr="949" mi="0" ci="4" mb="0" cb="0"/><line nr="950" mi="0" ci="5" mb="0" cb="2"/><line nr="951" mi="0" ci="3" mb="0" cb="0"/><line nr="953" mi="0" ci="7" mb="0" cb="0"/><line nr="956" mi="0" ci="7" mb="0" cb="2"/><line nr="961" mi="0" ci="2" mb="0" cb="0"/><line nr="962" mi="0" ci="2" mb="0" cb="0"/><line nr="963" mi="0" ci="8" mb="0" cb="2"/><line nr="964" mi="0" ci="4" mb="0" cb="0"/><line nr="965" mi="0" ci="2" mb="0" cb="2"/><line nr="966" mi="0" ci="8" mb="0" cb="0"/><line nr="968" mi="0" ci="4" mb="0" cb="2"/><line nr="969" mi="0" ci="7" mb="0" cb="0"/><line nr="970" mi="0" ci="3" mb="0" cb="0"/><line nr="972" mi="0" ci="7" mb="0" cb="0"/><line nr="976" mi="0" ci="9" mb="0" cb="2"/><line nr="981" mi="0" ci="2" mb="0" cb="0"/><line nr="982" mi="0" ci="2" mb="0" cb="0"/><line nr="983" mi="0" ci="8" mb="0" cb="2"/><line nr="984" mi="0" ci="4" mb="0" cb="0"/><line nr="985" mi="0" ci="4" mb="0" cb="2"/><line nr="986" mi="0" ci="7" mb="0" cb="0"/><line nr="987" mi="0" ci="3" mb="0" cb="0"/><line nr="989" mi="0" ci="7" mb="0" cb="0"/><line nr="992" mi="0" ci="7" mb="0" cb="2"/><line nr="998" mi="0" ci="4" mb="0" cb="0"/><line nr="1000" mi="0" ci="5" mb="0" cb="0"/><line nr="1001" mi="0" ci="2" mb="0" cb="0"/><line nr="1002" mi="0" ci="9" mb="0" cb="2"/><line nr="1003" mi="0" ci="4" mb="0" cb="2"/><line nr="1004" mi="0" ci="7" mb="0" cb="0"/><line nr="1006" mi="0" ci="1" mb="0" cb="0"/><line nr="1007" mi="0" ci="11" mb="0" cb="2"/><line nr="1012" mi="0" ci="2" mb="0" cb="0"/><line nr="1013" mi="0" ci="8" mb="0" cb="2"/><line nr="1014" mi="0" ci="13" mb="0" cb="0"/><line nr="1016" mi="0" ci="10" mb="0" cb="2"/><line nr="1021" mi="0" ci="5" mb="0" cb="0"/><line nr="1026" mi="0" ci="4" mb="0" cb="0"/><line nr="1027" mi="0" ci="9" mb="0" cb="0"/><line nr="1032" mi="0" ci="4" mb="0" cb="0"/><line nr="1033" mi="0" ci="9" mb="0" cb="0"/><line nr="1038" mi="0" ci="10" mb="0" cb="6"/><line nr="1039" mi="0" ci="2" mb="0" cb="0"/><line nr="1041" mi="0" ci="6" mb="0" cb="4"/><line nr="1042" mi="0" ci="2" mb="0" cb="0"/><line nr="1044" mi="0" ci="4" mb="0" cb="0"/><line nr="1045" mi="0" ci="5" mb="0" cb="0"/><line nr="1046" mi="0" ci="2" mb="0" cb="0"/><line nr="1047" mi="0" ci="7" mb="0" cb="2"/><line nr="1048" mi="0" ci="9" mb="0" cb="0"/><line nr="1050" mi="0" ci="3" mb="0" cb="0"/><line nr="1055" mi="0" ci="5" mb="0" cb="0"/><line nr="1060" mi="0" ci="8" mb="0" cb="0"/><line nr="1065" mi="0" ci="12" mb="0" cb="2"/><line nr="1070" mi="0" ci="4" mb="0" cb="0"/><line nr="1071" mi="0" ci="13" mb="0" cb="2"/><line nr="1076" mi="0" ci="5" mb="0" cb="0"/><line nr="1081" mi="0" ci="8" mb="0" cb="0"/><line nr="1082" mi="0" ci="6" mb="0" cb="0"/><line nr="1083" mi="0" ci="10" mb="0" cb="0"/><line nr="1084" mi="0" ci="3" mb="0" cb="0"/><line nr="1089" mi="0" ci="4" mb="0" cb="0"/><line nr="1090" mi="0" ci="8" mb="0" cb="0"/><line nr="1095" mi="0" ci="8" mb="0" cb="0"/><line nr="1100" mi="0" ci="4" mb="0" cb="0"/><line nr="1101" mi="0" ci="5" mb="0" cb="0"/><line nr="1102" mi="0" ci="7" mb="0" cb="0"/><line nr="1107" mi="0" ci="4" mb="0" cb="0"/><line nr="1108" mi="0" ci="2" mb="0" cb="0"/><line nr="1109" mi="0" ci="9" mb="0" cb="2"/><line nr="1110" mi="0" ci="7" mb="0" cb="0"/><line nr="1111" mi="0" ci="4" mb="0" cb="2"/><line nr="1112" mi="0" ci="5" mb="0" cb="2"/><line nr="1113" mi="0" ci="5" mb="0" cb="0"/><line nr="1115" mi="0" ci="10" mb="0" cb="0"/><line nr="1118" mi="0" ci="1" mb="0" cb="0"/><line nr="1119" mi="0" ci="4" mb="0" cb="0"/><line nr="1124" mi="0" ci="8" mb="0" cb="0"/><line nr="1129" mi="0" ci="2" mb="0" cb="2"/><line nr="1130" mi="0" ci="14" mb="0" cb="0"/><line nr="1132" mi="0" ci="4" mb="0" cb="2"/><line nr="1133" mi="0" ci="14" mb="0" cb="0"/><line nr="1135" mi="0" ci="4" mb="0" cb="0"/><line nr="1140" mi="0" ci="9" mb="0" cb="6"/><line nr="1141" mi="0" ci="8" mb="0" cb="0"/><line nr="1142" mi="0" ci="16" mb="0" cb="0"/><line nr="1144" mi="0" ci="3" mb="0" cb="2"/><line nr="1145" mi="0" ci="2" mb="0" cb="0"/><line nr="1147" mi="0" ci="2" mb="0" cb="0"/><line nr="1148" mi="0" ci="7" mb="0" cb="2"/><line nr="1149" mi="0" ci="9" mb="0" cb="0"/><line nr="1151" mi="0" ci="3" mb="0" cb="0"/><line nr="1156" mi="0" ci="3" mb="0" cb="2"/><line nr="1157" mi="0" ci="5" mb="0" cb="0"/><line nr="1159" mi="0" ci="4" mb="0" cb="2"/><line nr="1160" mi="0" ci="2" mb="0" cb="0"/><line nr="1162" mi="0" ci="5" mb="0" cb="0"/><line nr="1163" mi="0" ci="11" mb="0" cb="0"/><line nr="1169" mi="0" ci="3" mb="0" cb="2"/><line nr="1170" mi="0" ci="2" mb="0" cb="0"/><line nr="1172" mi="0" ci="4" mb="0" cb="0"/><line nr="1178" mi="0" ci="4" mb="0" cb="2"/><line nr="1179" mi="0" ci="2" mb="0" cb="0"/><line nr="1181" mi="0" ci="2" mb="0" cb="2"/><line nr="1182" mi="0" ci="2" mb="0" cb="0"/><line nr="1184" mi="0" ci="2" mb="0" cb="0"/><line nr="1185" mi="0" ci="7" mb="0" cb="2"/><line nr="1186" mi="0" ci="8" mb="0" cb="0"/><line nr="1188" mi="0" ci="5" mb="0" cb="0"/><line nr="1193" mi="0" ci="4" mb="0" cb="2"/><line nr="1194" mi="0" ci="2" mb="0" cb="0"/><line nr="1196" mi="0" ci="2" mb="0" cb="2"/><line nr="1197" mi="0" ci="2" mb="0" cb="0"/><line nr="1199" mi="0" ci="2" mb="0" cb="0"/><line nr="1200" mi="0" ci="7" mb="0" cb="2"/><line nr="1201" mi="0" ci="13" mb="0" cb="0"/><line nr="1203" mi="0" ci="5" mb="0" cb="0"/><line nr="1208" mi="0" ci="4" mb="0" cb="0"/><line nr="1209" mi="0" ci="5" mb="0" cb="0"/><line nr="1214" mi="0" ci="4" mb="0" cb="0"/><line nr="1215" mi="0" ci="2" mb="0" cb="0"/><line nr="1216" mi="0" ci="8" mb="0" cb="2"/><line nr="1217" mi="0" ci="4" mb="0" cb="0"/><line nr="1218" mi="0" ci="4" mb="0" cb="2"/><line nr="1219" mi="0" ci="1" mb="0" cb="0"/><line nr="1221" mi="0" ci="8" mb="0" cb="0"/><line nr="1223" mi="0" ci="10" mb="0" cb="2"/><line nr="1228" mi="0" ci="3" mb="0" cb="0"/><line nr="1234" mi="0" ci="4" mb="0" cb="0"/><line nr="1235" mi="0" ci="2" mb="0" cb="0"/><line nr="1236" mi="0" ci="2" mb="0" cb="0"/><line nr="1237" mi="0" ci="9" mb="0" cb="2"/><line nr="1238" mi="0" ci="5" mb="0" cb="0"/><line nr="1239" mi="0" ci="8" mb="0" cb="0"/><line nr="1240" mi="0" ci="8" mb="0" cb="0"/><line nr="1241" mi="0" ci="1" mb="0" cb="0"/><line nr="1242" mi="0" ci="10" mb="0" cb="0"/><line nr="1247" mi="0" ci="4" mb="0" cb="0"/><line nr="1248" mi="0" ci="2" mb="0" cb="0"/><line nr="1249" mi="0" ci="2" mb="0" cb="0"/><line nr="1250" mi="0" ci="2" mb="0" cb="0"/><line nr="1251" mi="0" ci="9" mb="0" cb="2"/><line nr="1252" mi="0" ci="5" mb="0" cb="0"/><line nr="1253" mi="0" ci="8" mb="0" cb="0"/><line nr="1254" mi="0" ci="8" mb="0" cb="0"/><line nr="1255" mi="0" ci="8" mb="0" cb="0"/><line nr="1256" mi="0" ci="1" mb="0" cb="0"/><line nr="1257" mi="0" ci="14" mb="0" cb="0"/><line nr="1262" mi="0" ci="2" mb="0" cb="2"/><line nr="1263" mi="0" ci="14" mb="0" cb="0"/><line nr="1265" mi="0" ci="4" mb="0" cb="2"/><line nr="1266" mi="0" ci="14" mb="0" cb="0"/><line nr="1268" mi="0" ci="15" mb="0" cb="0"/><line nr="1273" mi="0" ci="4" mb="0" cb="0"/><line nr="1274" mi="0" ci="6" mb="0" cb="0"/><line nr="1279" mi="0" ci="4" mb="0" cb="0"/><line nr="1280" mi="0" ci="8" mb="0" cb="0"/><line nr="1285" mi="0" ci="5" mb="0" cb="0"/><line nr="1289" mi="0" ci="7" mb="0" cb="2"/><line nr="1294" mi="0" ci="3" mb="0" cb="2"/><line nr="1295" mi="0" ci="2" mb="0" cb="0"/><line nr="1296" mi="0" ci="3" mb="0" cb="2"/><line nr="1297" mi="0" ci="2" mb="0" cb="0"/><line nr="1298" mi="0" ci="3" mb="0" cb="0"/><line nr="1299" mi="0" ci="6" mb="0" cb="4"/><line nr="1300" mi="0" ci="6" mb="0" cb="0"/><line nr="1301" mi="0" ci="2" mb="0" cb="2"/><line nr="1302" mi="0" ci="2" mb="0" cb="0"/><line nr="1304" mi="0" ci="3" mb="0" cb="0"/><line nr="1305" mi="0" ci="3" mb="0" cb="0"/><line nr="1306" mi="0" ci="1" mb="0" cb="0"/><line nr="1307" mi="0" ci="10" mb="0" cb="4"/><line nr="1309" mi="0" ci="2" mb="0" cb="0"/><line nr="1315" mi="0" ci="6" mb="0" cb="0"/><line nr="1320" mi="0" ci="2" mb="0" cb="0"/><line nr="1325" mi="0" ci="14" mb="0" cb="0"/><line nr="1329" mi="0" ci="10" mb="0" cb="2"/><line nr="1335" mi="3" ci="0" mb="0" cb="0"/><line nr="1338" mi="0" ci="2" mb="0" cb="2"/><line nr="1339" mi="0" ci="3" mb="0" cb="0"/><line nr="1341" mi="0" ci="22" mb="0" cb="0"/><line nr="1342" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="2512"/><counter type="BRANCH" missed="0" covered="258"/><counter type="LINE" missed="1" covered="467"/><counter type="COMPLEXITY" missed="1" covered="267"/><counter type="METHOD" missed="1" covered="138"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="IndexedSeq.java"><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="2"/><line nr="85" mi="0" ci="5" mb="0" cb="0"/><line nr="86" mi="0" ci="5" mb="0" cb="0"/><line nr="87" mi="0" ci="3" mb="0" cb="2"/><line nr="88" mi="0" ci="2" mb="0" cb="0"/><line nr="90" mi="0" ci="2" mb="0" cb="2"/><line nr="91" mi="0" ci="8" mb="0" cb="2"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="94" mi="0" ci="1" mb="0" cb="0"/><line nr="95" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="4" mb="0" cb="0"/><line nr="119" mi="0" ci="4" mb="0" cb="0"/><line nr="120" mi="0" ci="8" mb="0" cb="0"/><line nr="121" mi="0" ci="8" mb="0" cb="2"/><line nr="144" mi="0" ci="3" mb="0" cb="2"/><line nr="145" mi="0" ci="5" mb="0" cb="0"/><line nr="147" mi="0" ci="7" mb="0" cb="0"/><line nr="153" mi="0" ci="7" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="7" mb="0" cb="0"/><line nr="160" mi="0" ci="8" mb="0" cb="4"/><line nr="161" mi="0" ci="2" mb="0" cb="0"/><line nr="163" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="10" mb="0" cb="0"/><line nr="226" mi="0" ci="6" mb="0" cb="0"/><line nr="230" mi="0" ci="7" mb="0" cb="2"/><line nr="235" mi="0" ci="11" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="3" mb="0" cb="0"/><line nr="253" mi="0" ci="2" mb="0" cb="0"/><line nr="254" mi="0" ci="9" mb="0" cb="4"/><line nr="255" mi="0" ci="2" mb="0" cb="0"/><line nr="257" mi="0" ci="4" mb="0" cb="0"/><line nr="286" mi="0" ci="4" mb="0" cb="0"/><line nr="287" mi="0" ci="4" mb="0" cb="2"/><line nr="288" mi="0" ci="3" mb="0" cb="2"/><line nr="289" mi="0" ci="3" mb="0" cb="0"/><line nr="290" mi="0" ci="2" mb="0" cb="0"/><line nr="291" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="3" mb="0" cb="0"/><line nr="293" mi="0" ci="3" mb="0" cb="0"/><line nr="294" mi="0" ci="14" mb="0" cb="6"/><line nr="295" mi="0" ci="1" mb="0" cb="0"/><line nr="296" mi="0" ci="2" mb="0" cb="0"/><line nr="298" mi="0" ci="7" mb="0" cb="2"/><line nr="300" mi="0" ci="2" mb="0" cb="0"/><line nr="301" mi="0" ci="3" mb="0" cb="0"/><line nr="302" mi="0" ci="3" mb="0" cb="0"/><line nr="303" mi="0" ci="6" mb="0" cb="4"/><line nr="304" mi="0" ci="7" mb="0" cb="2"/><line nr="305" mi="0" ci="2" mb="0" cb="0"/><line nr="307" mi="0" ci="2" mb="0" cb="0"/><line nr="309" mi="0" ci="7" mb="0" cb="2"/><line nr="363" mi="0" ci="2" mb="0" cb="2"/><line nr="364" mi="0" ci="2" mb="0" cb="0"/><line nr="366" mi="0" ci="3" mb="0" cb="2"/><line nr="367" mi="0" ci="7" mb="0" cb="2"/><line nr="369" mi="0" ci="3" mb="0" cb="2"/><line nr="370" mi="0" ci="3" mb="0" cb="0"/><line nr="371" mi="0" ci="7" mb="0" cb="2"/><line nr="373" mi="0" ci="2" mb="0" cb="0"/><line nr="374" mi="0" ci="2" mb="0" cb="0"/><line nr="375" mi="0" ci="6" mb="0" cb="0"/><line nr="376" mi="0" ci="3" mb="0" cb="2"/><line nr="377" mi="0" ci="6" mb="0" cb="0"/><line nr="378" mi="0" ci="2" mb="0" cb="2"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="381" mi="0" ci="3" mb="0" cb="2"/><line nr="382" mi="0" ci="2" mb="0" cb="0"/><line nr="383" mi="0" ci="5" mb="0" cb="0"/><line nr="385" mi="0" ci="2" mb="0" cb="0"/><line nr="387" mi="0" ci="1" mb="0" cb="0"/><line nr="388" mi="0" ci="2" mb="0" cb="0"/><line nr="392" mi="0" ci="3" mb="0" cb="2"/><line nr="393" mi="0" ci="5" mb="0" cb="2"/><line nr="394" mi="0" ci="2" mb="0" cb="0"/><line nr="396" mi="0" ci="2" mb="0" cb="0"/><line nr="398" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="329"/><counter type="BRANCH" missed="0" covered="62"/><counter type="LINE" missed="0" covered="81"/><counter type="COMPLEXITY" missed="0" covered="44"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="LinkedHashSet.java"><line nr="33" mi="0" ci="6" mb="0" cb="0"/><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="38" mi="0" ci="3" mb="0" cb="0"/><line nr="39" mi="0" ci="1" mb="0" cb="0"/><line nr="43" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="60" mi="0" ci="2" mb="0" cb="0"/><line nr="61" mi="0" ci="8" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="88" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="0" ci="16" mb="0" cb="2"/><line nr="90" mi="0" ci="5" mb="0" cb="0"/><line nr="92" mi="0" ci="10" mb="0" cb="2"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="7" mb="0" cb="0"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="7" mb="0" cb="0"/><line nr="133" mi="0" ci="4" mb="0" cb="0"/><line nr="134" mi="0" ci="3" mb="1" cb="1"/><line nr="135" mi="3" ci="0" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="10" mb="0" cb="2"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="182" mi="0" ci="4" mb="0" cb="0"/><line nr="183" mi="0" ci="4" mb="0" cb="0"/><line nr="193" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="204" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="4" mb="0" cb="0"/><line nr="216" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="227" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="5" mb="0" cb="0"/><line nr="251" mi="0" ci="5" mb="0" cb="0"/><line nr="277" mi="0" ci="6" mb="0" cb="0"/><line nr="281" mi="0" ci="6" mb="0" cb="0"/><line nr="285" mi="0" ci="6" mb="0" cb="0"/><line nr="305" mi="0" ci="5" mb="0" cb="0"/><line nr="331" mi="0" ci="6" mb="0" cb="0"/><line nr="351" mi="0" ci="5" mb="0" cb="0"/><line nr="355" mi="0" ci="5" mb="0" cb="0"/><line nr="381" mi="0" ci="6" mb="0" cb="0"/><line nr="385" mi="0" ci="6" mb="0" cb="0"/><line nr="389" mi="0" ci="6" mb="0" cb="0"/><line nr="409" mi="0" ci="5" mb="0" cb="0"/><line nr="435" mi="0" ci="6" mb="0" cb="0"/><line nr="440" mi="0" ci="9" mb="0" cb="0"/><line nr="445" mi="0" ci="4" mb="0" cb="0"/><line nr="446" mi="0" ci="5" mb="0" cb="0"/><line nr="447" mi="0" ci="6" mb="0" cb="2"/><line nr="448" mi="0" ci="2" mb="0" cb="0"/><line nr="450" mi="0" ci="5" mb="0" cb="0"/><line nr="456" mi="0" ci="2" mb="0" cb="0"/><line nr="461" mi="0" ci="6" mb="0" cb="0"/><line nr="466" mi="0" ci="4" mb="0" cb="0"/><line nr="467" mi="0" ci="6" mb="1" cb="3"/><line nr="468" mi="0" ci="2" mb="0" cb="0"/><line nr="470" mi="0" ci="4" mb="0" cb="0"/><line nr="476" mi="0" ci="2" mb="0" cb="0"/><line nr="481" mi="0" ci="4" mb="0" cb="0"/><line nr="482" mi="0" ci="6" mb="0" cb="0"/><line nr="487" mi="0" ci="4" mb="0" cb="0"/><line nr="488" mi="0" ci="6" mb="0" cb="0"/><line nr="493" mi="0" ci="2" mb="0" cb="2"/><line nr="494" mi="0" ci="2" mb="0" cb="0"/><line nr="496" mi="0" ci="6" mb="0" cb="0"/><line nr="502" mi="0" ci="2" mb="0" cb="2"/><line nr="503" mi="0" ci="2" mb="0" cb="0"/><line nr="505" mi="0" ci="6" mb="0" cb="0"/><line nr="511" mi="0" ci="4" mb="0" cb="0"/><line nr="512" mi="0" ci="5" mb="0" cb="0"/><line nr="517" mi="0" ci="4" mb="0" cb="0"/><line nr="518" mi="0" ci="6" mb="0" cb="0"/><line nr="519" mi="0" ci="9" mb="0" cb="2"/><line nr="524" mi="0" ci="4" mb="0" cb="0"/><line nr="525" mi="0" ci="6" mb="0" cb="0"/><line nr="526" mi="0" ci="9" mb="0" cb="2"/><line nr="531" mi="0" ci="4" mb="0" cb="0"/><line nr="532" mi="0" ci="5" mb="0" cb="0"/><line nr="537" mi="4" ci="0" mb="0" cb="0"/><line nr="538" mi="3" ci="0" mb="2" cb="0"/><line nr="539" mi="2" ci="0" mb="0" cb="0"/><line nr="541" mi="7" ci="0" mb="0" cb="0"/><line nr="542" mi="7" ci="0" mb="0" cb="0"/><line nr="543" mi="5" ci="0" mb="0" cb="0"/><line nr="549" mi="0" ci="4" mb="0" cb="0"/><line nr="550" mi="0" ci="6" mb="0" cb="0"/><line nr="555" mi="0" ci="7" mb="0" cb="0"/><line nr="556" mi="0" ci="4" mb="0" cb="0"/><line nr="557" mi="0" ci="15" mb="0" cb="0"/><line nr="558" mi="0" ci="5" mb="0" cb="0"/><line nr="564" mi="0" ci="5" mb="0" cb="0"/><line nr="569" mi="0" ci="2" mb="0" cb="0"/><line nr="574" mi="0" ci="4" mb="0" cb="2"/><line nr="575" mi="0" ci="5" mb="0" cb="0"/><line nr="577" mi="0" ci="4" mb="0" cb="0"/><line nr="582" mi="0" ci="4" mb="0" cb="0"/><line nr="587" mi="0" ci="4" mb="0" cb="2"/><line nr="588" mi="0" ci="5" mb="0" cb="0"/><line nr="590" mi="0" ci="7" mb="0" cb="0"/><line nr="596" mi="0" ci="4" mb="0" cb="2"/><line nr="597" mi="0" ci="2" mb="0" cb="0"/><line nr="599" mi="0" ci="4" mb="0" cb="0"/><line nr="605" mi="0" ci="4" mb="0" cb="0"/><line nr="606" mi="0" ci="6" mb="1" cb="3"/><line nr="607" mi="0" ci="2" mb="0" cb="0"/><line nr="609" mi="0" ci="4" mb="0" cb="0"/><line nr="615" mi="0" ci="4" mb="0" cb="0"/><line nr="620" mi="0" ci="2" mb="0" cb="0"/><line nr="625" mi="0" ci="9" mb="0" cb="0"/><line nr="630" mi="0" ci="4" mb="0" cb="0"/><line nr="635" mi="0" ci="4" mb="0" cb="0"/><line nr="636" mi="0" ci="3" mb="1" cb="1"/><line nr="637" mi="2" ci="0" mb="0" cb="0"/><line nr="639" mi="0" ci="7" mb="0" cb="0"/><line nr="640" mi="0" ci="4" mb="0" cb="0"/><line nr="641" mi="0" ci="5" mb="0" cb="0"/><line nr="643" mi="0" ci="5" mb="0" cb="0"/><line nr="649" mi="0" ci="3" mb="0" cb="0"/><line nr="654" mi="0" ci="7" mb="0" cb="0"/><line nr="659" mi="0" ci="4" mb="0" cb="0"/><line nr="660" mi="0" ci="5" mb="0" cb="0"/><line nr="661" mi="0" ci="10" mb="0" cb="0"/><line nr="666" mi="0" ci="4" mb="0" cb="0"/><line nr="667" mi="0" ci="3" mb="0" cb="2"/><line nr="668" mi="0" ci="5" mb="0" cb="0"/><line nr="670" mi="0" ci="2" mb="0" cb="0"/><line nr="675" mi="0" ci="5" mb="0" cb="0"/><line nr="676" mi="0" ci="11" mb="0" cb="2"/><line nr="681" mi="0" ci="4" mb="0" cb="0"/><line nr="682" mi="0" ci="3" mb="0" cb="0"/><line nr="683" mi="0" ci="9" mb="0" cb="2"/><line nr="684" mi="0" ci="4" mb="0" cb="0"/><line nr="685" mi="0" ci="1" mb="0" cb="0"/><line nr="686" mi="0" ci="11" mb="0" cb="2"/><line nr="691" mi="0" ci="5" mb="0" cb="2"/><line nr="692" mi="0" ci="6" mb="0" cb="0"/><line nr="694" mi="0" ci="2" mb="0" cb="0"/><line nr="700" mi="0" ci="5" mb="0" cb="0"/><line nr="705" mi="0" ci="4" mb="0" cb="0"/><line nr="706" mi="0" ci="4" mb="0" cb="0"/><line nr="707" mi="0" ci="2" mb="0" cb="0"/><line nr="708" mi="0" ci="9" mb="0" cb="2"/><line nr="709" mi="0" ci="4" mb="0" cb="2"/><line nr="710" mi="0" ci="5" mb="0" cb="0"/><line nr="712" mi="0" ci="1" mb="0" cb="0"/><line nr="713" mi="0" ci="17" mb="0" cb="4"/><line nr="718" mi="0" ci="5" mb="0" cb="0"/><line nr="723" mi="0" ci="4" mb="0" cb="0"/><line nr="724" mi="0" ci="11" mb="0" cb="0"/><line nr="725" mi="0" ci="4" mb="0" cb="0"/><line nr="726" mi="0" ci="2" mb="0" cb="0"/><line nr="732" mi="0" ci="4" mb="0" cb="0"/><line nr="733" mi="0" ci="9" mb="0" cb="0"/><line nr="738" mi="0" ci="5" mb="0" cb="0"/><line nr="743" mi="0" ci="8" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="749" mi="0" ci="5" mb="0" cb="0"/><line nr="750" mi="0" ci="10" mb="0" cb="0"/><line nr="755" mi="0" ci="4" mb="0" cb="2"/><line nr="756" mi="0" ci="5" mb="0" cb="0"/><line nr="758" mi="0" ci="5" mb="0" cb="0"/><line nr="763" mi="0" ci="4" mb="0" cb="2"/><line nr="764" mi="0" ci="2" mb="0" cb="0"/><line nr="766" mi="0" ci="4" mb="0" cb="0"/><line nr="772" mi="0" ci="5" mb="0" cb="2"/><line nr="773" mi="0" ci="2" mb="0" cb="0"/><line nr="775" mi="0" ci="10" mb="0" cb="0"/><line nr="780" mi="0" ci="5" mb="0" cb="2"/><line nr="781" mi="0" ci="2" mb="0" cb="0"/><line nr="783" mi="0" ci="10" mb="0" cb="0"/><line nr="788" mi="0" ci="4" mb="0" cb="0"/><line nr="789" mi="0" ci="5" mb="0" cb="0"/><line nr="794" mi="0" ci="4" mb="0" cb="0"/><line nr="795" mi="0" ci="6" mb="0" cb="0"/><line nr="796" mi="0" ci="9" mb="0" cb="2"/><line nr="802" mi="0" ci="4" mb="0" cb="0"/><line nr="803" mi="0" ci="3" mb="0" cb="2"/><line nr="804" mi="0" ci="3" mb="1" cb="1"/><line nr="805" mi="0" ci="3" mb="0" cb="0"/><line nr="807" mi="3" ci="0" mb="0" cb="0"/><line nr="809" mi="0" ci="3" mb="1" cb="1"/><line nr="810" mi="2" ci="0" mb="0" cb="0"/><line nr="812" mi="0" ci="5" mb="0" cb="0"/><line nr="813" mi="0" ci="6" mb="0" cb="2"/><line nr="814" mi="0" ci="2" mb="0" cb="0"/><line nr="816" mi="0" ci="5" mb="0" cb="0"/><line nr="823" mi="3" ci="0" mb="0" cb="0"/><line nr="829" mi="0" ci="4" mb="0" cb="0"/><line nr="830" mi="0" ci="5" mb="0" cb="0"/><line nr="831" mi="0" ci="10" mb="0" cb="0"/><line nr="837" mi="0" ci="4" mb="0" cb="0"/><line nr="838" mi="0" ci="5" mb="0" cb="0"/><line nr="839" mi="0" ci="14" mb="0" cb="0"/><line nr="844" mi="0" ci="4" mb="0" cb="0"/><line nr="845" mi="0" ci="6" mb="0" cb="0"/><line nr="850" mi="0" ci="4" mb="0" cb="0"/><line nr="851" mi="0" ci="8" mb="0" cb="0"/><line nr="856" mi="0" ci="5" mb="0" cb="0"/><line nr="863" mi="0" ci="4" mb="0" cb="0"/><line nr="869" mi="0" ci="3" mb="0" cb="2"/><line nr="870" mi="0" ci="2" mb="0" cb="0"/><line nr="871" mi="0" ci="3" mb="0" cb="2"/><line nr="872" mi="0" ci="3" mb="0" cb="0"/><line nr="873" mi="0" ci="13" mb="0" cb="4"/><line nr="875" mi="0" ci="2" mb="0" cb="0"/><line nr="881" mi="0" ci="2" mb="0" cb="0"/><line nr="886" mi="0" ci="14" mb="0" cb="0"/><line nr="891" mi="0" ci="2" mb="0" cb="0"/><line nr="892" mi="0" ci="9" mb="0" cb="2"/><line nr="893" mi="0" ci="5" mb="0" cb="0"/><line nr="894" mi="0" ci="1" mb="0" cb="0"/><line nr="895" mi="0" ci="2" mb="0" cb="0"/><line nr="909" mi="0" ci="6" mb="0" cb="0"/><line nr="921" mi="5" ci="0" mb="0" cb="0"/><line nr="947" mi="0" ci="2" mb="0" cb="0"/><line nr="948" mi="0" ci="3" mb="0" cb="0"/><line nr="949" mi="0" ci="1" mb="0" cb="0"/><line nr="958" mi="0" ci="2" mb="0" cb="0"/><line nr="959" mi="0" ci="5" mb="0" cb="0"/><line nr="960" mi="0" ci="11" mb="0" cb="2"/><line nr="961" mi="0" ci="4" mb="0" cb="0"/><line nr="962" mi="0" ci="1" mb="0" cb="0"/><line nr="963" mi="0" ci="1" mb="0" cb="0"/><line nr="974" mi="0" ci="2" mb="0" cb="0"/><line nr="975" mi="0" ci="3" mb="0" cb="0"/><line nr="976" mi="0" ci="2" mb="1" cb="1"/><line nr="977" mi="5" ci="0" mb="0" cb="0"/><line nr="979" mi="0" ci="2" mb="0" cb="0"/><line nr="980" mi="0" ci="7" mb="0" cb="2"/><line nr="982" mi="0" ci="3" mb="0" cb="0"/><line nr="983" mi="0" ci="5" mb="0" cb="0"/><line nr="985" mi="0" ci="3" mb="0" cb="0"/><line nr="986" mi="0" ci="1" mb="0" cb="0"/><line nr="998" mi="0" ci="13" mb="0" cb="2"/><counter type="INSTRUCTION" missed="51" covered="1126"/><counter type="BRANCH" missed="9" covered="81"/><counter type="LINE" missed="13" covered="233"/><counter type="COMPLEXITY" missed="12" covered="141"/><counter type="METHOD" missed="4" covered="104"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="TreeMap.java"><line nr="38" mi="0" ci="2" mb="0" cb="0"/><line nr="39" mi="0" ci="3" mb="0" cb="0"/><line nr="40" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="59" mi="4" ci="3" mb="0" cb="0"/><line nr="60" mi="0" ci="8" mb="0" cb="0"/><line nr="71" mi="5" ci="0" mb="0" cb="0"/><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="9" mb="0" cb="0"/><line nr="97" mi="0" ci="6" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="5" mb="0" cb="2"/><line nr="112" mi="0" ci="5" mb="0" cb="0"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="8" mb="0" cb="2"/><line nr="116" mi="0" ci="12" mb="0" cb="0"/><line nr="118" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="11" mb="0" cb="2"/><line nr="133" mi="0" ci="8" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><line nr="135" mi="0" ci="5" mb="0" cb="0"/><line nr="148" mi="0" ci="4" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="5" mb="0" cb="0"/><line nr="163" mi="0" ci="7" mb="0" cb="0"/><line nr="177" mi="0" ci="4" mb="0" cb="0"/><line nr="178" mi="0" ci="6" mb="0" cb="0"/><line nr="195" mi="0" ci="4" mb="0" cb="0"/><line nr="196" mi="0" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="6" mb="0" cb="0"/><line nr="213" mi="4" ci="0" mb="0" cb="0"/><line nr="214" mi="7" ci="0" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="6" mb="0" cb="0"/><line nr="247" mi="4" ci="0" mb="0" cb="0"/><line nr="248" mi="7" ci="0" mb="0" cb="0"/><line nr="262" mi="0" ci="6" mb="0" cb="0"/><line nr="276" mi="6" ci="0" mb="0" cb="0"/><line nr="291" mi="0" ci="4" mb="0" cb="0"/><line nr="292" mi="0" ci="4" mb="0" cb="0"/><line nr="293" mi="0" ci="6" mb="0" cb="0"/><line nr="294" mi="0" ci="16" mb="0" cb="2"/><line nr="295" mi="0" ci="4" mb="0" cb="0"/><line nr="297" mi="3" ci="8" mb="1" cb="1"/><line nr="311" mi="0" ci="4" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="0"/><line nr="313" mi="0" ci="6" mb="0" cb="0"/><line nr="314" mi="0" ci="16" mb="0" cb="2"/><line nr="315" mi="0" ci="8" mb="0" cb="0"/><line nr="317" mi="3" ci="8" mb="1" cb="1"/><line nr="330" mi="6" ci="0" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="346" mi="0" ci="3" mb="1" cb="1"/><line nr="347" mi="3" ci="0" mb="0" cb="0"/><line nr="349" mi="0" ci="6" mb="0" cb="0"/><line nr="350" mi="0" ci="10" mb="0" cb="2"/><line nr="351" mi="0" ci="4" mb="0" cb="0"/><line nr="352" mi="0" ci="1" mb="0" cb="0"/><line nr="353" mi="0" ci="5" mb="0" cb="0"/><line nr="359" mi="6" ci="0" mb="0" cb="0"/><line nr="365" mi="4" ci="0" mb="0" cb="0"/><line nr="366" mi="4" ci="0" mb="0" cb="0"/><line nr="367" mi="8" ci="0" mb="0" cb="0"/><line nr="368" mi="15" ci="0" mb="0" cb="0"/><line nr="373" mi="0" ci="12" mb="0" cb="2"/><line nr="378" mi="0" ci="2" mb="0" cb="0"/><line nr="383" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="9" mb="0" cb="0"/><line nr="389" mi="0" ci="4" mb="0" cb="0"/><line nr="390" mi="0" ci="9" mb="0" cb="0"/><line nr="395" mi="0" ci="2" mb="0" cb="2"/><line nr="396" mi="0" ci="2" mb="0" cb="0"/><line nr="398" mi="0" ci="9" mb="0" cb="0"/><line nr="404" mi="0" ci="2" mb="0" cb="2"/><line nr="405" mi="0" ci="2" mb="0" cb="0"/><line nr="407" mi="0" ci="9" mb="0" cb="0"/><line nr="413" mi="0" ci="4" mb="0" cb="0"/><line nr="414" mi="0" ci="5" mb="0" cb="0"/><line nr="419" mi="0" ci="4" mb="0" cb="0"/><line nr="420" mi="0" ci="9" mb="0" cb="0"/><line nr="425" mi="0" ci="2" mb="0" cb="0"/><line nr="426" mi="0" ci="9" mb="0" cb="0"/><line nr="431" mi="0" ci="7" mb="0" cb="0"/><line nr="436" mi="0" ci="4" mb="0" cb="0"/><line nr="437" mi="0" ci="10" mb="0" cb="0"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="443" mi="0" ci="5" mb="0" cb="0"/><line nr="448" mi="0" ci="5" mb="0" cb="0"/><line nr="454" mi="0" ci="4" mb="0" cb="0"/><line nr="455" mi="0" ci="8" mb="0" cb="0"/><line nr="456" mi="0" ci="12" mb="0" cb="0"/><line nr="461" mi="0" ci="4" mb="0" cb="0"/><line nr="462" mi="0" ci="6" mb="0" cb="0"/><line nr="467" mi="0" ci="2" mb="0" cb="0"/><line nr="468" mi="0" ci="11" mb="0" cb="0"/><line nr="473" mi="0" ci="4" mb="0" cb="0"/><line nr="474" mi="0" ci="8" mb="0" cb="0"/><line nr="475" mi="0" ci="4" mb="0" cb="0"/><line nr="476" mi="0" ci="18" mb="0" cb="0"/><line nr="477" mi="0" ci="4" mb="0" cb="0"/><line nr="478" mi="0" ci="5" mb="0" cb="0"/><line nr="484" mi="0" ci="5" mb="0" cb="0"/><line nr="489" mi="0" ci="2" mb="0" cb="0"/><line nr="494" mi="0" ci="3" mb="0" cb="2"/><line nr="495" mi="0" ci="5" mb="0" cb="0"/><line nr="497" mi="0" ci="6" mb="0" cb="0"/><line nr="503" mi="0" ci="9" mb="0" cb="2"/><line nr="508" mi="0" ci="3" mb="0" cb="2"/><line nr="509" mi="0" ci="5" mb="0" cb="0"/><line nr="511" mi="0" ci="6" mb="0" cb="0"/><line nr="512" mi="0" ci="8" mb="0" cb="0"/><line nr="518" mi="0" ci="9" mb="0" cb="2"/><line nr="523" mi="0" ci="4" mb="0" cb="0"/><line nr="528" mi="0" ci="2" mb="0" cb="0"/><line nr="533" mi="0" ci="4" mb="0" cb="0"/><line nr="539" mi="0" ci="6" mb="0" cb="0"/><line nr="544" mi="0" ci="8" mb="0" cb="0"/><line nr="550" mi="5" ci="0" mb="0" cb="0"/><line nr="556" mi="0" ci="4" mb="0" cb="0"/><line nr="557" mi="0" ci="8" mb="0" cb="0"/><line nr="558" mi="0" ci="12" mb="0" cb="0"/><line nr="563" mi="0" ci="4" mb="0" cb="0"/><line nr="564" mi="0" ci="13" mb="0" cb="0"/><line nr="569" mi="3" ci="0" mb="0" cb="0"/><line nr="574" mi="4" ci="0" mb="0" cb="0"/><line nr="579" mi="0" ci="14" mb="0" cb="0"/><line nr="585" mi="0" ci="15" mb="0" cb="0"/><line nr="590" mi="4" ci="0" mb="0" cb="0"/><line nr="595" mi="0" ci="4" mb="0" cb="0"/><line nr="596" mi="0" ci="5" mb="0" cb="0"/><line nr="597" mi="0" ci="8" mb="0" cb="0"/><line nr="598" mi="0" ci="8" mb="0" cb="0"/><line nr="599" mi="0" ci="4" mb="0" cb="0"/><line nr="604" mi="0" ci="4" mb="0" cb="0"/><line nr="605" mi="0" ci="3" mb="0" cb="2"/><line nr="606" mi="0" ci="6" mb="0" cb="0"/><line nr="608" mi="0" ci="2" mb="0" cb="0"/><line nr="613" mi="0" ci="12" mb="0" cb="0"/><line nr="619" mi="0" ci="4" mb="0" cb="0"/><line nr="620" mi="0" ci="8" mb="0" cb="0"/><line nr="625" mi="0" ci="2" mb="0" cb="0"/><line nr="626" mi="0" ci="6" mb="0" cb="0"/><line nr="627" mi="0" ci="5" mb="0" cb="2"/><line nr="628" mi="0" ci="8" mb="0" cb="0"/><line nr="630" mi="0" ci="2" mb="0" cb="0"/><line nr="636" mi="0" ci="2" mb="0" cb="0"/><line nr="637" mi="0" ci="3" mb="0" cb="0"/><line nr="638" mi="0" ci="9" mb="0" cb="2"/><line nr="639" mi="0" ci="6" mb="0" cb="0"/><line nr="640" mi="0" ci="4" mb="0" cb="2"/><line nr="641" mi="0" ci="4" mb="0" cb="0"/><line nr="643" mi="0" ci="1" mb="0" cb="0"/><line nr="644" mi="0" ci="6" mb="0" cb="2"/><line nr="645" mi="0" ci="2" mb="0" cb="0"/><line nr="647" mi="0" ci="5" mb="0" cb="0"/><line nr="653" mi="0" ci="4" mb="0" cb="0"/><line nr="654" mi="0" ci="4" mb="0" cb="0"/><line nr="655" mi="1" ci="13" mb="1" cb="1"/><line nr="660" mi="0" ci="5" mb="0" cb="0"/><line nr="665" mi="0" ci="4" mb="0" cb="0"/><line nr="666" mi="0" ci="5" mb="0" cb="0"/><line nr="667" mi="0" ci="10" mb="0" cb="2"/><line nr="668" mi="0" ci="4" mb="1" cb="1"/><line nr="669" mi="0" ci="4" mb="0" cb="0"/><line nr="671" mi="0" ci="1" mb="0" cb="0"/><line nr="672" mi="0" ci="5" mb="0" cb="0"/><line nr="677" mi="0" ci="4" mb="0" cb="0"/><line nr="678" mi="0" ci="11" mb="0" cb="0"/><line nr="683" mi="0" ci="4" mb="0" cb="0"/><line nr="684" mi="0" ci="9" mb="0" cb="0"/><line nr="689" mi="0" ci="4" mb="0" cb="0"/><line nr="690" mi="0" ci="9" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="700" mi="0" ci="5" mb="0" cb="0"/><line nr="705" mi="0" ci="15" mb="0" cb="0"/><line nr="710" mi="0" ci="4" mb="0" cb="0"/><line nr="711" mi="0" ci="5" mb="0" cb="0"/><line nr="712" mi="0" ci="8" mb="0" cb="0"/><line nr="713" mi="0" ci="8" mb="0" cb="0"/><line nr="714" mi="0" ci="4" mb="0" cb="0"/><line nr="719" mi="0" ci="3" mb="0" cb="2"/><line nr="720" mi="0" ci="5" mb="0" cb="0"/><line nr="722" mi="0" ci="6" mb="0" cb="0"/><line nr="723" mi="0" ci="8" mb="0" cb="0"/><line nr="729" mi="0" ci="9" mb="0" cb="2"/><line nr="734" mi="0" ci="10" mb="0" cb="0"/><line nr="739" mi="0" ci="10" mb="0" cb="0"/><line nr="744" mi="0" ci="4" mb="0" cb="0"/><line nr="745" mi="0" ci="10" mb="0" cb="0"/><line nr="750" mi="0" ci="4" mb="0" cb="0"/><line nr="751" mi="0" ci="10" mb="0" cb="0"/><line nr="756" mi="0" ci="6" mb="0" cb="0"/><line nr="771" mi="0" ci="3" mb="0" cb="0"/><line nr="772" mi="0" ci="10" mb="0" cb="2"/><line nr="773" mi="0" ci="4" mb="0" cb="0"/><line nr="774" mi="0" ci="1" mb="0" cb="0"/><line nr="775" mi="0" ci="5" mb="0" cb="0"/><line nr="782" mi="0" ci="3" mb="0" cb="2"/><line nr="783" mi="0" ci="2" mb="0" cb="0"/><line nr="784" mi="0" ci="3" mb="1" cb="1"/><line nr="785" mi="0" ci="3" mb="0" cb="0"/><line nr="786" mi="0" ci="6" mb="0" cb="0"/><line nr="788" mi="2" ci="0" mb="0" cb="0"/><line nr="794" mi="0" ci="4" mb="0" cb="0"/><line nr="799" mi="0" ci="2" mb="0" cb="0"/><line nr="804" mi="0" ci="14" mb="0" cb="0"/><line nr="820" mi="0" ci="2" mb="0" cb="0"/><line nr="821" mi="0" ci="3" mb="0" cb="0"/><line nr="822" mi="0" ci="1" mb="0" cb="0"/><line nr="826" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="108" covered="1135"/><counter type="BRANCH" missed="6" covered="52"/><counter type="LINE" missed="18" covered="201"/><counter type="COMPLEXITY" missed="19" covered="109"/><counter type="METHOD" missed="13" covered="86"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Set.java"><line nr="60" mi="5" ci="0" mb="0" cb="0"/><line nr="108" mi="4" ci="0" mb="0" cb="0"/><line nr="109" mi="4" ci="0" mb="0" cb="0"/><line nr="222" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="8"/><counter type="LINE" missed="3" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="2" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CharSeq.java"><line nr="36" mi="0" ci="6" mb="0" cb="0"/><line nr="40" mi="0" ci="2" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="45" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="59" mi="0" ci="2" mb="0" cb="0"/><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="62" mi="0" ci="8" mb="0" cb="0"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="3" mb="0" cb="2"/><line nr="75" mi="0" ci="3" mb="0" cb="0"/><line nr="77" mi="0" ci="11" mb="0" cb="2"/><line nr="88" mi="0" ci="13" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="2"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="7" mb="0" cb="0"/><line nr="105" mi="0" ci="8" mb="0" cb="0"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="10" mb="0" cb="2"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="1" mb="0" cb="0"/><line nr="125" mi="0" ci="9" mb="0" cb="2"/><line nr="138" mi="0" ci="4" mb="0" cb="0"/><line nr="139" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="0" ci="7" mb="0" cb="2"/><line nr="141" mi="0" ci="7" mb="0" cb="0"/><line nr="143" mi="0" ci="3" mb="0" cb="0"/><line nr="155" mi="0" ci="9" mb="0" cb="0"/><line nr="174" mi="0" ci="8" mb="0" cb="0"/><line nr="178" mi="0" ci="9" mb="0" cb="0"/><line nr="197" mi="0" ci="8" mb="0" cb="0"/><line nr="221" mi="0" ci="9" mb="0" cb="0"/><line nr="225" mi="0" ci="3" mb="0" cb="2"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="227" mi="0" ci="5" mb="0" cb="2"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="11" mb="0" cb="0"/><line nr="242" mi="0" ci="4" mb="0" cb="0"/><line nr="243" mi="0" ci="3" mb="0" cb="0"/><line nr="244" mi="0" ci="3" mb="0" cb="0"/><line nr="245" mi="0" ci="6" mb="0" cb="0"/><line nr="257" mi="0" ci="4" mb="0" cb="0"/><line nr="258" mi="0" ci="7" mb="0" cb="2"/><line nr="259" mi="0" ci="5" mb="0" cb="0"/><line nr="261" mi="0" ci="6" mb="0" cb="0"/><line nr="272" mi="0" ci="11" mb="0" cb="0"/><line nr="277" mi="0" ci="4" mb="0" cb="0"/><line nr="278" mi="0" ci="6" mb="0" cb="0"/><line nr="279" mi="0" ci="11" mb="0" cb="2"/><line nr="280" mi="0" ci="4" mb="0" cb="0"/><line nr="281" mi="0" ci="1" mb="0" cb="0"/><line nr="282" mi="0" ci="4" mb="0" cb="0"/><line nr="287" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="10" mb="0" cb="0"/><line nr="297" mi="0" ci="6" mb="0" cb="0"/><line nr="302" mi="0" ci="4" mb="0" cb="0"/><line nr="307" mi="0" ci="7" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="0"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="314" mi="0" ci="14" mb="0" cb="0"/><line nr="319" mi="0" ci="4" mb="0" cb="0"/><line nr="324" mi="0" ci="4" mb="0" cb="0"/><line nr="325" mi="0" ci="5" mb="0" cb="0"/><line nr="326" mi="0" ci="8" mb="0" cb="0"/><line nr="331" mi="0" ci="4" mb="0" cb="0"/><line nr="332" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="12" mb="0" cb="0"/><line nr="338" mi="0" ci="2" mb="0" cb="2"/><line nr="339" mi="0" ci="2" mb="0" cb="0"/><line nr="340" mi="0" ci="4" mb="0" cb="2"/><line nr="341" mi="0" ci="2" mb="0" cb="0"/><line nr="343" mi="0" ci="6" mb="0" cb="0"/><line nr="349" mi="0" ci="2" mb="0" cb="2"/><line nr="350" mi="0" ci="2" mb="0" cb="0"/><line nr="351" mi="0" ci="4" mb="0" cb="2"/><line nr="352" mi="0" ci="2" mb="0" cb="0"/><line nr="354" mi="0" ci="10" mb="0" cb="0"/><line nr="360" mi="0" ci="4" mb="0" cb="0"/><line nr="361" mi="0" ci="5" mb="0" cb="0"/><line nr="366" mi="0" ci="4" mb="0" cb="0"/><line nr="367" mi="0" ci="2" mb="0" cb="0"/><line nr="368" mi="0" ci="11" mb="0" cb="4"/><line nr="369" mi="0" ci="2" mb="0" cb="0"/><line nr="371" mi="0" ci="16" mb="0" cb="4"/><line nr="376" mi="0" ci="4" mb="0" cb="0"/><line nr="377" mi="0" ci="4" mb="0" cb="0"/><line nr="378" mi="0" ci="9" mb="0" cb="2"/><line nr="379" mi="0" ci="5" mb="0" cb="0"/><line nr="380" mi="0" ci="5" mb="0" cb="2"/><line nr="381" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="16" mb="0" cb="4"/><line nr="389" mi="0" ci="4" mb="0" cb="0"/><line nr="390" mi="0" ci="5" mb="0" cb="0"/><line nr="395" mi="0" ci="4" mb="0" cb="0"/><line nr="396" mi="0" ci="3" mb="0" cb="2"/><line nr="397" mi="0" ci="2" mb="0" cb="0"/><line nr="399" mi="0" ci="2" mb="0" cb="0"/><line nr="400" mi="0" ci="8" mb="0" cb="2"/><line nr="401" mi="0" ci="14" mb="0" cb="2"/><line nr="402" mi="0" ci="4" mb="0" cb="0"/><line nr="403" mi="0" ci="1" mb="0" cb="0"/><line nr="405" mi="0" ci="2" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="0" cb="0"/><line nr="411" mi="0" ci="3" mb="0" cb="2"/><line nr="412" mi="0" ci="2" mb="0" cb="0"/><line nr="414" mi="0" ci="4" mb="0" cb="0"/><line nr="415" mi="0" ci="16" mb="0" cb="0"/><line nr="416" mi="0" ci="6" mb="0" cb="0"/><line nr="422" mi="0" ci="4" mb="0" cb="0"/><line nr="423" mi="0" ci="12" mb="0" cb="0"/><line nr="428" mi="0" ci="5" mb="0" cb="0"/><line nr="433" mi="0" ci="2" mb="0" cb="0"/><line nr="438" mi="0" ci="3" mb="0" cb="2"/><line nr="439" mi="0" ci="5" mb="0" cb="0"/><line nr="441" mi="0" ci="10" mb="0" cb="0"/><line nr="447" mi="0" ci="3" mb="0" cb="2"/><line nr="448" mi="0" ci="2" mb="0" cb="0"/><line nr="450" mi="0" ci="4" mb="0" cb="0"/><line nr="456" mi="0" ci="2" mb="0" cb="2"/><line nr="457" mi="0" ci="14" mb="0" cb="0"/><line nr="459" mi="0" ci="4" mb="0" cb="2"/><line nr="460" mi="0" ci="17" mb="0" cb="0"/><line nr="462" mi="0" ci="11" mb="0" cb="0"/><line nr="467" mi="0" ci="4" mb="0" cb="0"/><line nr="468" mi="0" ci="2" mb="0" cb="2"/><line nr="469" mi="0" ci="14" mb="0" cb="0"/><line nr="471" mi="0" ci="4" mb="0" cb="2"/><line nr="472" mi="0" ci="17" mb="0" cb="0"/><line nr="474" mi="0" ci="3" mb="0" cb="0"/><line nr="475" mi="0" ci="8" mb="0" cb="0"/><line nr="476" mi="0" ci="10" mb="0" cb="2"/><line nr="477" mi="0" ci="4" mb="0" cb="0"/><line nr="478" mi="0" ci="1" mb="0" cb="0"/><line nr="479" mi="0" ci="6" mb="0" cb="0"/><line nr="480" mi="0" ci="4" mb="0" cb="0"/><line nr="485" mi="0" ci="10" mb="0" cb="0"/><line nr="486" mi="0" ci="4" mb="0" cb="0"/><line nr="490" mi="0" ci="11" mb="0" cb="2"/><line nr="495" mi="0" ci="13" mb="0" cb="0"/><line nr="502" mi="0" ci="4" mb="0" cb="0"/><line nr="503" mi="0" ci="8" mb="0" cb="2"/><line nr="504" mi="0" ci="2" mb="0" cb="2"/><line nr="505" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="6" mb="0" cb="0"/><line nr="509" mi="0" ci="9" mb="0" cb="2"/><line nr="514" mi="0" ci="4" mb="0" cb="0"/><line nr="515" mi="0" ci="2" mb="0" cb="0"/><line nr="516" mi="0" ci="8" mb="0" cb="2"/><line nr="517" mi="0" ci="8" mb="0" cb="0"/><line nr="519" mi="0" ci="2" mb="0" cb="0"/><line nr="524" mi="0" ci="5" mb="0" cb="2"/><line nr="525" mi="0" ci="2" mb="0" cb="0"/><line nr="527" mi="0" ci="6" mb="0" cb="0"/><line nr="528" mi="0" ci="6" mb="0" cb="0"/><line nr="529" mi="0" ci="7" mb="0" cb="2"/><line nr="530" mi="0" ci="4" mb="0" cb="0"/><line nr="532" mi="0" ci="6" mb="0" cb="0"/><line nr="537" mi="0" ci="13" mb="0" cb="4"/><line nr="538" mi="0" ci="6" mb="0" cb="2"/><line nr="539" mi="0" ci="9" mb="0" cb="0"/><line nr="540" mi="0" ci="10" mb="0" cb="2"/><line nr="541" mi="0" ci="4" mb="0" cb="0"/><line nr="542" mi="0" ci="1" mb="0" cb="0"/><line nr="543" mi="0" ci="4" mb="0" cb="0"/><line nr="544" mi="0" ci="4" mb="0" cb="2"/><line nr="545" mi="0" ci="7" mb="0" cb="0"/><line nr="547" mi="0" ci="11" mb="0" cb="2"/><line nr="551" mi="0" ci="4" mb="0" cb="0"/><line nr="552" mi="0" ci="3" mb="0" cb="2"/><line nr="553" mi="0" ci="2" mb="0" cb="0"/><line nr="555" mi="0" ci="4" mb="0" cb="0"/><line nr="556" mi="0" ci="8" mb="0" cb="2"/><line nr="557" mi="0" ci="8" mb="0" cb="0"/><line nr="559" mi="0" ci="3" mb="0" cb="0"/><line nr="565" mi="3" ci="0" mb="0" cb="0"/><line nr="570" mi="0" ci="4" mb="0" cb="0"/><line nr="571" mi="0" ci="3" mb="0" cb="2"/><line nr="572" mi="0" ci="4" mb="0" cb="0"/><line nr="574" mi="0" ci="4" mb="0" cb="0"/><line nr="575" mi="0" ci="4" mb="0" cb="0"/><line nr="576" mi="0" ci="8" mb="0" cb="2"/><line nr="577" mi="0" ci="4" mb="0" cb="0"/><line nr="578" mi="0" ci="10" mb="0" cb="2"/><line nr="580" mi="0" ci="3" mb="0" cb="2"/><line nr="581" mi="0" ci="6" mb="0" cb="0"/><line nr="582" mi="0" ci="3" mb="0" cb="2"/><line nr="583" mi="0" ci="6" mb="0" cb="0"/><line nr="585" mi="0" ci="8" mb="0" cb="0"/><line nr="591" mi="0" ci="4" mb="0" cb="0"/><line nr="592" mi="0" ci="3" mb="0" cb="2"/><line nr="593" mi="0" ci="7" mb="0" cb="0"/><line nr="595" mi="0" ci="2" mb="0" cb="0"/><line nr="600" mi="0" ci="3" mb="0" cb="2"/><line nr="601" mi="0" ci="2" mb="0" cb="0"/><line nr="603" mi="0" ci="4" mb="0" cb="2"/><line nr="604" mi="0" ci="3" mb="0" cb="0"/><line nr="606" mi="0" ci="2" mb="0" cb="0"/><line nr="607" mi="0" ci="11" mb="0" cb="2"/><line nr="608" mi="0" ci="13" mb="0" cb="2"/><line nr="609" mi="0" ci="8" mb="0" cb="0"/><line nr="610" mi="0" ci="1" mb="0" cb="0"/><line nr="611" mi="0" ci="1" mb="0" cb="0"/><line nr="612" mi="0" ci="2" mb="0" cb="0"/><line nr="619" mi="0" ci="11" mb="0" cb="0"/><line nr="624" mi="0" ci="4" mb="0" cb="0"/><line nr="625" mi="0" ci="4" mb="0" cb="0"/><line nr="626" mi="0" ci="10" mb="0" cb="2"/><line nr="627" mi="0" ci="4" mb="0" cb="0"/><line nr="628" mi="0" ci="1" mb="0" cb="0"/><line nr="629" mi="0" ci="5" mb="0" cb="0"/><line nr="630" mi="0" ci="9" mb="0" cb="2"/><line nr="635" mi="0" ci="4" mb="0" cb="0"/><line nr="636" mi="0" ci="2" mb="0" cb="0"/><line nr="637" mi="0" ci="8" mb="0" cb="2"/><line nr="638" mi="0" ci="5" mb="0" cb="0"/><line nr="639" mi="0" ci="6" mb="0" cb="4"/><line nr="640" mi="0" ci="3" mb="0" cb="0"/><line nr="642" mi="0" ci="4" mb="0" cb="0"/><line nr="645" mi="0" ci="16" mb="0" cb="4"/><line nr="650" mi="0" ci="4" mb="0" cb="0"/><line nr="651" mi="0" ci="4" mb="0" cb="0"/><line nr="652" mi="0" ci="2" mb="0" cb="0"/><line nr="653" mi="0" ci="9" mb="0" cb="2"/><line nr="654" mi="0" ci="5" mb="0" cb="0"/><line nr="655" mi="0" ci="5" mb="0" cb="2"/><line nr="656" mi="0" ci="2" mb="0" cb="2"/><line nr="657" mi="0" ci="4" mb="0" cb="0"/><line nr="659" mi="0" ci="3" mb="0" cb="0"/><line nr="661" mi="0" ci="4" mb="0" cb="0"/><line nr="664" mi="0" ci="13" mb="0" cb="4"/><line nr="669" mi="0" ci="4" mb="0" cb="0"/><line nr="670" mi="0" ci="9" mb="0" cb="2"/><line nr="671" mi="0" ci="8" mb="0" cb="2"/><line nr="672" mi="0" ci="4" mb="0" cb="0"/><line nr="675" mi="0" ci="2" mb="0" cb="0"/><line nr="680" mi="0" ci="18" mb="0" cb="0"/><line nr="681" mi="0" ci="8" mb="0" cb="2"/><line nr="686" mi="0" ci="4" mb="0" cb="0"/><line nr="687" mi="0" ci="8" mb="0" cb="2"/><line nr="688" mi="0" ci="5" mb="0" cb="0"/><line nr="689" mi="0" ci="4" mb="0" cb="2"/><line nr="690" mi="0" ci="4" mb="0" cb="0"/><line nr="693" mi="0" ci="16" mb="0" cb="4"/><line nr="698" mi="0" ci="4" mb="0" cb="0"/><line nr="699" mi="0" ci="4" mb="0" cb="0"/><line nr="700" mi="0" ci="10" mb="0" cb="2"/><line nr="701" mi="0" ci="4" mb="0" cb="0"/><line nr="702" mi="0" ci="1" mb="0" cb="0"/><line nr="703" mi="0" ci="4" mb="0" cb="0"/><line nr="704" mi="0" ci="8" mb="0" cb="2"/><line nr="705" mi="0" ci="5" mb="0" cb="0"/><line nr="706" mi="0" ci="5" mb="0" cb="2"/><line nr="707" mi="0" ci="4" mb="0" cb="0"/><line nr="710" mi="0" ci="16" mb="0" cb="4"/><line nr="715" mi="0" ci="4" mb="0" cb="0"/><line nr="716" mi="0" ci="2" mb="0" cb="0"/><line nr="717" mi="0" ci="8" mb="0" cb="2"/><line nr="718" mi="0" ci="5" mb="0" cb="0"/><line nr="719" mi="0" ci="6" mb="0" cb="4"/><line nr="720" mi="0" ci="4" mb="0" cb="0"/><line nr="721" mi="0" ci="3" mb="0" cb="0"/><line nr="723" mi="0" ci="4" mb="0" cb="0"/><line nr="726" mi="0" ci="8" mb="0" cb="2"/><line nr="731" mi="0" ci="4" mb="0" cb="0"/><line nr="732" mi="0" ci="2" mb="0" cb="0"/><line nr="733" mi="0" ci="8" mb="0" cb="2"/><line nr="734" mi="0" ci="5" mb="0" cb="0"/><line nr="735" mi="0" ci="4" mb="0" cb="2"/><line nr="736" mi="0" ci="4" mb="0" cb="0"/><line nr="737" mi="0" ci="3" mb="0" cb="0"/><line nr="739" mi="0" ci="4" mb="0" cb="0"/><line nr="742" mi="0" ci="8" mb="0" cb="2"/><line nr="747" mi="0" ci="4" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="749" mi="0" ci="10" mb="0" cb="2"/><line nr="750" mi="0" ci="4" mb="0" cb="0"/><line nr="751" mi="0" ci="1" mb="0" cb="0"/><line nr="752" mi="0" ci="4" mb="0" cb="0"/><line nr="753" mi="0" ci="8" mb="0" cb="2"/><line nr="754" mi="0" ci="5" mb="0" cb="0"/><line nr="755" mi="0" ci="5" mb="0" cb="2"/><line nr="756" mi="0" ci="4" mb="0" cb="0"/><line nr="759" mi="0" ci="9" mb="0" cb="2"/><line nr="764" mi="0" ci="9" mb="0" cb="0"/><line nr="769" mi="0" ci="5" mb="0" cb="0"/><line nr="774" mi="0" ci="4" mb="0" cb="0"/><line nr="775" mi="0" ci="9" mb="0" cb="0"/><line nr="780" mi="0" ci="4" mb="0" cb="0"/><line nr="781" mi="0" ci="9" mb="0" cb="0"/><line nr="786" mi="0" ci="6" mb="0" cb="2"/><line nr="787" mi="0" ci="9" mb="0" cb="2"/><line nr="788" mi="0" ci="3" mb="0" cb="2"/><line nr="789" mi="0" ci="2" mb="0" cb="0"/><line nr="791" mi="0" ci="6" mb="0" cb="4"/><line nr="792" mi="0" ci="2" mb="0" cb="0"/><line nr="794" mi="0" ci="7" mb="0" cb="0"/><line nr="799" mi="0" ci="5" mb="0" cb="0"/><line nr="804" mi="0" ci="8" mb="0" cb="0"/><line nr="809" mi="0" ci="12" mb="0" cb="2"/><line nr="814" mi="0" ci="4" mb="0" cb="0"/><line nr="815" mi="0" ci="13" mb="0" cb="2"/><line nr="820" mi="0" ci="5" mb="0" cb="0"/><line nr="825" mi="0" ci="8" mb="0" cb="0"/><line nr="826" mi="0" ci="6" mb="0" cb="0"/><line nr="827" mi="0" ci="10" mb="0" cb="0"/><line nr="828" mi="0" ci="3" mb="0" cb="0"/><line nr="833" mi="0" ci="4" mb="0" cb="0"/><line nr="834" mi="0" ci="4" mb="0" cb="0"/><line nr="835" mi="0" ci="8" mb="0" cb="2"/><line nr="836" mi="0" ci="5" mb="0" cb="0"/><line nr="837" mi="0" ci="5" mb="0" cb="2"/><line nr="838" mi="0" ci="4" mb="0" cb="0"/><line nr="843" mi="0" ci="4" mb="0" cb="0"/><line nr="848" mi="0" ci="8" mb="0" cb="0"/><line nr="853" mi="0" ci="6" mb="0" cb="4"/><line nr="854" mi="0" ci="14" mb="0" cb="0"/><line nr="856" mi="0" ci="2" mb="0" cb="2"/><line nr="857" mi="0" ci="2" mb="0" cb="0"/><line nr="858" mi="0" ci="4" mb="0" cb="2"/><line nr="859" mi="0" ci="2" mb="0" cb="0"/><line nr="861" mi="0" ci="6" mb="0" cb="0"/><line nr="867" mi="0" ci="3" mb="0" cb="2"/><line nr="868" mi="0" ci="5" mb="0" cb="0"/><line nr="870" mi="0" ci="6" mb="0" cb="0"/><line nr="876" mi="0" ci="3" mb="0" cb="2"/><line nr="877" mi="0" ci="2" mb="0" cb="0"/><line nr="879" mi="0" ci="7" mb="0" cb="0"/><line nr="885" mi="0" ci="2" mb="0" cb="2"/><line nr="886" mi="0" ci="2" mb="0" cb="0"/><line nr="887" mi="0" ci="4" mb="0" cb="2"/><line nr="888" mi="0" ci="2" mb="0" cb="0"/><line nr="890" mi="0" ci="7" mb="0" cb="0"/><line nr="896" mi="0" ci="2" mb="0" cb="2"/><line nr="897" mi="0" ci="2" mb="0" cb="0"/><line nr="898" mi="0" ci="4" mb="0" cb="2"/><line nr="899" mi="0" ci="2" mb="0" cb="0"/><line nr="901" mi="0" ci="9" mb="0" cb="0"/><line nr="907" mi="0" ci="4" mb="0" cb="0"/><line nr="908" mi="0" ci="5" mb="0" cb="0"/><line nr="913" mi="0" ci="4" mb="0" cb="0"/><line nr="914" mi="0" ci="4" mb="0" cb="0"/><line nr="915" mi="0" ci="8" mb="0" cb="2"/><line nr="916" mi="0" ci="5" mb="0" cb="0"/><line nr="917" mi="0" ci="5" mb="0" cb="2"/><line nr="918" mi="0" ci="1" mb="0" cb="0"/><line nr="920" mi="0" ci="4" mb="0" cb="0"/><line nr="922" mi="0" ci="16" mb="0" cb="4"/><line nr="927" mi="0" ci="3" mb="0" cb="0"/><line nr="933" mi="0" ci="4" mb="0" cb="0"/><line nr="934" mi="0" ci="2" mb="0" cb="0"/><line nr="935" mi="0" ci="2" mb="0" cb="0"/><line nr="936" mi="0" ci="8" mb="0" cb="2"/><line nr="937" mi="0" ci="9" mb="0" cb="0"/><line nr="938" mi="0" ci="5" mb="0" cb="0"/><line nr="939" mi="0" ci="5" mb="0" cb="0"/><line nr="941" mi="0" ci="4" mb="0" cb="0"/><line nr="947" mi="0" ci="4" mb="0" cb="0"/><line nr="948" mi="0" ci="2" mb="0" cb="0"/><line nr="949" mi="0" ci="2" mb="0" cb="0"/><line nr="950" mi="0" ci="2" mb="0" cb="0"/><line nr="951" mi="0" ci="8" mb="0" cb="2"/><line nr="952" mi="0" ci="9" mb="0" cb="0"/><line nr="953" mi="0" ci="5" mb="0" cb="0"/><line nr="954" mi="0" ci="5" mb="0" cb="0"/><line nr="955" mi="0" ci="5" mb="0" cb="0"/><line nr="957" mi="0" ci="5" mb="0" cb="0"/><line nr="962" mi="0" ci="2" mb="0" cb="2"/><line nr="963" mi="0" ci="14" mb="0" cb="0"/><line nr="965" mi="0" ci="4" mb="0" cb="2"/><line nr="966" mi="0" ci="14" mb="0" cb="0"/><line nr="968" mi="0" ci="21" mb="0" cb="0"/><line nr="973" mi="0" ci="4" mb="0" cb="0"/><line nr="974" mi="0" ci="2" mb="0" cb="0"/><line nr="975" mi="0" ci="3" mb="0" cb="0"/><line nr="976" mi="0" ci="3" mb="0" cb="0"/><line nr="977" mi="0" ci="6" mb="0" cb="4"/><line nr="978" mi="0" ci="9" mb="0" cb="0"/><line nr="980" mi="0" ci="2" mb="0" cb="0"/><line nr="985" mi="0" ci="4" mb="0" cb="0"/><line nr="986" mi="0" ci="2" mb="0" cb="0"/><line nr="987" mi="0" ci="3" mb="0" cb="0"/><line nr="988" mi="0" ci="3" mb="0" cb="0"/><line nr="989" mi="0" ci="6" mb="0" cb="4"/><line nr="990" mi="0" ci="9" mb="0" cb="2"/><line nr="991" mi="0" ci="8" mb="0" cb="2"/><line nr="992" mi="0" ci="6" mb="0" cb="0"/><line nr="993" mi="0" ci="1" mb="0" cb="0"/><line nr="994" mi="0" ci="2" mb="0" cb="0"/><line nr="999" mi="0" ci="2" mb="0" cb="0"/><line nr="1000" mi="0" ci="8" mb="0" cb="2"/><line nr="1001" mi="0" ci="9" mb="0" cb="0"/><line nr="1003" mi="0" ci="2" mb="0" cb="0"/><line nr="1008" mi="0" ci="6" mb="0" cb="0"/><line nr="1013" mi="0" ci="7" mb="0" cb="0"/><line nr="1018" mi="0" ci="7" mb="0" cb="0"/><line nr="1023" mi="0" ci="2" mb="0" cb="2"/><line nr="1024" mi="0" ci="4" mb="0" cb="0"/><line nr="1025" mi="0" ci="4" mb="0" cb="2"/><line nr="1026" mi="0" ci="4" mb="0" cb="0"/><line nr="1028" mi="0" ci="13" mb="0" cb="0"/><line nr="1034" mi="0" ci="4" mb="0" cb="0"/><line nr="1035" mi="0" ci="3" mb="0" cb="2"/><line nr="1036" mi="0" ci="4" mb="0" cb="0"/><line nr="1038" mi="0" ci="4" mb="0" cb="0"/><line nr="1039" mi="0" ci="8" mb="0" cb="2"/><line nr="1040" mi="0" ci="4" mb="0" cb="0"/><line nr="1041" mi="0" ci="4" mb="0" cb="2"/><line nr="1042" mi="0" ci="4" mb="0" cb="0"/><line nr="1047" mi="0" ci="4" mb="0" cb="0"/><line nr="1052" mi="0" ci="4" mb="0" cb="0"/><line nr="1053" mi="0" ci="3" mb="0" cb="2"/><line nr="1054" mi="0" ci="4" mb="0" cb="0"/><line nr="1056" mi="0" ci="4" mb="0" cb="0"/><line nr="1057" mi="0" ci="8" mb="0" cb="2"/><line nr="1058" mi="0" ci="4" mb="0" cb="0"/><line nr="1059" mi="0" ci="4" mb="0" cb="0"/><line nr="1060" mi="0" ci="4" mb="0" cb="2"/><line nr="1061" mi="0" ci="1" mb="0" cb="0"/><line nr="1064" mi="0" ci="4" mb="0" cb="0"/><line nr="1069" mi="0" ci="6" mb="0" cb="0"/><line nr="1074" mi="0" ci="3" mb="0" cb="2"/><line nr="1075" mi="0" ci="5" mb="0" cb="0"/><line nr="1077" mi="0" ci="6" mb="0" cb="0"/><line nr="1083" mi="0" ci="3" mb="0" cb="2"/><line nr="1084" mi="0" ci="2" mb="0" cb="0"/><line nr="1086" mi="0" ci="7" mb="0" cb="0"/><line nr="1092" mi="0" ci="4" mb="0" cb="0"/><line nr="1097" mi="0" ci="2" mb="0" cb="0"/><line nr="1101" mi="0" ci="7" mb="0" cb="2"/><line nr="1106" mi="0" ci="3" mb="0" cb="2"/><line nr="1107" mi="0" ci="2" mb="0" cb="0"/><line nr="1108" mi="0" ci="3" mb="0" cb="2"/><line nr="1109" mi="0" ci="7" mb="0" cb="0"/><line nr="1111" mi="0" ci="2" mb="0" cb="0"/><line nr="1117" mi="0" ci="4" mb="0" cb="0"/><line nr="1146" mi="0" ci="5" mb="0" cb="0"/><line nr="1159" mi="0" ci="4" mb="0" cb="0"/><line nr="1190" mi="0" ci="5" mb="0" cb="0"/><line nr="1215" mi="0" ci="5" mb="0" cb="0"/><line nr="1239" mi="0" ci="6" mb="0" cb="0"/><line nr="1262" mi="0" ci="6" mb="0" cb="0"/><line nr="1296" mi="0" ci="7" mb="0" cb="0"/><line nr="1297" mi="0" ci="1" mb="0" cb="0"/><line nr="1314" mi="0" ci="5" mb="0" cb="0"/><line nr="1332" mi="0" ci="5" mb="0" cb="0"/><line nr="1347" mi="0" ci="4" mb="0" cb="0"/><line nr="1362" mi="0" ci="5" mb="0" cb="0"/><line nr="1378" mi="0" ci="5" mb="0" cb="0"/><line nr="1407" mi="0" ci="6" mb="0" cb="0"/><line nr="1452" mi="0" ci="6" mb="0" cb="0"/><line nr="1474" mi="0" ci="6" mb="0" cb="0"/><line nr="1510" mi="0" ci="9" mb="0" cb="0"/><line nr="1564" mi="0" ci="10" mb="0" cb="0"/><line nr="1569" mi="0" ci="2" mb="0" cb="2"/><line nr="1570" mi="0" ci="14" mb="0" cb="0"/><line nr="1572" mi="0" ci="4" mb="0" cb="2"/><line nr="1573" mi="0" ci="17" mb="0" cb="0"/><line nr="1575" mi="0" ci="4" mb="0" cb="0"/><line nr="1576" mi="0" ci="2" mb="0" cb="2"/><line nr="1577" mi="0" ci="16" mb="0" cb="0"/><line nr="1579" mi="0" ci="6" mb="0" cb="4"/><line nr="1580" mi="0" ci="2" mb="0" cb="0"/><line nr="1582" mi="0" ci="7" mb="0" cb="0"/><line nr="1604" mi="0" ci="7" mb="0" cb="0"/><line nr="1620" mi="0" ci="6" mb="0" cb="0"/><line nr="1635" mi="0" ci="6" mb="0" cb="0"/><line nr="1663" mi="0" ci="5" mb="0" cb="0"/><line nr="1706" mi="0" ci="6" mb="0" cb="0"/><line nr="1733" mi="0" ci="5" mb="0" cb="0"/><line nr="1771" mi="0" ci="6" mb="0" cb="0"/><line nr="1789" mi="0" ci="6" mb="0" cb="0"/><line nr="1809" mi="0" ci="7" mb="0" cb="0"/><line nr="1828" mi="0" ci="6" mb="0" cb="0"/><line nr="1848" mi="0" ci="7" mb="0" cb="0"/><line nr="1869" mi="0" ci="6" mb="0" cb="0"/><line nr="1895" mi="0" ci="7" mb="0" cb="0"/><line nr="1900" mi="0" ci="2" mb="0" cb="0"/><line nr="1912" mi="0" ci="3" mb="0" cb="0"/><line nr="1936" mi="0" ci="7" mb="0" cb="0"/><line nr="1959" mi="0" ci="5" mb="0" cb="0"/><line nr="1970" mi="0" ci="5" mb="0" cb="0"/><line nr="2006" mi="0" ci="7" mb="0" cb="0"/><line nr="2042" mi="0" ci="7" mb="0" cb="0"/><line nr="2057" mi="0" ci="7" mb="0" cb="0"/><line nr="2136" mi="0" ci="6" mb="0" cb="0"/><line nr="2137" mi="0" ci="4" mb="0" cb="0"/><line nr="2138" mi="0" ci="8" mb="0" cb="2"/><line nr="2139" mi="0" ci="7" mb="0" cb="0"/><line nr="2141" mi="0" ci="2" mb="0" cb="0"/><line nr="2174" mi="0" ci="5" mb="0" cb="0"/><line nr="2229" mi="0" ci="6" mb="0" cb="0"/><line nr="2253" mi="0" ci="6" mb="0" cb="0"/><line nr="2305" mi="0" ci="6" mb="0" cb="0"/><line nr="2329" mi="0" ci="6" mb="0" cb="0"/><line nr="2364" mi="0" ci="5" mb="0" cb="0"/><line nr="2375" mi="0" ci="4" mb="0" cb="0"/><line nr="2394" mi="0" ci="2" mb="0" cb="2"/><line nr="2395" mi="0" ci="3" mb="0" cb="0"/><line nr="2397" mi="0" ci="7" mb="0" cb="0"/><line nr="2398" mi="0" ci="22" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="2771"/><counter type="BRANCH" missed="0" covered="294"/><counter type="LINE" missed="1" covered="506"/><counter type="COMPLEXITY" missed="1" covered="312"/><counter type="METHOD" missed="1" covered="165"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="AbstractIterator.java"><line nr="20" mi="0" ci="3" mb="0" cb="0"/><line nr="24" mi="2" ci="17" mb="1" cb="1"/><line nr="31" mi="0" ci="3" mb="0" cb="2"/><line nr="32" mi="0" ci="5" mb="0" cb="0"/><line nr="34" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="HashSet.java"><line nr="34" mi="0" ci="6" mb="0" cb="0"/><line nr="39" mi="0" ci="2" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="13" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="46" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="59" mi="0" ci="2" mb="0" cb="0"/><line nr="60" mi="0" ci="4" mb="0" cb="0"/><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="63" mi="0" ci="2" mb="0" cb="0"/><line nr="64" mi="0" ci="8" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="2" mb="0" cb="0"/><line nr="92" mi="0" ci="16" mb="0" cb="2"/><line nr="93" mi="0" ci="5" mb="0" cb="0"/><line nr="95" mi="0" ci="10" mb="0" cb="2"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="7" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="7" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="3" mb="0" cb="2"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="140" mi="0" ci="4" mb="0" cb="0"/><line nr="141" mi="0" ci="10" mb="0" cb="2"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="4" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="196" mi="0" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="4" mb="0" cb="0"/><line nr="207" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="250" mi="0" ci="5" mb="0" cb="0"/><line nr="254" mi="0" ci="5" mb="0" cb="0"/><line nr="280" mi="0" ci="6" mb="0" cb="0"/><line nr="284" mi="0" ci="6" mb="0" cb="0"/><line nr="288" mi="0" ci="6" mb="0" cb="0"/><line nr="308" mi="0" ci="5" mb="0" cb="0"/><line nr="334" mi="0" ci="6" mb="0" cb="0"/><line nr="354" mi="0" ci="5" mb="0" cb="0"/><line nr="358" mi="0" ci="5" mb="0" cb="0"/><line nr="384" mi="0" ci="6" mb="0" cb="0"/><line nr="388" mi="0" ci="6" mb="0" cb="0"/><line nr="392" mi="0" ci="6" mb="0" cb="0"/><line nr="412" mi="0" ci="5" mb="0" cb="0"/><line nr="438" mi="0" ci="6" mb="0" cb="0"/><line nr="443" mi="0" ci="9" mb="0" cb="0"/><line nr="448" mi="0" ci="4" mb="0" cb="0"/><line nr="449" mi="0" ci="5" mb="0" cb="0"/><line nr="450" mi="0" ci="6" mb="0" cb="2"/><line nr="451" mi="0" ci="2" mb="0" cb="0"/><line nr="453" mi="0" ci="5" mb="0" cb="0"/><line nr="459" mi="0" ci="2" mb="0" cb="0"/><line nr="464" mi="0" ci="6" mb="0" cb="0"/><line nr="469" mi="0" ci="4" mb="0" cb="0"/><line nr="470" mi="0" ci="6" mb="1" cb="3"/><line nr="471" mi="0" ci="2" mb="0" cb="0"/><line nr="473" mi="0" ci="4" mb="0" cb="0"/><line nr="479" mi="0" ci="2" mb="0" cb="0"/><line nr="484" mi="0" ci="4" mb="0" cb="0"/><line nr="485" mi="0" ci="6" mb="0" cb="0"/><line nr="490" mi="0" ci="4" mb="0" cb="0"/><line nr="491" mi="0" ci="6" mb="0" cb="0"/><line nr="496" mi="0" ci="2" mb="0" cb="2"/><line nr="497" mi="0" ci="2" mb="0" cb="0"/><line nr="499" mi="0" ci="6" mb="0" cb="0"/><line nr="505" mi="0" ci="4" mb="0" cb="0"/><line nr="510" mi="0" ci="4" mb="0" cb="0"/><line nr="511" mi="0" ci="5" mb="0" cb="0"/><line nr="516" mi="0" ci="4" mb="0" cb="0"/><line nr="517" mi="0" ci="6" mb="0" cb="0"/><line nr="518" mi="0" ci="9" mb="0" cb="2"/><line nr="523" mi="0" ci="4" mb="0" cb="0"/><line nr="524" mi="0" ci="6" mb="0" cb="0"/><line nr="525" mi="0" ci="9" mb="0" cb="2"/><line nr="530" mi="0" ci="4" mb="0" cb="0"/><line nr="531" mi="0" ci="5" mb="0" cb="0"/><line nr="536" mi="4" ci="0" mb="0" cb="0"/><line nr="537" mi="3" ci="0" mb="2" cb="0"/><line nr="538" mi="2" ci="0" mb="0" cb="0"/><line nr="540" mi="7" ci="0" mb="0" cb="0"/><line nr="541" mi="7" ci="0" mb="0" cb="0"/><line nr="542" mi="5" ci="0" mb="0" cb="0"/><line nr="548" mi="0" ci="11" mb="0" cb="0"/><line nr="553" mi="0" ci="7" mb="0" cb="0"/><line nr="554" mi="0" ci="4" mb="0" cb="0"/><line nr="555" mi="0" ci="15" mb="0" cb="0"/><line nr="556" mi="0" ci="5" mb="0" cb="0"/><line nr="562" mi="0" ci="5" mb="0" cb="0"/><line nr="567" mi="0" ci="2" mb="0" cb="0"/><line nr="572" mi="0" ci="4" mb="0" cb="2"/><line nr="573" mi="0" ci="5" mb="0" cb="0"/><line nr="575" mi="0" ci="4" mb="0" cb="0"/><line nr="580" mi="0" ci="4" mb="0" cb="0"/><line nr="585" mi="0" ci="3" mb="0" cb="0"/><line nr="590" mi="0" ci="3" mb="0" cb="0"/><line nr="595" mi="0" ci="4" mb="0" cb="0"/><line nr="596" mi="0" ci="6" mb="1" cb="3"/><line nr="597" mi="0" ci="2" mb="0" cb="0"/><line nr="599" mi="0" ci="4" mb="0" cb="0"/><line nr="605" mi="0" ci="4" mb="0" cb="0"/><line nr="610" mi="0" ci="2" mb="0" cb="0"/><line nr="615" mi="0" ci="9" mb="0" cb="0"/><line nr="620" mi="0" ci="4" mb="0" cb="0"/><line nr="625" mi="0" ci="4" mb="0" cb="0"/><line nr="626" mi="0" ci="3" mb="1" cb="1"/><line nr="627" mi="2" ci="0" mb="0" cb="0"/><line nr="629" mi="0" ci="7" mb="0" cb="0"/><line nr="630" mi="0" ci="4" mb="0" cb="0"/><line nr="631" mi="0" ci="5" mb="0" cb="0"/><line nr="633" mi="0" ci="5" mb="0" cb="0"/><line nr="639" mi="0" ci="3" mb="0" cb="0"/><line nr="644" mi="0" ci="7" mb="0" cb="0"/><line nr="649" mi="0" ci="4" mb="0" cb="0"/><line nr="650" mi="0" ci="5" mb="0" cb="0"/><line nr="651" mi="0" ci="10" mb="0" cb="0"/><line nr="656" mi="0" ci="4" mb="0" cb="0"/><line nr="657" mi="0" ci="3" mb="0" cb="2"/><line nr="658" mi="0" ci="5" mb="0" cb="0"/><line nr="660" mi="0" ci="2" mb="0" cb="0"/><line nr="665" mi="0" ci="5" mb="0" cb="0"/><line nr="666" mi="0" ci="11" mb="0" cb="2"/><line nr="671" mi="0" ci="4" mb="0" cb="0"/><line nr="672" mi="0" ci="3" mb="0" cb="0"/><line nr="673" mi="0" ci="9" mb="0" cb="2"/><line nr="674" mi="0" ci="4" mb="0" cb="0"/><line nr="675" mi="0" ci="1" mb="0" cb="0"/><line nr="676" mi="0" ci="11" mb="0" cb="2"/><line nr="681" mi="0" ci="5" mb="0" cb="2"/><line nr="682" mi="0" ci="6" mb="0" cb="0"/><line nr="684" mi="0" ci="2" mb="0" cb="0"/><line nr="690" mi="0" ci="5" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="4" mb="0" cb="0"/><line nr="697" mi="0" ci="2" mb="0" cb="0"/><line nr="698" mi="0" ci="9" mb="0" cb="2"/><line nr="699" mi="0" ci="4" mb="0" cb="2"/><line nr="700" mi="0" ci="5" mb="0" cb="0"/><line nr="702" mi="0" ci="1" mb="0" cb="0"/><line nr="703" mi="0" ci="17" mb="0" cb="4"/><line nr="708" mi="0" ci="5" mb="0" cb="0"/><line nr="713" mi="0" ci="4" mb="0" cb="0"/><line nr="714" mi="0" ci="11" mb="0" cb="0"/><line nr="715" mi="0" ci="4" mb="0" cb="0"/><line nr="716" mi="0" ci="2" mb="0" cb="0"/><line nr="722" mi="0" ci="4" mb="0" cb="0"/><line nr="723" mi="0" ci="9" mb="0" cb="0"/><line nr="728" mi="0" ci="5" mb="0" cb="0"/><line nr="733" mi="0" ci="8" mb="0" cb="0"/><line nr="738" mi="0" ci="4" mb="0" cb="0"/><line nr="739" mi="0" ci="5" mb="0" cb="0"/><line nr="740" mi="0" ci="10" mb="0" cb="0"/><line nr="745" mi="0" ci="4" mb="0" cb="2"/><line nr="746" mi="0" ci="5" mb="0" cb="0"/><line nr="748" mi="0" ci="5" mb="0" cb="0"/><line nr="753" mi="0" ci="4" mb="0" cb="2"/><line nr="754" mi="0" ci="2" mb="0" cb="0"/><line nr="756" mi="0" ci="4" mb="0" cb="0"/><line nr="762" mi="0" ci="5" mb="0" cb="2"/><line nr="763" mi="0" ci="2" mb="0" cb="0"/><line nr="765" mi="0" ci="10" mb="0" cb="0"/><line nr="770" mi="0" ci="4" mb="0" cb="0"/><line nr="775" mi="0" ci="4" mb="0" cb="0"/><line nr="776" mi="0" ci="5" mb="0" cb="0"/><line nr="781" mi="0" ci="4" mb="0" cb="0"/><line nr="782" mi="0" ci="6" mb="0" cb="0"/><line nr="783" mi="0" ci="9" mb="0" cb="2"/><line nr="789" mi="0" ci="4" mb="0" cb="0"/><line nr="790" mi="0" ci="3" mb="0" cb="2"/><line nr="791" mi="0" ci="3" mb="1" cb="1"/><line nr="792" mi="0" ci="3" mb="0" cb="0"/><line nr="794" mi="3" ci="0" mb="0" cb="0"/><line nr="796" mi="0" ci="3" mb="1" cb="1"/><line nr="797" mi="2" ci="0" mb="0" cb="0"/><line nr="799" mi="0" ci="5" mb="0" cb="0"/><line nr="800" mi="0" ci="6" mb="0" cb="2"/><line nr="801" mi="0" ci="2" mb="0" cb="0"/><line nr="803" mi="0" ci="5" mb="0" cb="0"/><line nr="810" mi="3" ci="0" mb="0" cb="0"/><line nr="816" mi="0" ci="4" mb="0" cb="0"/><line nr="817" mi="0" ci="5" mb="0" cb="0"/><line nr="818" mi="0" ci="10" mb="0" cb="0"/><line nr="824" mi="0" ci="4" mb="0" cb="0"/><line nr="825" mi="0" ci="5" mb="0" cb="0"/><line nr="826" mi="0" ci="14" mb="0" cb="0"/><line nr="831" mi="0" ci="4" mb="0" cb="0"/><line nr="832" mi="0" ci="6" mb="0" cb="0"/><line nr="837" mi="0" ci="4" mb="0" cb="0"/><line nr="838" mi="0" ci="8" mb="0" cb="0"/><line nr="843" mi="0" ci="5" mb="0" cb="0"/><line nr="850" mi="0" ci="6" mb="0" cb="0"/><line nr="856" mi="0" ci="3" mb="0" cb="2"/><line nr="857" mi="0" ci="2" mb="0" cb="0"/><line nr="858" mi="0" ci="3" mb="0" cb="2"/><line nr="859" mi="0" ci="3" mb="0" cb="0"/><line nr="860" mi="0" ci="13" mb="0" cb="4"/><line nr="862" mi="0" ci="2" mb="0" cb="0"/><line nr="868" mi="0" ci="2" mb="0" cb="0"/><line nr="873" mi="0" ci="14" mb="0" cb="0"/><line nr="878" mi="0" ci="2" mb="0" cb="0"/><line nr="879" mi="0" ci="9" mb="0" cb="2"/><line nr="880" mi="0" ci="5" mb="0" cb="0"/><line nr="881" mi="0" ci="1" mb="0" cb="0"/><line nr="882" mi="0" ci="2" mb="0" cb="0"/><line nr="896" mi="0" ci="6" mb="0" cb="0"/><line nr="908" mi="5" ci="0" mb="0" cb="0"/><line nr="934" mi="0" ci="2" mb="0" cb="0"/><line nr="935" mi="0" ci="3" mb="0" cb="0"/><line nr="936" mi="0" ci="1" mb="0" cb="0"/><line nr="945" mi="0" ci="2" mb="0" cb="0"/><line nr="946" mi="0" ci="5" mb="0" cb="0"/><line nr="947" mi="0" ci="11" mb="0" cb="2"/><line nr="948" mi="0" ci="4" mb="0" cb="0"/><line nr="949" mi="0" ci="1" mb="0" cb="0"/><line nr="950" mi="0" ci="1" mb="0" cb="0"/><line nr="961" mi="0" ci="2" mb="0" cb="0"/><line nr="962" mi="0" ci="3" mb="0" cb="0"/><line nr="963" mi="0" ci="2" mb="1" cb="1"/><line nr="964" mi="5" ci="0" mb="0" cb="0"/><line nr="966" mi="0" ci="2" mb="0" cb="0"/><line nr="967" mi="0" ci="7" mb="0" cb="2"/><line nr="969" mi="0" ci="3" mb="0" cb="0"/><line nr="970" mi="0" ci="5" mb="0" cb="0"/><line nr="972" mi="0" ci="3" mb="0" cb="0"/><line nr="973" mi="0" ci="1" mb="0" cb="0"/><line nr="985" mi="0" ci="13" mb="0" cb="2"/><counter type="INSTRUCTION" missed="48" covered="1106"/><counter type="BRANCH" missed="8" covered="74"/><counter type="LINE" missed="12" covered="226"/><counter type="COMPLEXITY" missed="11" covered="139"/><counter type="METHOD" missed="4" covered="105"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="SortedMap.java"><line nr="133" mi="11" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="RedBlackTree.java"><line nr="39" mi="0" ci="7" mb="0" cb="0"/><line nr="43" mi="0" ci="4" mb="0" cb="0"/><line nr="44" mi="0" ci="5" mb="0" cb="0"/><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="52" mi="0" ci="4" mb="0" cb="0"/><line nr="53" mi="0" ci="5" mb="0" cb="0"/><line nr="54" mi="0" ci="10" mb="0" cb="0"/><line nr="60" mi="0" ci="4" mb="0" cb="0"/><line nr="61" mi="0" ci="6" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="4" mb="0" cb="0"/><line nr="68" mi="0" ci="3" mb="0" cb="0"/><line nr="69" mi="0" ci="16" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="2" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="6" mb="0" cb="0"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="85" mi="5" ci="3" mb="3" cb="1"/><line nr="86" mi="3" ci="0" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="89" mi="0" ci="9" mb="0" cb="2"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="1" mb="0" cb="0"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="6" mb="0" cb="0"/><line nr="144" mi="0" ci="6" mb="0" cb="0"/><line nr="145" mi="0" ci="4" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="6" mb="0" cb="4"/><line nr="151" mi="0" ci="2" mb="0" cb="0"/><line nr="153" mi="0" ci="3" mb="0" cb="0"/><line nr="154" mi="0" ci="5" mb="0" cb="0"/><line nr="155" mi="0" ci="14" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="0" cb="2"/><line nr="174" mi="0" ci="2" mb="0" cb="0"/><line nr="175" mi="0" ci="3" mb="0" cb="2"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="0" ci="5" mb="0" cb="0"/><line nr="180" mi="0" ci="5" mb="0" cb="2"/><line nr="181" mi="0" ci="16" mb="0" cb="0"/><line nr="183" mi="0" ci="14" mb="0" cb="0"/><line nr="209" mi="0" ci="10" mb="0" cb="2"/><line nr="218" mi="0" ci="10" mb="0" cb="2"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="244" mi="0" ci="3" mb="0" cb="2"/><line nr="245" mi="0" ci="2" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="2"/><line nr="249" mi="0" ci="4" mb="0" cb="0"/><line nr="251" mi="0" ci="5" mb="0" cb="0"/><line nr="252" mi="0" ci="16" mb="0" cb="0"/><line nr="286" mi="0" ci="3" mb="0" cb="2"/><line nr="287" mi="0" ci="2" mb="0" cb="0"/><line nr="289" mi="0" ci="3" mb="0" cb="0"/><line nr="290" mi="0" ci="14" mb="0" cb="0"/><line nr="292" mi="0" ci="8" mb="0" cb="0"/><line nr="296" mi="0" ci="8" mb="0" cb="2"/><line nr="301" mi="0" ci="4" mb="0" cb="0"/><line nr="302" mi="0" ci="4" mb="0" cb="0"/><line nr="303" mi="0" ci="18" mb="0" cb="2"/><line nr="304" mi="0" ci="5" mb="0" cb="0"/><line nr="308" mi="0" ci="2" mb="0" cb="0"/><line nr="309" mi="0" ci="2" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="2"/><line nr="311" mi="0" ci="3" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="0"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="314" mi="0" ci="1" mb="0" cb="0"/><line nr="315" mi="0" ci="2" mb="0" cb="0"/><line nr="345" mi="5" ci="21" mb="0" cb="0"/><line nr="347" mi="0" ci="12" mb="0" cb="0"/><line nr="351" mi="0" ci="7" mb="0" cb="2"/><line nr="378" mi="0" ci="2" mb="0" cb="0"/><line nr="379" mi="0" ci="3" mb="0" cb="0"/><line nr="380" mi="0" ci="3" mb="0" cb="0"/><line nr="381" mi="0" ci="3" mb="0" cb="0"/><line nr="382" mi="0" ci="3" mb="0" cb="0"/><line nr="383" mi="0" ci="3" mb="0" cb="0"/><line nr="384" mi="0" ci="3" mb="0" cb="0"/><line nr="385" mi="0" ci="17" mb="0" cb="0"/><line nr="386" mi="0" ci="9" mb="0" cb="0"/><line nr="387" mi="0" ci="1" mb="0" cb="0"/><line nr="391" mi="0" ci="3" mb="0" cb="0"/><line nr="396" mi="0" ci="3" mb="0" cb="0"/><line nr="401" mi="0" ci="4" mb="0" cb="0"/><line nr="406" mi="0" ci="8" mb="0" cb="0"/><line nr="407" mi="0" ci="2" mb="0" cb="2"/><line nr="408" mi="0" ci="5" mb="0" cb="0"/><line nr="409" mi="0" ci="2" mb="0" cb="2"/><line nr="410" mi="0" ci="5" mb="0" cb="0"/><line nr="412" mi="0" ci="2" mb="0" cb="0"/><line nr="418" mi="0" ci="8" mb="0" cb="0"/><line nr="419" mi="0" ci="2" mb="0" cb="2"/><line nr="420" mi="0" ci="5" mb="0" cb="0"/><line nr="421" mi="0" ci="2" mb="0" cb="2"/><line nr="422" mi="0" ci="5" mb="0" cb="0"/><line nr="424" mi="0" ci="4" mb="0" cb="0"/><line nr="430" mi="0" ci="2" mb="0" cb="0"/><line nr="435" mi="0" ci="3" mb="0" cb="0"/><line nr="440" mi="0" ci="3" mb="0" cb="0"/><line nr="445" mi="0" ci="3" mb="0" cb="0"/><line nr="450" mi="0" ci="3" mb="0" cb="0"/><line nr="455" mi="0" ci="3" mb="0" cb="2"/><line nr="456" mi="0" ci="2" mb="0" cb="0"/><line nr="457" mi="0" ci="3" mb="1" cb="1"/><line nr="458" mi="0" ci="3" mb="0" cb="0"/><line nr="459" mi="0" ci="3" mb="0" cb="0"/><line nr="460" mi="0" ci="3" mb="0" cb="0"/><line nr="461" mi="0" ci="6" mb="0" cb="4"/><line nr="462" mi="0" ci="6" mb="0" cb="2"/><line nr="463" mi="0" ci="2" mb="0" cb="0"/><line nr="466" mi="0" ci="9" mb="0" cb="2"/><line nr="468" mi="2" ci="0" mb="0" cb="0"/><line nr="474" mi="0" ci="3" mb="0" cb="0"/><line nr="479" mi="0" ci="23" mb="0" cb="2"/><line nr="483" mi="0" ci="3" mb="1" cb="1"/><line nr="484" mi="2" ci="0" mb="0" cb="0"/><line nr="486" mi="0" ci="3" mb="0" cb="0"/><line nr="487" mi="0" ci="13" mb="0" cb="0"/><line nr="488" mi="0" ci="3" mb="0" cb="2"/><line nr="489" mi="0" ci="2" mb="0" cb="0"/><line nr="491" mi="0" ci="17" mb="0" cb="2"/><line nr="492" mi="0" ci="17" mb="0" cb="2"/><line nr="493" mi="0" ci="15" mb="0" cb="0"/><line nr="499" mi="0" ci="12" mb="0" cb="4"/><line nr="503" mi="0" ci="21" mb="0" cb="2"/><line nr="507" mi="0" ci="10" mb="0" cb="2"/><line nr="512" mi="0" ci="3" mb="0" cb="2"/><line nr="513" mi="0" ci="3" mb="1" cb="1"/><line nr="514" mi="0" ci="3" mb="0" cb="0"/><line nr="515" mi="0" ci="4" mb="0" cb="2"/><line nr="516" mi="0" ci="4" mb="0" cb="2"/><line nr="517" mi="0" ci="4" mb="0" cb="0"/><line nr="518" mi="0" ci="4" mb="0" cb="2"/><line nr="519" mi="0" ci="13" mb="0" cb="0"/><line nr="521" mi="0" ci="11" mb="0" cb="0"/><line nr="522" mi="0" ci="13" mb="0" cb="0"/><line nr="525" mi="0" ci="4" mb="0" cb="2"/><line nr="526" mi="0" ci="4" mb="0" cb="0"/><line nr="527" mi="0" ci="4" mb="0" cb="2"/><line nr="528" mi="0" ci="13" mb="0" cb="0"/><line nr="530" mi="0" ci="11" mb="0" cb="0"/><line nr="531" mi="0" ci="13" mb="0" cb="0"/><line nr="537" mi="0" ci="10" mb="0" cb="0"/><line nr="542" mi="0" ci="3" mb="0" cb="2"/><line nr="543" mi="0" ci="3" mb="1" cb="1"/><line nr="544" mi="0" ci="3" mb="0" cb="0"/><line nr="545" mi="0" ci="4" mb="0" cb="2"/><line nr="546" mi="0" ci="4" mb="0" cb="2"/><line nr="547" mi="0" ci="4" mb="0" cb="0"/><line nr="548" mi="0" ci="4" mb="0" cb="2"/><line nr="549" mi="0" ci="11" mb="0" cb="0"/><line nr="550" mi="0" ci="13" mb="0" cb="0"/><line nr="552" mi="0" ci="13" mb="0" cb="0"/><line nr="555" mi="0" ci="4" mb="0" cb="2"/><line nr="556" mi="0" ci="4" mb="0" cb="0"/><line nr="557" mi="0" ci="4" mb="0" cb="2"/><line nr="558" mi="0" ci="11" mb="0" cb="0"/><line nr="559" mi="0" ci="13" mb="0" cb="0"/><line nr="561" mi="0" ci="13" mb="0" cb="0"/><line nr="567" mi="0" ci="10" mb="0" cb="0"/><line nr="571" mi="0" ci="3" mb="0" cb="2"/><line nr="572" mi="0" ci="3" mb="0" cb="0"/><line nr="573" mi="0" ci="4" mb="1" cb="1"/><line nr="574" mi="0" ci="7" mb="0" cb="0"/><line nr="577" mi="0" ci="5" mb="0" cb="0"/><line nr="581" mi="0" ci="3" mb="0" cb="2"/><line nr="582" mi="0" ci="5" mb="0" cb="0"/><line nr="584" mi="0" ci="3" mb="0" cb="0"/><line nr="585" mi="0" ci="7" mb="0" cb="0"/><line nr="586" mi="0" ci="2" mb="0" cb="2"/><line nr="587" mi="0" ci="5" mb="0" cb="0"/><line nr="588" mi="0" ci="4" mb="0" cb="0"/><line nr="589" mi="0" ci="5" mb="0" cb="0"/><line nr="590" mi="0" ci="2" mb="0" cb="2"/><line nr="591" mi="0" ci="15" mb="0" cb="0"/><line nr="594" mi="0" ci="15" mb="0" cb="0"/><line nr="596" mi="0" ci="5" mb="0" cb="0"/><line nr="598" mi="0" ci="2" mb="0" cb="2"/><line nr="599" mi="0" ci="5" mb="0" cb="0"/><line nr="600" mi="0" ci="4" mb="0" cb="0"/><line nr="601" mi="0" ci="5" mb="0" cb="0"/><line nr="602" mi="0" ci="2" mb="0" cb="2"/><line nr="603" mi="0" ci="15" mb="0" cb="0"/><line nr="606" mi="0" ci="15" mb="0" cb="0"/><line nr="608" mi="0" ci="5" mb="0" cb="0"/><line nr="611" mi="0" ci="4" mb="0" cb="2"/><line nr="612" mi="0" ci="4" mb="0" cb="2"/><line nr="613" mi="0" ci="4" mb="0" cb="0"/><line nr="615" mi="0" ci="6" mb="0" cb="0"/><line nr="618" mi="0" ci="4" mb="0" cb="0"/><line nr="619" mi="0" ci="3" mb="0" cb="0"/><line nr="620" mi="0" ci="4" mb="0" cb="0"/><line nr="621" mi="0" ci="5" mb="0" cb="0"/><line nr="622" mi="0" ci="3" mb="0" cb="0"/><line nr="623" mi="0" ci="2" mb="0" cb="2"/><line nr="624" mi="0" ci="14" mb="0" cb="0"/><line nr="626" mi="0" ci="14" mb="0" cb="0"/><line nr="628" mi="0" ci="5" mb="0" cb="0"/><line nr="636" mi="0" ci="4" mb="0" cb="2"/><line nr="637" mi="0" ci="4" mb="0" cb="2"/><line nr="638" mi="0" ci="4" mb="0" cb="2"/><line nr="639" mi="0" ci="8" mb="0" cb="0"/><line nr="641" mi="0" ci="4" mb="0" cb="0"/><line nr="642" mi="0" ci="9" mb="0" cb="0"/><line nr="645" mi="0" ci="8" mb="0" cb="0"/><line nr="648" mi="0" ci="4" mb="0" cb="0"/><line nr="649" mi="0" ci="3" mb="0" cb="0"/><line nr="650" mi="0" ci="4" mb="0" cb="0"/><line nr="651" mi="0" ci="5" mb="0" cb="0"/><line nr="652" mi="0" ci="3" mb="0" cb="0"/><line nr="653" mi="0" ci="2" mb="0" cb="2"/><line nr="654" mi="0" ci="15" mb="0" cb="0"/><line nr="656" mi="0" ci="7" mb="0" cb="0"/><line nr="658" mi="0" ci="15" mb="0" cb="0"/><line nr="659" mi="0" ci="6" mb="0" cb="0"/><line nr="665" mi="0" ci="3" mb="0" cb="2"/><line nr="666" mi="0" ci="3" mb="0" cb="0"/><line nr="667" mi="0" ci="10" mb="0" cb="0"/><line nr="669" mi="0" ci="3" mb="0" cb="0"/><line nr="670" mi="0" ci="7" mb="0" cb="0"/><line nr="671" mi="0" ci="2" mb="0" cb="2"/><line nr="672" mi="0" ci="5" mb="0" cb="0"/><line nr="673" mi="2" ci="16" mb="1" cb="1"/><line nr="675" mi="0" ci="1" mb="0" cb="0"/><line nr="677" mi="0" ci="2" mb="0" cb="2"/><line nr="678" mi="0" ci="5" mb="0" cb="0"/><line nr="679" mi="2" ci="16" mb="1" cb="1"/><line nr="681" mi="0" ci="1" mb="0" cb="0"/><line nr="686" mi="0" ci="15" mb="0" cb="0"/><line nr="692" mi="0" ci="12" mb="0" cb="4"/><line nr="696" mi="0" ci="3" mb="0" cb="2"/><line nr="697" mi="0" ci="4" mb="0" cb="0"/><line nr="698" mi="0" ci="3" mb="0" cb="2"/><line nr="699" mi="0" ci="4" mb="0" cb="0"/><line nr="701" mi="0" ci="3" mb="0" cb="0"/><line nr="702" mi="0" ci="3" mb="0" cb="0"/><line nr="703" mi="0" ci="6" mb="0" cb="0"/><line nr="704" mi="0" ci="2" mb="0" cb="2"/><line nr="705" mi="0" ci="9" mb="0" cb="0"/><line nr="706" mi="0" ci="2" mb="0" cb="2"/><line nr="707" mi="0" ci="9" mb="0" cb="0"/><line nr="709" mi="0" ci="14" mb="0" cb="0"/><line nr="715" mi="0" ci="4" mb="0" cb="2"/><line nr="716" mi="0" ci="13" mb="0" cb="0"/><line nr="718" mi="0" ci="8" mb="0" cb="0"/><line nr="719" mi="0" ci="13" mb="0" cb="0"/><line nr="724" mi="0" ci="4" mb="0" cb="2"/><line nr="725" mi="0" ci="13" mb="0" cb="0"/><line nr="727" mi="0" ci="8" mb="0" cb="0"/><line nr="728" mi="0" ci="13" mb="0" cb="0"/><line nr="733" mi="0" ci="3" mb="0" cb="2"/><line nr="734" mi="0" ci="2" mb="0" cb="0"/><line nr="735" mi="0" ci="3" mb="0" cb="2"/><line nr="736" mi="0" ci="2" mb="0" cb="0"/><line nr="738" mi="0" ci="3" mb="0" cb="0"/><line nr="739" mi="0" ci="3" mb="0" cb="0"/><line nr="740" mi="0" ci="6" mb="0" cb="0"/><line nr="741" mi="0" ci="2" mb="0" cb="2"/><line nr="742" mi="0" ci="6" mb="0" cb="0"/><line nr="743" mi="0" ci="4" mb="0" cb="0"/><line nr="744" mi="0" ci="2" mb="0" cb="2"/><line nr="745" mi="0" ci="6" mb="0" cb="0"/><line nr="746" mi="0" ci="4" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="749" mi="0" ci="4" mb="0" cb="0"/><line nr="755" mi="0" ci="3" mb="0" cb="0"/><line nr="756" mi="0" ci="5" mb="0" cb="0"/><line nr="757" mi="0" ci="9" mb="0" cb="2"/><line nr="758" mi="0" ci="4" mb="0" cb="2"/><line nr="759" mi="0" ci="14" mb="0" cb="0"/><line nr="760" mi="0" ci="4" mb="1" cb="1"/><line nr="761" mi="13" ci="0" mb="0" cb="0"/><line nr="762" mi="16" ci="0" mb="0" cb="0"/><line nr="763" mi="0" ci="4" mb="0" cb="2"/><line nr="764" mi="0" ci="5" mb="0" cb="0"/><line nr="765" mi="0" ci="5" mb="0" cb="0"/><line nr="766" mi="0" ci="5" mb="0" cb="0"/><line nr="767" mi="0" ci="14" mb="0" cb="0"/><line nr="768" mi="0" ci="12" mb="0" cb="0"/><line nr="769" mi="0" ci="12" mb="0" cb="0"/><line nr="771" mi="0" ci="14" mb="0" cb="0"/><line nr="776" mi="0" ci="4" mb="0" cb="2"/><line nr="777" mi="0" ci="4" mb="0" cb="0"/><line nr="779" mi="0" ci="7" mb="0" cb="0"/><line nr="780" mi="0" ci="13" mb="0" cb="0"/><line nr="785" mi="0" ci="4" mb="0" cb="2"/><line nr="786" mi="0" ci="4" mb="0" cb="0"/><line nr="788" mi="0" ci="7" mb="0" cb="0"/><line nr="789" mi="0" ci="13" mb="0" cb="0"/><line nr="794" mi="0" ci="2" mb="0" cb="0"/><line nr="795" mi="0" ci="4" mb="0" cb="2"/><line nr="796" mi="0" ci="5" mb="0" cb="0"/><line nr="798" mi="0" ci="3" mb="0" cb="0"/><line nr="802" mi="0" ci="2" mb="0" cb="0"/><line nr="803" mi="0" ci="4" mb="0" cb="2"/><line nr="804" mi="0" ci="5" mb="0" cb="0"/><line nr="806" mi="0" ci="3" mb="0" cb="0"/><line nr="810" mi="0" ci="3" mb="0" cb="2"/><line nr="811" mi="0" ci="4" mb="0" cb="0"/><line nr="813" mi="0" ci="3" mb="0" cb="0"/><line nr="814" mi="0" ci="7" mb="0" cb="0"/><line nr="815" mi="0" ci="2" mb="0" cb="2"/><line nr="816" mi="0" ci="5" mb="0" cb="0"/><line nr="817" mi="0" ci="14" mb="0" cb="0"/><line nr="818" mi="0" ci="2" mb="0" cb="2"/><line nr="819" mi="0" ci="5" mb="0" cb="0"/><line nr="820" mi="0" ci="14" mb="0" cb="0"/><line nr="822" mi="0" ci="10" mb="0" cb="0"/><line nr="829" mi="0" ci="3" mb="1" cb="1"/><line nr="830" mi="0" ci="3" mb="0" cb="0"/><line nr="831" mi="0" ci="4" mb="0" cb="2"/><line nr="832" mi="0" ci="10" mb="0" cb="0"/><line nr="833" mi="0" ci="10" mb="0" cb="2"/><line nr="834" mi="0" ci="7" mb="2" cb="2"/><line nr="835" mi="0" ci="4" mb="0" cb="0"/><line nr="836" mi="0" ci="4" mb="1" cb="1"/><line nr="837" mi="0" ci="10" mb="0" cb="0"/><line nr="839" mi="0" ci="13" mb="0" cb="0"/><line nr="841" mi="0" ci="5" mb="0" cb="0"/><line nr="845" mi="12" ci="0" mb="0" cb="0"/><line nr="846" mi="17" ci="0" mb="0" cb="0"/><line nr="851" mi="0" ci="3" mb="1" cb="1"/><line nr="852" mi="0" ci="3" mb="0" cb="0"/><line nr="853" mi="0" ci="4" mb="0" cb="2"/><line nr="854" mi="0" ci="10" mb="0" cb="0"/><line nr="855" mi="0" ci="10" mb="0" cb="2"/><line nr="856" mi="0" ci="7" mb="2" cb="2"/><line nr="857" mi="0" ci="4" mb="0" cb="0"/><line nr="858" mi="0" ci="4" mb="1" cb="1"/><line nr="859" mi="0" ci="10" mb="0" cb="0"/><line nr="861" mi="0" ci="13" mb="0" cb="0"/><line nr="863" mi="0" ci="5" mb="0" cb="0"/><line nr="867" mi="12" ci="0" mb="0" cb="0"/><line nr="868" mi="17" ci="0" mb="0" cb="0"/><line nr="885" mi="0" ci="2" mb="0" cb="0"/><line nr="886" mi="0" ci="3" mb="0" cb="0"/><line nr="887" mi="0" ci="1" mb="0" cb="0"/><line nr="891" mi="0" ci="2" mb="0" cb="0"/><line nr="896" mi="0" ci="2" mb="0" cb="0"/><line nr="901" mi="0" ci="3" mb="0" cb="0"/><line nr="906" mi="0" ci="2" mb="0" cb="0"/><line nr="911" mi="0" ci="2" mb="0" cb="0"/><line nr="916" mi="0" ci="2" mb="0" cb="0"/><line nr="921" mi="0" ci="5" mb="0" cb="0"/><line nr="926" mi="0" ci="5" mb="0" cb="0"/><line nr="931" mi="0" ci="2" mb="0" cb="0"/><line nr="936" mi="0" ci="5" mb="0" cb="0"/><line nr="942" mi="1" ci="9" mb="1" cb="3"/><line nr="947" mi="0" ci="2" mb="0" cb="0"/><line nr="952" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="109" covered="2039"/><counter type="BRANCH" missed="20" covered="194"/><counter type="LINE" missed="9" covered="346"/><counter type="COMPLEXITY" missed="20" covered="163"/><counter type="METHOD" missed="1" covered="75"/><counter type="CLASS" missed="0" covered="5"/></sourcefile><sourcefile name="Seq.java"><line nr="113" mi="0" ci="4" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="2"/><line nr="115" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="5" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="8" mb="0" cb="2"/><line nr="253" mi="0" ci="4" mb="0" cb="0"/><line nr="254" mi="0" ci="9" mb="0" cb="0"/><line nr="255" mi="0" ci="3" mb="0" cb="0"/><line nr="256" mi="0" ci="6" mb="1" cb="3"/><line nr="257" mi="0" ci="6" mb="0" cb="2"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="261" mi="0" ci="7" mb="0" cb="2"/><line nr="280" mi="0" ci="5" mb="0" cb="0"/><line nr="304" mi="0" ci="4" mb="0" cb="0"/><line nr="305" mi="0" ci="5" mb="0" cb="0"/><line nr="320" mi="0" ci="4" mb="0" cb="0"/><line nr="321" mi="0" ci="6" mb="0" cb="0"/><line nr="323" mi="0" ci="3" mb="0" cb="2"/><line nr="324" mi="2" ci="7" mb="1" cb="3"/><line nr="326" mi="0" ci="7" mb="0" cb="4"/><line nr="327" mi="0" ci="2" mb="0" cb="0"/><line nr="329" mi="0" ci="9" mb="0" cb="0"/><line nr="330" mi="0" ci="8" mb="0" cb="2"/><line nr="334" mi="0" ci="3" mb="0" cb="2"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="337" mi="0" ci="12" mb="1" cb="3"/><line nr="338" mi="0" ci="8" mb="0" cb="2"/><line nr="343" mi="0" ci="11" mb="0" cb="0"/><line nr="354" mi="0" ci="5" mb="0" cb="0"/><line nr="405" mi="0" ci="5" mb="0" cb="0"/><line nr="415" mi="0" ci="5" mb="0" cb="0"/><line nr="426" mi="0" ci="8" mb="0" cb="0"/><line nr="461" mi="0" ci="4" mb="0" cb="0"/><line nr="462" mi="0" ci="5" mb="0" cb="0"/><line nr="529" mi="0" ci="5" mb="0" cb="0"/><line nr="722" mi="0" ci="5" mb="0" cb="0"/><line nr="735" mi="0" ci="4" mb="0" cb="0"/><line nr="736" mi="0" ci="4" mb="0" cb="2"/><line nr="737" mi="0" ci="5" mb="0" cb="0"/><line nr="738" mi="0" ci="3" mb="0" cb="0"/><line nr="739" mi="0" ci="6" mb="0" cb="4"/><line nr="740" mi="0" ci="6" mb="0" cb="2"/><line nr="741" mi="0" ci="2" mb="0" cb="0"/><line nr="744" mi="0" ci="7" mb="0" cb="2"/><line nr="809" mi="0" ci="4" mb="0" cb="0"/><line nr="810" mi="0" ci="4" mb="0" cb="0"/><line nr="863" mi="0" ci="4" mb="0" cb="0"/><line nr="864" mi="0" ci="12" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="266"/><counter type="BRANCH" missed="3" covered="39"/><counter type="LINE" missed="0" covered="50"/><counter type="COMPLEXITY" missed="3" covered="39"/><counter type="METHOD" missed="0" covered="21"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Queue.java"><line nr="48" mi="0" ci="7" mb="0" cb="0"/><line nr="53" mi="0" ci="9" mb="0" cb="0"/><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="65" mi="0" ci="3" mb="0" cb="0"/><line nr="66" mi="0" ci="8" mb="0" cb="2"/><line nr="67" mi="0" ci="7" mb="0" cb="2"/><line nr="68" mi="0" ci="1" mb="0" cb="0"/><line nr="79" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="2" mb="0" cb="0"/><line nr="85" mi="0" ci="2" mb="0" cb="0"/><line nr="86" mi="0" ci="8" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="3" mb="0" cb="2"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="139" mi="0" ci="4" mb="0" cb="2"/><line nr="140" mi="0" ci="2" mb="0" cb="0"/><line nr="141" mi="0" ci="3" mb="0" cb="2"/><line nr="142" mi="0" ci="7" mb="0" cb="0"/><line nr="144" mi="0" ci="7" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="181" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="4" mb="0" cb="0"/><line nr="193" mi="0" ci="4" mb="0" cb="0"/><line nr="204" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="216" mi="0" ci="4" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="0" cb="0"/><line nr="240" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="255" mi="0" ci="4" mb="0" cb="0"/><line nr="256" mi="0" ci="7" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="0" ci="7" mb="0" cb="0"/><line nr="274" mi="0" ci="5" mb="0" cb="0"/><line nr="278" mi="0" ci="6" mb="0" cb="0"/><line nr="282" mi="0" ci="6" mb="0" cb="0"/><line nr="302" mi="0" ci="5" mb="0" cb="0"/><line nr="328" mi="0" ci="6" mb="0" cb="0"/><line nr="348" mi="0" ci="5" mb="0" cb="0"/><line nr="374" mi="0" ci="6" mb="0" cb="0"/><line nr="378" mi="0" ci="5" mb="0" cb="0"/><line nr="382" mi="0" ci="6" mb="0" cb="0"/><line nr="386" mi="0" ci="6" mb="0" cb="0"/><line nr="406" mi="0" ci="5" mb="0" cb="0"/><line nr="432" mi="0" ci="6" mb="0" cb="0"/><line nr="452" mi="0" ci="5" mb="0" cb="0"/><line nr="478" mi="0" ci="6" mb="0" cb="0"/><line nr="488" mi="0" ci="3" mb="0" cb="2"/><line nr="489" mi="0" ci="5" mb="0" cb="0"/><line nr="491" mi="0" ci="6" mb="0" cb="0"/><line nr="501" mi="0" ci="9" mb="0" cb="2"/><line nr="511" mi="0" ci="10" mb="0" cb="0"/><line nr="524" mi="0" ci="4" mb="0" cb="0"/><line nr="525" mi="0" ci="3" mb="0" cb="0"/><line nr="526" mi="0" ci="16" mb="0" cb="2"/><line nr="527" mi="0" ci="4" mb="0" cb="0"/><line nr="529" mi="0" ci="7" mb="0" cb="0"/><line nr="541" mi="0" ci="4" mb="0" cb="0"/><line nr="542" mi="0" ci="3" mb="0" cb="0"/><line nr="543" mi="0" ci="9" mb="0" cb="2"/><line nr="544" mi="0" ci="4" mb="0" cb="0"/><line nr="545" mi="0" ci="1" mb="0" cb="0"/><line nr="546" mi="0" ci="7" mb="0" cb="0"/><line nr="556" mi="0" ci="3" mb="0" cb="2"/><line nr="557" mi="0" ci="5" mb="0" cb="0"/><line nr="559" mi="0" ci="4" mb="0" cb="0"/><line nr="569" mi="0" ci="10" mb="0" cb="2"/><line nr="576" mi="0" ci="4" mb="0" cb="0"/><line nr="581" mi="0" ci="4" mb="0" cb="0"/><line nr="582" mi="0" ci="4" mb="0" cb="0"/><line nr="587" mi="0" ci="2" mb="0" cb="0"/><line nr="592" mi="0" ci="7" mb="0" cb="0"/><line nr="597" mi="0" ci="8" mb="0" cb="0"/><line nr="602" mi="0" ci="4" mb="0" cb="0"/><line nr="607" mi="0" ci="7" mb="0" cb="0"/><line nr="613" mi="0" ci="6" mb="0" cb="0"/><line nr="618" mi="0" ci="5" mb="0" cb="0"/><line nr="623" mi="0" ci="4" mb="0" cb="0"/><line nr="624" mi="0" ci="6" mb="0" cb="0"/><line nr="629" mi="0" ci="4" mb="0" cb="0"/><line nr="630" mi="0" ci="6" mb="0" cb="0"/><line nr="635" mi="0" ci="2" mb="0" cb="2"/><line nr="636" mi="0" ci="2" mb="0" cb="0"/><line nr="638" mi="0" ci="4" mb="0" cb="2"/><line nr="639" mi="0" ci="2" mb="0" cb="0"/><line nr="641" mi="0" ci="16" mb="0" cb="0"/><line nr="646" mi="0" ci="2" mb="0" cb="2"/><line nr="647" mi="0" ci="2" mb="0" cb="0"/><line nr="649" mi="0" ci="4" mb="0" cb="2"/><line nr="650" mi="0" ci="2" mb="0" cb="0"/><line nr="652" mi="0" ci="16" mb="0" cb="0"/><line nr="657" mi="0" ci="4" mb="0" cb="0"/><line nr="658" mi="0" ci="5" mb="0" cb="0"/><line nr="663" mi="0" ci="4" mb="0" cb="0"/><line nr="664" mi="0" ci="5" mb="0" cb="0"/><line nr="665" mi="0" ci="10" mb="0" cb="2"/><line nr="670" mi="0" ci="4" mb="0" cb="0"/><line nr="671" mi="0" ci="5" mb="0" cb="0"/><line nr="672" mi="0" ci="10" mb="0" cb="2"/><line nr="677" mi="0" ci="4" mb="0" cb="0"/><line nr="678" mi="0" ci="5" mb="0" cb="0"/><line nr="683" mi="4" ci="0" mb="0" cb="0"/><line nr="684" mi="12" ci="0" mb="0" cb="0"/><line nr="689" mi="0" ci="3" mb="0" cb="2"/><line nr="690" mi="0" ci="14" mb="0" cb="0"/><line nr="692" mi="0" ci="2" mb="0" cb="2"/><line nr="693" mi="0" ci="14" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="3" mb="0" cb="2"/><line nr="697" mi="0" ci="5" mb="0" cb="0"/><line nr="699" mi="0" ci="4" mb="0" cb="0"/><line nr="700" mi="0" ci="4" mb="0" cb="0"/><line nr="701" mi="0" ci="3" mb="0" cb="2"/><line nr="702" mi="0" ci="6" mb="0" cb="0"/><line nr="703" mi="0" ci="5" mb="0" cb="0"/><line nr="705" mi="0" ci="19" mb="0" cb="0"/><line nr="712" mi="0" ci="4" mb="0" cb="0"/><line nr="713" mi="0" ci="12" mb="0" cb="0"/><line nr="718" mi="0" ci="5" mb="0" cb="0"/><line nr="723" mi="0" ci="2" mb="0" cb="0"/><line nr="728" mi="0" ci="3" mb="0" cb="2"/><line nr="729" mi="0" ci="5" mb="0" cb="0"/><line nr="731" mi="0" ci="4" mb="0" cb="0"/><line nr="737" mi="0" ci="10" mb="0" cb="2"/><line nr="742" mi="0" ci="6" mb="0" cb="0"/><line nr="743" mi="0" ci="3" mb="0" cb="2"/><line nr="744" mi="0" ci="2" mb="0" cb="0"/><line nr="747" mi="0" ci="11" mb="0" cb="0"/><line nr="748" mi="0" ci="11" mb="0" cb="2"/><line nr="754" mi="0" ci="3" mb="0" cb="2"/><line nr="755" mi="0" ci="5" mb="0" cb="0"/><line nr="756" mi="0" ci="4" mb="0" cb="2"/><line nr="757" mi="0" ci="9" mb="0" cb="0"/><line nr="759" mi="0" ci="9" mb="0" cb="0"/><line nr="765" mi="0" ci="9" mb="0" cb="2"/><line nr="770" mi="0" ci="2" mb="0" cb="2"/><line nr="771" mi="0" ci="14" mb="0" cb="0"/><line nr="773" mi="0" ci="4" mb="0" cb="0"/><line nr="774" mi="0" ci="3" mb="0" cb="2"/><line nr="775" mi="0" ci="11" mb="0" cb="0"/><line nr="777" mi="0" ci="4" mb="0" cb="0"/><line nr="778" mi="0" ci="4" mb="0" cb="0"/><line nr="779" mi="0" ci="3" mb="0" cb="2"/><line nr="780" mi="0" ci="4" mb="0" cb="0"/><line nr="781" mi="0" ci="11" mb="0" cb="0"/><line nr="783" mi="0" ci="8" mb="0" cb="0"/><line nr="784" mi="0" ci="11" mb="0" cb="0"/><line nr="791" mi="0" ci="4" mb="0" cb="0"/><line nr="792" mi="0" ci="2" mb="0" cb="2"/><line nr="793" mi="0" ci="14" mb="0" cb="0"/><line nr="795" mi="0" ci="4" mb="0" cb="0"/><line nr="796" mi="0" ci="3" mb="0" cb="2"/><line nr="797" mi="0" ci="11" mb="0" cb="0"/><line nr="799" mi="0" ci="4" mb="0" cb="0"/><line nr="800" mi="0" ci="4" mb="0" cb="0"/><line nr="801" mi="0" ci="3" mb="0" cb="2"/><line nr="802" mi="0" ci="4" mb="0" cb="0"/><line nr="803" mi="0" ci="13" mb="0" cb="0"/><line nr="805" mi="0" ci="8" mb="0" cb="0"/><line nr="806" mi="0" ci="11" mb="0" cb="0"/><line nr="813" mi="0" ci="3" mb="0" cb="2"/><line nr="814" mi="0" ci="2" mb="0" cb="0"/><line nr="815" mi="0" ci="4" mb="0" cb="2"/><line nr="816" mi="0" ci="10" mb="0" cb="0"/><line nr="818" mi="0" ci="14" mb="0" cb="0"/><line nr="824" mi="0" ci="4" mb="0" cb="0"/><line nr="829" mi="0" ci="2" mb="0" cb="0"/><line nr="834" mi="0" ci="6" mb="0" cb="0"/><line nr="839" mi="0" ci="8" mb="0" cb="0"/><line nr="844" mi="0" ci="4" mb="0" cb="0"/><line nr="845" mi="0" ci="12" mb="0" cb="0"/><line nr="850" mi="0" ci="3" mb="0" cb="0"/><line nr="855" mi="0" ci="4" mb="0" cb="2"/><line nr="856" mi="0" ci="2" mb="0" cb="0"/><line nr="858" mi="0" ci="7" mb="0" cb="0"/><line nr="863" mi="0" ci="6" mb="0" cb="2"/><line nr="864" mi="0" ci="6" mb="0" cb="2"/><line nr="865" mi="0" ci="6" mb="0" cb="0"/><line nr="866" mi="0" ci="4" mb="0" cb="0"/><line nr="867" mi="0" ci="6" mb="0" cb="0"/><line nr="868" mi="0" ci="2" mb="0" cb="0"/><line nr="873" mi="0" ci="4" mb="0" cb="0"/><line nr="874" mi="0" ci="8" mb="0" cb="0"/><line nr="879" mi="0" ci="4" mb="0" cb="0"/><line nr="880" mi="0" ci="3" mb="0" cb="2"/><line nr="881" mi="0" ci="4" mb="0" cb="0"/><line nr="883" mi="0" ci="2" mb="0" cb="0"/><line nr="888" mi="0" ci="7" mb="0" cb="0"/><line nr="893" mi="0" ci="10" mb="0" cb="0"/><line nr="898" mi="0" ci="4" mb="0" cb="0"/><line nr="899" mi="0" ci="10" mb="0" cb="0"/><line nr="904" mi="0" ci="5" mb="0" cb="0"/><line nr="905" mi="0" ci="10" mb="0" cb="2"/><line nr="910" mi="0" ci="5" mb="0" cb="0"/><line nr="911" mi="0" ci="10" mb="0" cb="2"/><line nr="916" mi="0" ci="5" mb="0" cb="0"/><line nr="917" mi="0" ci="10" mb="0" cb="2"/><line nr="922" mi="0" ci="6" mb="0" cb="0"/><line nr="927" mi="0" ci="5" mb="0" cb="0"/><line nr="928" mi="0" ci="5" mb="0" cb="0"/><line nr="929" mi="0" ci="16" mb="0" cb="2"/><line nr="934" mi="0" ci="4" mb="0" cb="0"/><line nr="935" mi="0" ci="5" mb="0" cb="0"/><line nr="936" mi="0" ci="5" mb="0" cb="0"/><line nr="937" mi="0" ci="16" mb="0" cb="2"/><line nr="942" mi="0" ci="6" mb="0" cb="0"/><line nr="943" mi="0" ci="6" mb="0" cb="0"/><line nr="944" mi="0" ci="24" mb="1" cb="5"/><line nr="951" mi="0" ci="6" mb="0" cb="0"/><line nr="952" mi="0" ci="6" mb="0" cb="0"/><line nr="953" mi="0" ci="24" mb="1" cb="5"/><line nr="960" mi="0" ci="4" mb="0" cb="0"/><line nr="961" mi="0" ci="5" mb="0" cb="0"/><line nr="962" mi="0" ci="5" mb="0" cb="0"/><line nr="963" mi="0" ci="10" mb="0" cb="2"/><line nr="964" mi="0" ci="14" mb="0" cb="2"/><line nr="970" mi="0" ci="10" mb="0" cb="2"/><line nr="975" mi="0" ci="5" mb="0" cb="0"/><line nr="980" mi="0" ci="4" mb="0" cb="0"/><line nr="982" mi="0" ci="9" mb="0" cb="0"/><line nr="988" mi="0" ci="9" mb="0" cb="0"/><line nr="989" mi="0" ci="3" mb="0" cb="0"/><line nr="994" mi="0" ci="7" mb="0" cb="0"/><line nr="999" mi="0" ci="5" mb="0" cb="0"/><line nr="1004" mi="0" ci="8" mb="0" cb="0"/><line nr="1009" mi="0" ci="5" mb="0" cb="0"/><line nr="1014" mi="0" ci="4" mb="0" cb="0"/><line nr="1015" mi="0" ci="6" mb="0" cb="0"/><line nr="1020" mi="0" ci="5" mb="0" cb="0"/><line nr="1025" mi="0" ci="8" mb="0" cb="0"/><line nr="1026" mi="0" ci="6" mb="0" cb="0"/><line nr="1027" mi="0" ci="10" mb="0" cb="0"/><line nr="1028" mi="0" ci="3" mb="0" cb="0"/><line nr="1033" mi="0" ci="4" mb="0" cb="0"/><line nr="1034" mi="0" ci="8" mb="0" cb="0"/><line nr="1039" mi="0" ci="8" mb="0" cb="0"/><line nr="1044" mi="0" ci="8" mb="0" cb="0"/><line nr="1049" mi="0" ci="8" mb="0" cb="0"/><line nr="1054" mi="0" ci="6" mb="0" cb="0"/><line nr="1059" mi="0" ci="8" mb="0" cb="0"/><line nr="1064" mi="0" ci="6" mb="0" cb="0"/><line nr="1069" mi="0" ci="7" mb="0" cb="0"/><line nr="1074" mi="0" ci="3" mb="0" cb="2"/><line nr="1075" mi="0" ci="5" mb="0" cb="0"/><line nr="1077" mi="0" ci="9" mb="0" cb="0"/><line nr="1083" mi="0" ci="9" mb="0" cb="2"/><line nr="1088" mi="0" ci="2" mb="0" cb="2"/><line nr="1089" mi="0" ci="2" mb="0" cb="0"/><line nr="1091" mi="0" ci="4" mb="0" cb="2"/><line nr="1092" mi="0" ci="2" mb="0" cb="0"/><line nr="1094" mi="0" ci="4" mb="0" cb="0"/><line nr="1095" mi="0" ci="3" mb="0" cb="2"/><line nr="1096" mi="0" ci="9" mb="0" cb="0"/><line nr="1097" mi="0" ci="3" mb="0" cb="2"/><line nr="1098" mi="0" ci="7" mb="0" cb="0"/><line nr="1100" mi="0" ci="12" mb="0" cb="0"/><line nr="1106" mi="0" ci="2" mb="0" cb="2"/><line nr="1107" mi="0" ci="2" mb="0" cb="0"/><line nr="1109" mi="0" ci="4" mb="0" cb="2"/><line nr="1110" mi="0" ci="2" mb="0" cb="0"/><line nr="1112" mi="0" ci="4" mb="0" cb="0"/><line nr="1113" mi="0" ci="3" mb="1" cb="1"/><line nr="1114" mi="10" ci="0" mb="0" cb="0"/><line nr="1115" mi="0" ci="3" mb="0" cb="2"/><line nr="1116" mi="0" ci="8" mb="0" cb="0"/><line nr="1118" mi="0" ci="12" mb="0" cb="0"/><line nr="1124" mi="0" ci="4" mb="0" cb="0"/><line nr="1125" mi="0" ci="5" mb="0" cb="0"/><line nr="1130" mi="0" ci="4" mb="0" cb="0"/><line nr="1131" mi="0" ci="5" mb="0" cb="0"/><line nr="1132" mi="0" ci="10" mb="0" cb="2"/><line nr="1137" mi="0" ci="3" mb="0" cb="0"/><line nr="1143" mi="0" ci="4" mb="0" cb="0"/><line nr="1144" mi="0" ci="8" mb="0" cb="0"/><line nr="1149" mi="0" ci="4" mb="0" cb="0"/><line nr="1150" mi="0" ci="9" mb="0" cb="0"/><line nr="1155" mi="0" ci="7" mb="0" cb="0"/><line nr="1160" mi="0" ci="4" mb="0" cb="0"/><line nr="1161" mi="0" ci="6" mb="0" cb="0"/><line nr="1166" mi="0" ci="4" mb="0" cb="0"/><line nr="1167" mi="0" ci="8" mb="0" cb="0"/><line nr="1172" mi="0" ci="5" mb="0" cb="0"/><line nr="1176" mi="0" ci="7" mb="0" cb="2"/><line nr="1181" mi="0" ci="3" mb="0" cb="2"/><line nr="1182" mi="0" ci="2" mb="0" cb="0"/><line nr="1183" mi="0" ci="3" mb="0" cb="2"/><line nr="1184" mi="0" ci="3" mb="0" cb="0"/><line nr="1185" mi="0" ci="15" mb="0" cb="4"/><line nr="1187" mi="0" ci="2" mb="0" cb="0"/><line nr="1193" mi="0" ci="6" mb="0" cb="0"/><line nr="1198" mi="0" ci="2" mb="0" cb="0"/><line nr="1203" mi="0" ci="14" mb="0" cb="0"/><counter type="INSTRUCTION" missed="26" covered="1752"/><counter type="BRANCH" missed="3" covered="137"/><counter type="LINE" missed="3" covered="302"/><counter type="COMPLEXITY" missed="4" covered="197"/><counter type="METHOD" missed="1" covered="130"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="List.java"><line nr="95" mi="0" ci="2" mb="0" cb="0"/><line nr="96" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="2" mb="0" cb="0"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="8" mb="0" cb="0"/><line nr="115" mi="0" ci="2" mb="0" cb="0"/><line nr="126" mi="0" ci="7" mb="0" cb="0"/><line nr="146" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="0" ci="2" mb="0" cb="0"/><line nr="148" mi="0" ci="9" mb="0" cb="2"/><line nr="149" mi="0" ci="6" mb="0" cb="0"/><line nr="151" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="3" mb="0" cb="2"/><line nr="169" mi="0" ci="3" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="2"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="0" ci="3" mb="0" cb="0"/><line nr="173" mi="0" ci="5" mb="0" cb="0"/><line nr="174" mi="0" ci="3" mb="0" cb="2"/><line nr="175" mi="0" ci="6" mb="0" cb="0"/><line nr="177" mi="0" ci="2" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="2"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="181" mi="0" ci="3" mb="0" cb="2"/><line nr="182" mi="0" ci="6" mb="0" cb="0"/><line nr="184" mi="0" ci="2" mb="0" cb="0"/><line nr="186" mi="0" ci="2" mb="0" cb="0"/><line nr="187" mi="0" ci="9" mb="0" cb="2"/><line nr="188" mi="0" ci="4" mb="0" cb="0"/><line nr="189" mi="0" ci="1" mb="0" cb="0"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><line nr="201" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="4" mb="0" cb="0"/><line nr="213" mi="0" ci="4" mb="0" cb="0"/><line nr="223" mi="0" ci="4" mb="0" cb="0"/><line nr="224" mi="0" ci="4" mb="0" cb="0"/><line nr="234" mi="0" ci="4" mb="0" cb="0"/><line nr="235" mi="0" ci="4" mb="0" cb="0"/><line nr="245" mi="0" ci="4" mb="0" cb="0"/><line nr="246" mi="0" ci="4" mb="0" cb="0"/><line nr="256" mi="0" ci="4" mb="0" cb="0"/><line nr="257" mi="0" ci="4" mb="0" cb="0"/><line nr="267" mi="0" ci="4" mb="0" cb="0"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="278" mi="0" ci="4" mb="0" cb="0"/><line nr="279" mi="0" ci="4" mb="0" cb="0"/><line nr="293" mi="0" ci="4" mb="0" cb="0"/><line nr="294" mi="0" ci="7" mb="0" cb="0"/><line nr="307" mi="0" ci="4" mb="0" cb="0"/><line nr="308" mi="0" ci="7" mb="0" cb="0"/><line nr="312" mi="0" ci="5" mb="0" cb="0"/><line nr="316" mi="0" ci="6" mb="0" cb="0"/><line nr="320" mi="0" ci="6" mb="0" cb="0"/><line nr="340" mi="0" ci="5" mb="0" cb="0"/><line nr="366" mi="0" ci="6" mb="0" cb="0"/><line nr="386" mi="0" ci="5" mb="0" cb="0"/><line nr="412" mi="0" ci="6" mb="0" cb="0"/><line nr="416" mi="0" ci="5" mb="0" cb="0"/><line nr="420" mi="0" ci="6" mb="0" cb="0"/><line nr="424" mi="0" ci="6" mb="0" cb="0"/><line nr="444" mi="0" ci="5" mb="0" cb="0"/><line nr="470" mi="0" ci="6" mb="0" cb="0"/><line nr="490" mi="0" ci="5" mb="0" cb="0"/><line nr="516" mi="0" ci="6" mb="0" cb="0"/><line nr="521" mi="0" ci="11" mb="0" cb="0"/><line nr="526" mi="0" ci="4" mb="0" cb="0"/><line nr="527" mi="0" ci="11" mb="0" cb="0"/><line nr="532" mi="0" ci="2" mb="0" cb="0"/><line nr="537" mi="0" ci="10" mb="0" cb="0"/><line nr="542" mi="0" ci="6" mb="0" cb="0"/><line nr="547" mi="0" ci="4" mb="0" cb="0"/><line nr="552" mi="0" ci="7" mb="0" cb="0"/><line nr="557" mi="0" ci="4" mb="0" cb="0"/><line nr="558" mi="0" ci="4" mb="0" cb="0"/><line nr="559" mi="0" ci="14" mb="0" cb="0"/><line nr="564" mi="0" ci="4" mb="0" cb="0"/><line nr="569" mi="0" ci="4" mb="0" cb="0"/><line nr="570" mi="0" ci="5" mb="0" cb="0"/><line nr="571" mi="0" ci="8" mb="0" cb="0"/><line nr="576" mi="0" ci="4" mb="0" cb="0"/><line nr="577" mi="0" ci="4" mb="0" cb="0"/><line nr="578" mi="0" ci="12" mb="0" cb="0"/><line nr="583" mi="0" ci="2" mb="0" cb="0"/><line nr="584" mi="0" ci="9" mb="0" cb="4"/><line nr="585" mi="0" ci="3" mb="0" cb="0"/><line nr="587" mi="0" ci="2" mb="0" cb="0"/><line nr="592" mi="0" ci="2" mb="0" cb="2"/><line nr="593" mi="0" ci="2" mb="0" cb="0"/><line nr="595" mi="0" ci="4" mb="0" cb="2"/><line nr="596" mi="0" ci="2" mb="0" cb="0"/><line nr="598" mi="0" ci="6" mb="0" cb="0"/><line nr="603" mi="0" ci="4" mb="0" cb="0"/><line nr="604" mi="0" ci="5" mb="0" cb="0"/><line nr="609" mi="0" ci="4" mb="0" cb="0"/><line nr="610" mi="0" ci="2" mb="0" cb="0"/><line nr="611" mi="0" ci="8" mb="0" cb="4"/><line nr="612" mi="0" ci="4" mb="0" cb="0"/><line nr="614" mi="0" ci="2" mb="0" cb="0"/><line nr="619" mi="0" ci="4" mb="0" cb="0"/><line nr="620" mi="0" ci="17" mb="0" cb="2"/><line nr="621" mi="0" ci="10" mb="0" cb="2"/><line nr="626" mi="0" ci="4" mb="0" cb="0"/><line nr="627" mi="0" ci="5" mb="0" cb="0"/><line nr="632" mi="0" ci="4" mb="0" cb="0"/><line nr="633" mi="0" ci="3" mb="0" cb="2"/><line nr="634" mi="0" ci="2" mb="0" cb="0"/><line nr="636" mi="0" ci="2" mb="0" cb="0"/><line nr="637" mi="0" ci="9" mb="0" cb="2"/><line nr="638" mi="0" ci="12" mb="0" cb="2"/><line nr="639" mi="0" ci="4" mb="0" cb="0"/><line nr="640" mi="0" ci="1" mb="0" cb="0"/><line nr="641" mi="0" ci="1" mb="0" cb="0"/><line nr="642" mi="0" ci="3" mb="0" cb="0"/><line nr="648" mi="0" ci="4" mb="0" cb="0"/><line nr="649" mi="0" ci="3" mb="0" cb="0"/><line nr="650" mi="0" ci="1" mb="0" cb="0"/><line nr="654" mi="0" ci="4" mb="0" cb="0"/><line nr="655" mi="0" ci="4" mb="0" cb="0"/><line nr="660" mi="0" ci="3" mb="0" cb="2"/><line nr="661" mi="0" ci="14" mb="0" cb="0"/><line nr="663" mi="0" ci="2" mb="0" cb="2"/><line nr="664" mi="0" ci="14" mb="0" cb="0"/><line nr="666" mi="0" ci="2" mb="0" cb="0"/><line nr="667" mi="0" ci="8" mb="0" cb="2"/><line nr="668" mi="0" ci="3" mb="0" cb="0"/><line nr="669" mi="0" ci="3" mb="0" cb="2"/><line nr="670" mi="0" ci="20" mb="0" cb="0"/><line nr="673" mi="0" ci="3" mb="0" cb="0"/><line nr="678" mi="0" ci="4" mb="0" cb="0"/><line nr="679" mi="0" ci="12" mb="0" cb="0"/><line nr="684" mi="0" ci="5" mb="0" cb="0"/><line nr="689" mi="0" ci="2" mb="0" cb="0"/><line nr="694" mi="0" ci="9" mb="0" cb="2"/><line nr="699" mi="0" ci="2" mb="0" cb="0"/><line nr="700" mi="0" ci="10" mb="0" cb="2"/><line nr="701" mi="0" ci="8" mb="0" cb="4"/><line nr="702" mi="0" ci="2" mb="0" cb="0"/><line nr="705" mi="0" ci="2" mb="0" cb="0"/><line nr="710" mi="0" ci="3" mb="0" cb="2"/><line nr="711" mi="0" ci="5" mb="0" cb="0"/><line nr="713" mi="0" ci="4" mb="0" cb="0"/><line nr="719" mi="0" ci="9" mb="0" cb="2"/><line nr="727" mi="0" ci="2" mb="0" cb="2"/><line nr="728" mi="0" ci="14" mb="0" cb="0"/><line nr="730" mi="0" ci="2" mb="0" cb="0"/><line nr="731" mi="0" ci="2" mb="0" cb="0"/><line nr="732" mi="0" ci="9" mb="0" cb="2"/><line nr="733" mi="0" ci="3" mb="0" cb="2"/><line nr="734" mi="0" ci="17" mb="0" cb="0"/><line nr="736" mi="0" ci="5" mb="0" cb="0"/><line nr="738" mi="0" ci="4" mb="0" cb="0"/><line nr="739" mi="0" ci="9" mb="0" cb="2"/><line nr="740" mi="0" ci="4" mb="0" cb="0"/><line nr="741" mi="0" ci="1" mb="0" cb="0"/><line nr="742" mi="0" ci="2" mb="0" cb="0"/><line nr="747" mi="0" ci="4" mb="0" cb="0"/><line nr="748" mi="0" ci="2" mb="0" cb="2"/><line nr="749" mi="0" ci="14" mb="0" cb="0"/><line nr="751" mi="0" ci="2" mb="0" cb="0"/><line nr="752" mi="0" ci="2" mb="0" cb="0"/><line nr="753" mi="0" ci="9" mb="0" cb="2"/><line nr="754" mi="0" ci="3" mb="0" cb="2"/><line nr="755" mi="0" ci="17" mb="0" cb="0"/><line nr="757" mi="0" ci="5" mb="0" cb="0"/><line nr="759" mi="0" ci="4" mb="0" cb="0"/><line nr="760" mi="0" ci="9" mb="0" cb="2"/><line nr="761" mi="0" ci="4" mb="0" cb="0"/><line nr="762" mi="0" ci="1" mb="0" cb="0"/><line nr="763" mi="0" ci="2" mb="0" cb="0"/><line nr="768" mi="0" ci="4" mb="0" cb="2"/><line nr="769" mi="0" ci="3" mb="0" cb="0"/><line nr="770" mi="0" ci="18" mb="0" cb="2"/><line nr="775" mi="0" ci="2" mb="0" cb="0"/><line nr="780" mi="0" ci="4" mb="0" cb="0"/><line nr="781" mi="0" ci="13" mb="0" cb="4"/><line nr="782" mi="0" ci="5" mb="0" cb="2"/><line nr="783" mi="0" ci="2" mb="0" cb="0"/><line nr="786" mi="0" ci="2" mb="0" cb="0"/><line nr="791" mi="0" ci="4" mb="0" cb="0"/><line nr="792" mi="0" ci="2" mb="0" cb="0"/><line nr="793" mi="0" ci="9" mb="0" cb="2"/><line nr="794" mi="0" ci="6" mb="0" cb="0"/><line nr="795" mi="0" ci="1" mb="0" cb="0"/><line nr="796" mi="0" ci="3" mb="0" cb="0"/><line nr="801" mi="0" ci="3" mb="0" cb="0"/><line nr="806" mi="0" ci="4" mb="0" cb="2"/><line nr="807" mi="0" ci="2" mb="0" cb="0"/><line nr="809" mi="0" ci="13" mb="0" cb="0"/><line nr="815" mi="0" ci="6" mb="0" cb="2"/><line nr="816" mi="0" ci="6" mb="0" cb="2"/><line nr="817" mi="0" ci="6" mb="0" cb="0"/><line nr="818" mi="0" ci="4" mb="0" cb="0"/><line nr="819" mi="0" ci="6" mb="0" cb="0"/><line nr="820" mi="0" ci="2" mb="0" cb="0"/><line nr="825" mi="0" ci="4" mb="0" cb="0"/><line nr="826" mi="0" ci="8" mb="0" cb="0"/><line nr="827" mi="0" ci="9" mb="0" cb="2"/><line nr="828" mi="0" ci="10" mb="0" cb="2"/><line nr="829" mi="0" ci="1" mb="0" cb="0"/><line nr="830" mi="0" ci="6" mb="0" cb="0"/><line nr="835" mi="0" ci="3" mb="0" cb="2"/><line nr="836" mi="0" ci="5" mb="0" cb="0"/><line nr="838" mi="0" ci="3" mb="0" cb="0"/><line nr="843" mi="0" ci="9" mb="0" cb="2"/><line nr="854" mi="0" ci="4" mb="0" cb="0"/><line nr="855" mi="0" ci="3" mb="0" cb="2"/><line nr="856" mi="0" ci="4" mb="0" cb="0"/><line nr="858" mi="0" ci="2" mb="0" cb="0"/><line nr="863" mi="0" ci="3" mb="0" cb="2"/><line nr="864" mi="0" ci="2" mb="0" cb="0"/><line nr="866" mi="0" ci="3" mb="0" cb="0"/><line nr="867" mi="0" ci="3" mb="0" cb="2"/><line nr="868" mi="0" ci="3" mb="0" cb="0"/><line nr="870" mi="0" ci="2" mb="0" cb="0"/><line nr="871" mi="0" ci="8" mb="0" cb="0"/><line nr="872" mi="0" ci="7" mb="0" cb="0"/><line nr="873" mi="0" ci="9" mb="0" cb="0"/><line nr="881" mi="0" ci="3" mb="0" cb="2"/><line nr="882" mi="0" ci="5" mb="0" cb="0"/><line nr="884" mi="0" ci="3" mb="0" cb="0"/><line nr="889" mi="0" ci="9" mb="0" cb="2"/><line nr="894" mi="0" ci="3" mb="0" cb="2"/><line nr="895" mi="0" ci="5" mb="0" cb="0"/><line nr="897" mi="0" ci="6" mb="0" cb="0"/><line nr="902" mi="0" ci="12" mb="0" cb="2"/><line nr="907" mi="0" ci="7" mb="0" cb="0"/><line nr="912" mi="0" ci="4" mb="0" cb="0"/><line nr="913" mi="0" ci="14" mb="0" cb="2"/><line nr="918" mi="0" ci="7" mb="0" cb="0"/><line nr="924" mi="0" ci="4" mb="0" cb="0"/><line nr="925" mi="0" ci="2" mb="0" cb="0"/><line nr="926" mi="0" ci="16" mb="0" cb="2"/><line nr="927" mi="0" ci="4" mb="0" cb="0"/><line nr="929" mi="0" ci="2" mb="0" cb="0"/><line nr="934" mi="0" ci="4" mb="0" cb="0"/><line nr="935" mi="0" ci="2" mb="0" cb="0"/><line nr="936" mi="0" ci="9" mb="0" cb="2"/><line nr="937" mi="0" ci="4" mb="0" cb="0"/><line nr="938" mi="0" ci="1" mb="0" cb="0"/><line nr="939" mi="0" ci="2" mb="0" cb="0"/><line nr="944" mi="0" ci="2" mb="0" cb="0"/><line nr="945" mi="0" ci="2" mb="0" cb="0"/><line nr="946" mi="0" ci="2" mb="0" cb="0"/><line nr="947" mi="0" ci="5" mb="0" cb="4"/><line nr="948" mi="0" ci="3" mb="0" cb="0"/><line nr="949" mi="0" ci="4" mb="0" cb="2"/><line nr="950" mi="0" ci="3" mb="0" cb="0"/><line nr="952" mi="0" ci="4" mb="0" cb="0"/><line nr="954" mi="0" ci="3" mb="0" cb="0"/><line nr="955" mi="0" ci="1" mb="0" cb="0"/><line nr="956" mi="0" ci="2" mb="0" cb="2"/><line nr="957" mi="0" ci="2" mb="0" cb="0"/><line nr="959" mi="0" ci="2" mb="0" cb="0"/><line nr="960" mi="0" ci="9" mb="0" cb="2"/><line nr="961" mi="0" ci="4" mb="0" cb="0"/><line nr="962" mi="0" ci="1" mb="0" cb="0"/><line nr="963" mi="0" ci="2" mb="0" cb="0"/><line nr="968" mi="0" ci="4" mb="0" cb="0"/><line nr="969" mi="0" ci="2" mb="0" cb="0"/><line nr="970" mi="0" ci="2" mb="0" cb="0"/><line nr="971" mi="0" ci="8" mb="0" cb="4"/><line nr="972" mi="0" ci="5" mb="0" cb="0"/><line nr="973" mi="0" ci="4" mb="0" cb="0"/><line nr="975" mi="0" ci="3" mb="0" cb="2"/><line nr="976" mi="0" ci="2" mb="0" cb="0"/><line nr="978" mi="0" ci="7" mb="0" cb="0"/><line nr="984" mi="0" ci="4" mb="0" cb="0"/><line nr="985" mi="0" ci="5" mb="0" cb="0"/><line nr="986" mi="0" ci="10" mb="0" cb="2"/><line nr="991" mi="0" ci="2" mb="0" cb="2"/><line nr="992" mi="0" ci="14" mb="0" cb="0"/><line nr="994" mi="0" ci="3" mb="0" cb="2"/><line nr="995" mi="0" ci="14" mb="0" cb="0"/><line nr="997" mi="0" ci="2" mb="0" cb="0"/><line nr="998" mi="0" ci="2" mb="0" cb="0"/><line nr="999" mi="0" ci="5" mb="0" cb="4"/><line nr="1000" mi="0" ci="5" mb="0" cb="0"/><line nr="1001" mi="0" ci="3" mb="0" cb="0"/><line nr="1002" mi="0" ci="2" mb="0" cb="0"/><line nr="1004" mi="0" ci="2" mb="0" cb="2"/><line nr="1005" mi="0" ci="5" mb="0" cb="0"/><line nr="1007" mi="0" ci="6" mb="0" cb="0"/><line nr="1012" mi="0" ci="2" mb="0" cb="0"/><line nr="1013" mi="0" ci="2" mb="0" cb="0"/><line nr="1014" mi="0" ci="9" mb="0" cb="2"/><line nr="1015" mi="0" ci="4" mb="0" cb="2"/><line nr="1016" mi="0" ci="3" mb="0" cb="0"/><line nr="1018" mi="0" ci="4" mb="0" cb="0"/><line nr="1020" mi="0" ci="1" mb="0" cb="0"/><line nr="1021" mi="0" ci="7" mb="0" cb="2"/><line nr="1027" mi="0" ci="4" mb="0" cb="0"/><line nr="1028" mi="0" ci="4" mb="0" cb="0"/><line nr="1029" mi="0" ci="2" mb="0" cb="0"/><line nr="1030" mi="0" ci="2" mb="0" cb="0"/><line nr="1031" mi="0" ci="9" mb="0" cb="2"/><line nr="1032" mi="0" ci="4" mb="0" cb="2"/><line nr="1033" mi="0" ci="3" mb="0" cb="0"/><line nr="1035" mi="0" ci="4" mb="0" cb="0"/><line nr="1037" mi="0" ci="1" mb="0" cb="0"/><line nr="1038" mi="0" ci="7" mb="0" cb="2"/><line nr="1043" mi="0" ci="2" mb="0" cb="0"/><line nr="1044" mi="0" ci="2" mb="0" cb="0"/><line nr="1045" mi="0" ci="8" mb="0" cb="4"/><line nr="1046" mi="0" ci="5" mb="0" cb="0"/><line nr="1047" mi="0" ci="4" mb="0" cb="0"/><line nr="1049" mi="0" ci="3" mb="0" cb="2"/><line nr="1050" mi="0" ci="2" mb="0" cb="0"/><line nr="1053" mi="0" ci="5" mb="0" cb="0"/><line nr="1054" mi="0" ci="9" mb="0" cb="2"/><line nr="1055" mi="0" ci="4" mb="0" cb="0"/><line nr="1056" mi="0" ci="1" mb="0" cb="0"/><line nr="1057" mi="0" ci="2" mb="0" cb="0"/><line nr="1062" mi="0" ci="2" mb="0" cb="0"/><line nr="1063" mi="0" ci="2" mb="0" cb="0"/><line nr="1064" mi="0" ci="9" mb="0" cb="2"/><line nr="1065" mi="0" ci="3" mb="0" cb="0"/><line nr="1066" mi="0" ci="4" mb="0" cb="2"/><line nr="1067" mi="0" ci="4" mb="0" cb="0"/><line nr="1068" mi="0" ci="3" mb="0" cb="0"/><line nr="1070" mi="0" ci="4" mb="0" cb="0"/><line nr="1073" mi="0" ci="7" mb="0" cb="2"/><line nr="1079" mi="0" ci="4" mb="0" cb="0"/><line nr="1080" mi="0" ci="4" mb="0" cb="0"/><line nr="1081" mi="0" ci="2" mb="0" cb="0"/><line nr="1082" mi="0" ci="9" mb="0" cb="2"/><line nr="1083" mi="0" ci="4" mb="0" cb="2"/><line nr="1084" mi="0" ci="4" mb="0" cb="0"/><line nr="1086" mi="0" ci="1" mb="0" cb="0"/><line nr="1087" mi="0" ci="10" mb="0" cb="2"/><line nr="1092" mi="0" ci="11" mb="0" cb="2"/><line nr="1097" mi="0" ci="5" mb="0" cb="0"/><line nr="1102" mi="0" ci="4" mb="0" cb="0"/><line nr="1103" mi="0" ci="9" mb="0" cb="0"/><line nr="1108" mi="0" ci="4" mb="0" cb="0"/><line nr="1109" mi="0" ci="9" mb="0" cb="0"/><line nr="1114" mi="0" ci="10" mb="0" cb="6"/><line nr="1115" mi="0" ci="2" mb="0" cb="0"/><line nr="1117" mi="0" ci="2" mb="0" cb="0"/><line nr="1118" mi="0" ci="2" mb="0" cb="0"/><line nr="1119" mi="0" ci="4" mb="0" cb="0"/><line nr="1120" mi="0" ci="5" mb="0" cb="0"/><line nr="1121" mi="0" ci="7" mb="0" cb="2"/><line nr="1122" mi="0" ci="3" mb="0" cb="2"/><line nr="1123" mi="0" ci="5" mb="0" cb="0"/><line nr="1125" mi="0" ci="3" mb="0" cb="0"/><line nr="1127" mi="0" ci="3" mb="0" cb="0"/><line nr="1133" mi="0" ci="5" mb="0" cb="0"/><line nr="1138" mi="0" ci="8" mb="0" cb="0"/><line nr="1143" mi="0" ci="12" mb="0" cb="2"/><line nr="1148" mi="0" ci="4" mb="0" cb="0"/><line nr="1149" mi="0" ci="13" mb="0" cb="2"/><line nr="1154" mi="0" ci="5" mb="0" cb="0"/><line nr="1159" mi="0" ci="8" mb="0" cb="0"/><line nr="1160" mi="0" ci="6" mb="0" cb="0"/><line nr="1161" mi="0" ci="10" mb="0" cb="0"/><line nr="1162" mi="0" ci="3" mb="0" cb="0"/><line nr="1167" mi="0" ci="4" mb="0" cb="0"/><line nr="1168" mi="0" ci="5" mb="0" cb="0"/><line nr="1169" mi="0" ci="10" mb="0" cb="0"/><line nr="1174" mi="0" ci="3" mb="0" cb="2"/><line nr="1175" mi="0" ci="4" mb="0" cb="0"/><line nr="1177" mi="0" ci="2" mb="0" cb="0"/><line nr="1178" mi="0" ci="2" mb="0" cb="0"/><line nr="1179" mi="0" ci="5" mb="0" cb="4"/><line nr="1180" mi="0" ci="5" mb="0" cb="0"/><line nr="1181" mi="0" ci="3" mb="0" cb="0"/><line nr="1182" mi="0" ci="2" mb="0" cb="0"/><line nr="1184" mi="0" ci="5" mb="0" cb="0"/><line nr="1190" mi="0" ci="3" mb="0" cb="2"/><line nr="1191" mi="0" ci="4" mb="0" cb="0"/><line nr="1193" mi="0" ci="4" mb="0" cb="0"/><line nr="1194" mi="0" ci="5" mb="0" cb="2"/><line nr="1195" mi="0" ci="4" mb="0" cb="0"/><line nr="1197" mi="0" ci="8" mb="0" cb="0"/><line nr="1204" mi="0" ci="3" mb="0" cb="2"/><line nr="1205" mi="0" ci="4" mb="0" cb="0"/><line nr="1207" mi="0" ci="4" mb="0" cb="0"/><line nr="1208" mi="0" ci="11" mb="0" cb="4"/><line nr="1209" mi="0" ci="4" mb="0" cb="0"/><line nr="1211" mi="0" ci="15" mb="0" cb="0"/><line nr="1218" mi="0" ci="8" mb="0" cb="0"/><line nr="1223" mi="0" ci="2" mb="0" cb="0"/><line nr="1228" mi="0" ci="2" mb="0" cb="2"/><line nr="1229" mi="0" ci="14" mb="0" cb="0"/><line nr="1231" mi="0" ci="2" mb="0" cb="0"/><line nr="1232" mi="0" ci="10" mb="0" cb="2"/><line nr="1233" mi="0" ci="3" mb="0" cb="2"/><line nr="1234" mi="0" ci="8" mb="0" cb="0"/><line nr="1235" mi="0" ci="10" mb="0" cb="0"/><line nr="1238" mi="0" ci="2" mb="0" cb="0"/><line nr="1243" mi="0" ci="5" mb="0" cb="4"/><line nr="1244" mi="0" ci="8" mb="0" cb="0"/><line nr="1245" mi="0" ci="16" mb="0" cb="0"/><line nr="1247" mi="0" ci="2" mb="0" cb="0"/><line nr="1248" mi="0" ci="2" mb="0" cb="0"/><line nr="1249" mi="0" ci="10" mb="0" cb="2"/><line nr="1250" mi="0" ci="3" mb="0" cb="2"/><line nr="1251" mi="0" ci="8" mb="0" cb="0"/><line nr="1252" mi="0" ci="15" mb="0" cb="0"/><line nr="1254" mi="0" ci="3" mb="0" cb="2"/><line nr="1255" mi="0" ci="5" mb="0" cb="0"/><line nr="1258" mi="0" ci="3" mb="0" cb="0"/><line nr="1266" mi="0" ci="9" mb="0" cb="2"/><line nr="1271" mi="0" ci="4" mb="0" cb="2"/><line nr="1272" mi="0" ci="2" mb="0" cb="0"/><line nr="1274" mi="0" ci="2" mb="0" cb="2"/><line nr="1275" mi="0" ci="2" mb="0" cb="0"/><line nr="1277" mi="0" ci="2" mb="0" cb="0"/><line nr="1278" mi="0" ci="2" mb="0" cb="0"/><line nr="1279" mi="0" ci="10" mb="0" cb="2"/><line nr="1280" mi="0" ci="5" mb="0" cb="0"/><line nr="1282" mi="0" ci="3" mb="0" cb="0"/><line nr="1287" mi="0" ci="4" mb="0" cb="2"/><line nr="1288" mi="0" ci="2" mb="0" cb="0"/><line nr="1290" mi="0" ci="2" mb="0" cb="2"/><line nr="1291" mi="0" ci="2" mb="0" cb="0"/><line nr="1293" mi="0" ci="6" mb="0" cb="0"/><line nr="1298" mi="0" ci="4" mb="0" cb="0"/><line nr="1299" mi="0" ci="5" mb="0" cb="0"/><line nr="1304" mi="0" ci="4" mb="0" cb="0"/><line nr="1305" mi="0" ci="2" mb="0" cb="0"/><line nr="1306" mi="0" ci="14" mb="0" cb="4"/><line nr="1307" mi="0" ci="5" mb="0" cb="0"/><line nr="1309" mi="0" ci="10" mb="0" cb="2"/><line nr="1314" mi="0" ci="3" mb="0" cb="0"/><line nr="1320" mi="0" ci="4" mb="0" cb="0"/><line nr="1321" mi="0" ci="2" mb="0" cb="0"/><line nr="1322" mi="0" ci="2" mb="0" cb="0"/><line nr="1323" mi="0" ci="9" mb="0" cb="2"/><line nr="1324" mi="0" ci="5" mb="0" cb="0"/><line nr="1325" mi="0" ci="5" mb="0" cb="0"/><line nr="1326" mi="0" ci="5" mb="0" cb="0"/><line nr="1327" mi="0" ci="1" mb="0" cb="0"/><line nr="1328" mi="0" ci="6" mb="0" cb="0"/><line nr="1334" mi="0" ci="4" mb="0" cb="0"/><line nr="1335" mi="0" ci="2" mb="0" cb="0"/><line nr="1336" mi="0" ci="2" mb="0" cb="0"/><line nr="1337" mi="0" ci="2" mb="0" cb="0"/><line nr="1338" mi="0" ci="9" mb="0" cb="2"/><line nr="1339" mi="0" ci="5" mb="0" cb="0"/><line nr="1340" mi="0" ci="5" mb="0" cb="0"/><line nr="1341" mi="0" ci="5" mb="0" cb="0"/><line nr="1342" mi="0" ci="5" mb="0" cb="0"/><line nr="1343" mi="0" ci="1" mb="0" cb="0"/><line nr="1344" mi="0" ci="8" mb="0" cb="0"/><line nr="1349" mi="0" ci="3" mb="0" cb="2"/><line nr="1350" mi="0" ci="14" mb="0" cb="0"/><line nr="1352" mi="0" ci="2" mb="0" cb="2"/><line nr="1353" mi="0" ci="14" mb="0" cb="0"/><line nr="1355" mi="0" ci="2" mb="0" cb="0"/><line nr="1356" mi="0" ci="2" mb="0" cb="0"/><line nr="1357" mi="0" ci="9" mb="0" cb="2"/><line nr="1358" mi="0" ci="3" mb="0" cb="2"/><line nr="1359" mi="0" ci="17" mb="0" cb="0"/><line nr="1361" mi="0" ci="5" mb="0" cb="0"/><line nr="1363" mi="0" ci="3" mb="0" cb="2"/><line nr="1364" mi="0" ci="17" mb="0" cb="0"/><line nr="1367" mi="0" ci="5" mb="0" cb="0"/><line nr="1368" mi="0" ci="9" mb="0" cb="2"/><line nr="1369" mi="0" ci="4" mb="0" cb="0"/><line nr="1370" mi="0" ci="1" mb="0" cb="0"/><line nr="1371" mi="0" ci="2" mb="0" cb="0"/><line nr="1376" mi="0" ci="4" mb="0" cb="0"/><line nr="1377" mi="0" ci="6" mb="0" cb="0"/><line nr="1382" mi="0" ci="4" mb="0" cb="0"/><line nr="1383" mi="0" ci="8" mb="0" cb="0"/><line nr="1388" mi="0" ci="5" mb="0" cb="0"/><line nr="1401" mi="0" ci="5" mb="0" cb="0"/><line nr="1404" mi="0" ci="2" mb="0" cb="0"/><line nr="1405" mi="0" ci="1" mb="0" cb="0"/><line nr="1415" mi="0" ci="2" mb="0" cb="0"/><line nr="1420" mi="0" ci="5" mb="0" cb="0"/><line nr="1425" mi="0" ci="2" mb="0" cb="0"/><line nr="1430" mi="0" ci="5" mb="0" cb="0"/><line nr="1435" mi="0" ci="2" mb="0" cb="0"/><line nr="1440" mi="0" ci="7" mb="0" cb="2"/><line nr="1445" mi="0" ci="2" mb="0" cb="0"/><line nr="1450" mi="0" ci="10" mb="0" cb="0"/><line nr="1460" mi="0" ci="2" mb="0" cb="0"/><line nr="1486" mi="0" ci="2" mb="0" cb="0"/><line nr="1487" mi="0" ci="3" mb="0" cb="0"/><line nr="1488" mi="0" ci="3" mb="0" cb="0"/><line nr="1489" mi="0" ci="6" mb="0" cb="0"/><line nr="1490" mi="0" ci="9" mb="0" cb="0"/><line nr="1491" mi="0" ci="1" mb="0" cb="0"/><line nr="1495" mi="0" ci="3" mb="0" cb="0"/><line nr="1500" mi="0" ci="3" mb="0" cb="0"/><line nr="1505" mi="0" ci="3" mb="0" cb="0"/><line nr="1510" mi="0" ci="2" mb="0" cb="0"/><line nr="1515" mi="0" ci="3" mb="0" cb="2"/><line nr="1516" mi="0" ci="2" mb="0" cb="0"/><line nr="1517" mi="0" ci="3" mb="0" cb="2"/><line nr="1518" mi="0" ci="2" mb="0" cb="0"/><line nr="1519" mi="0" ci="3" mb="0" cb="0"/><line nr="1520" mi="0" ci="6" mb="0" cb="4"/><line nr="1521" mi="0" ci="6" mb="0" cb="0"/><line nr="1522" mi="0" ci="2" mb="0" cb="2"/><line nr="1523" mi="0" ci="2" mb="0" cb="0"/><line nr="1525" mi="0" ci="3" mb="0" cb="0"/><line nr="1526" mi="0" ci="3" mb="0" cb="0"/><line nr="1527" mi="0" ci="1" mb="0" cb="0"/><line nr="1528" mi="0" ci="10" mb="0" cb="4"/><line nr="1530" mi="0" ci="2" mb="0" cb="0"/><line nr="1536" mi="0" ci="3" mb="0" cb="0"/><line nr="1541" mi="0" ci="14" mb="0" cb="0"/><line nr="1553" mi="0" ci="5" mb="0" cb="0"/><line nr="1565" mi="0" ci="5" mb="0" cb="0"/><line nr="1591" mi="0" ci="2" mb="0" cb="0"/><line nr="1592" mi="0" ci="3" mb="0" cb="0"/><line nr="1593" mi="0" ci="1" mb="0" cb="0"/><line nr="1602" mi="0" ci="2" mb="0" cb="0"/><line nr="1603" mi="0" ci="5" mb="0" cb="0"/><line nr="1604" mi="0" ci="10" mb="0" cb="2"/><line nr="1605" mi="0" ci="4" mb="0" cb="0"/><line nr="1607" mi="0" ci="1" mb="0" cb="0"/><line nr="1618" mi="0" ci="2" mb="0" cb="0"/><line nr="1619" mi="0" ci="3" mb="0" cb="0"/><line nr="1620" mi="0" ci="2" mb="0" cb="2"/><line nr="1621" mi="0" ci="5" mb="0" cb="0"/><line nr="1623" mi="0" ci="2" mb="0" cb="0"/><line nr="1624" mi="0" ci="7" mb="0" cb="2"/><line nr="1626" mi="0" ci="3" mb="0" cb="0"/><line nr="1627" mi="0" ci="4" mb="0" cb="0"/><line nr="1629" mi="0" ci="5" mb="0" cb="0"/><line nr="1630" mi="0" ci="1" mb="0" cb="0"/><line nr="1642" mi="0" ci="3" mb="0" cb="0"/><line nr="1653" mi="0" ci="2" mb="0" cb="2"/><line nr="1654" mi="0" ci="3" mb="0" cb="0"/><line nr="1656" mi="0" ci="7" mb="0" cb="0"/><line nr="1657" mi="0" ci="21" mb="0" cb="0"/><line nr="1666" mi="0" ci="4" mb="0" cb="0"/><line nr="1667" mi="0" ci="2" mb="0" cb="0"/><line nr="1668" mi="0" ci="2" mb="0" cb="0"/><line nr="1669" mi="0" ci="8" mb="0" cb="4"/><line nr="1670" mi="0" ci="5" mb="0" cb="0"/><line nr="1671" mi="0" ci="4" mb="0" cb="0"/><line nr="1673" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="2638"/><counter type="BRANCH" missed="0" covered="288"/><counter type="LINE" missed="0" covered="542"/><counter type="COMPLEXITY" missed="0" covered="306"/><counter type="METHOD" missed="0" covered="162"/><counter type="CLASS" missed="0" covered="6"/></sourcefile><sourcefile name="Array.java"><line nr="30" mi="0" ci="7" mb="0" cb="0"/><line nr="33" mi="0" ci="9" mb="0" cb="0"/><line nr="35" mi="0" ci="2" mb="0" cb="0"/><line nr="36" mi="0" ci="3" mb="0" cb="0"/><line nr="37" mi="0" ci="1" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="2"/><line nr="42" mi="0" ci="2" mb="0" cb="0"/><line nr="44" mi="0" ci="5" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="60" mi="0" ci="2" mb="0" cb="0"/><line nr="62" mi="0" ci="2" mb="0" cb="0"/><line nr="63" mi="0" ci="8" mb="0" cb="0"/><line nr="68" mi="0" ci="2" mb="0" cb="0"/><line nr="79" mi="0" ci="8" mb="0" cb="0"/><line nr="93" mi="0" ci="4" mb="0" cb="0"/><line nr="94" mi="0" ci="6" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="3" mb="0" cb="2"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="114" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="4" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="4" mb="0" cb="0"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="181" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="4" mb="0" cb="0"/><line nr="203" mi="0" ci="4" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="7" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="7" mb="0" cb="0"/><line nr="237" mi="0" ci="5" mb="0" cb="0"/><line nr="241" mi="0" ci="6" mb="0" cb="0"/><line nr="245" mi="0" ci="6" mb="0" cb="0"/><line nr="265" mi="0" ci="5" mb="0" cb="0"/><line nr="291" mi="0" ci="6" mb="0" cb="0"/><line nr="311" mi="0" ci="5" mb="0" cb="0"/><line nr="337" mi="0" ci="6" mb="0" cb="0"/><line nr="341" mi="0" ci="5" mb="0" cb="0"/><line nr="345" mi="0" ci="6" mb="0" cb="0"/><line nr="349" mi="0" ci="6" mb="0" cb="0"/><line nr="369" mi="0" ci="5" mb="0" cb="0"/><line nr="395" mi="0" ci="6" mb="0" cb="0"/><line nr="415" mi="0" ci="5" mb="0" cb="0"/><line nr="441" mi="0" ci="6" mb="0" cb="0"/><line nr="446" mi="0" ci="9" mb="0" cb="0"/><line nr="447" mi="0" ci="6" mb="0" cb="0"/><line nr="448" mi="0" ci="3" mb="0" cb="0"/><line nr="453" mi="0" ci="4" mb="0" cb="0"/><line nr="454" mi="0" ci="3" mb="0" cb="0"/><line nr="455" mi="0" ci="3" mb="0" cb="2"/><line nr="456" mi="0" ci="2" mb="0" cb="0"/><line nr="458" mi="0" ci="10" mb="0" cb="0"/><line nr="459" mi="0" ci="9" mb="0" cb="0"/><line nr="460" mi="0" ci="3" mb="0" cb="0"/><line nr="466" mi="0" ci="2" mb="0" cb="0"/><line nr="471" mi="0" ci="2" mb="0" cb="0"/><line nr="477" mi="0" ci="10" mb="0" cb="0"/><line nr="478" mi="0" ci="4" mb="0" cb="0"/><line nr="482" mi="0" ci="11" mb="0" cb="2"/><line nr="487" mi="0" ci="12" mb="0" cb="0"/><line nr="494" mi="0" ci="2" mb="0" cb="0"/><line nr="499" mi="0" ci="10" mb="0" cb="0"/><line nr="504" mi="0" ci="6" mb="0" cb="0"/><line nr="509" mi="0" ci="4" mb="0" cb="0"/><line nr="514" mi="0" ci="7" mb="0" cb="0"/><line nr="519" mi="0" ci="4" mb="0" cb="0"/><line nr="520" mi="0" ci="4" mb="0" cb="0"/><line nr="521" mi="0" ci="14" mb="0" cb="0"/><line nr="527" mi="0" ci="6" mb="0" cb="4"/><line nr="528" mi="0" ci="14" mb="0" cb="0"/><line nr="530" mi="0" ci="5" mb="0" cb="0"/><line nr="535" mi="0" ci="4" mb="0" cb="0"/><line nr="540" mi="0" ci="4" mb="0" cb="0"/><line nr="541" mi="0" ci="5" mb="0" cb="0"/><line nr="542" mi="0" ci="8" mb="0" cb="0"/><line nr="547" mi="0" ci="4" mb="0" cb="0"/><line nr="548" mi="0" ci="4" mb="0" cb="0"/><line nr="549" mi="0" ci="12" mb="0" cb="0"/><line nr="554" mi="0" ci="2" mb="0" cb="2"/><line nr="555" mi="0" ci="2" mb="0" cb="0"/><line nr="557" mi="0" ci="4" mb="0" cb="2"/><line nr="558" mi="0" ci="2" mb="0" cb="0"/><line nr="560" mi="0" ci="7" mb="0" cb="0"/><line nr="561" mi="0" ci="8" mb="0" cb="0"/><line nr="562" mi="0" ci="3" mb="0" cb="0"/><line nr="567" mi="0" ci="2" mb="0" cb="2"/><line nr="568" mi="0" ci="2" mb="0" cb="0"/><line nr="570" mi="0" ci="4" mb="0" cb="2"/><line nr="571" mi="0" ci="2" mb="0" cb="0"/><line nr="573" mi="0" ci="10" mb="0" cb="0"/><line nr="578" mi="0" ci="4" mb="0" cb="0"/><line nr="579" mi="0" ci="5" mb="0" cb="0"/><line nr="584" mi="0" ci="4" mb="0" cb="0"/><line nr="585" mi="0" ci="8" mb="0" cb="2"/><line nr="586" mi="0" ci="6" mb="0" cb="2"/><line nr="587" mi="0" ci="4" mb="0" cb="0"/><line nr="590" mi="0" ci="2" mb="0" cb="0"/><line nr="595" mi="0" ci="4" mb="0" cb="0"/><line nr="596" mi="0" ci="4" mb="0" cb="0"/><line nr="597" mi="0" ci="9" mb="0" cb="2"/><line nr="598" mi="0" ci="4" mb="0" cb="2"/><line nr="599" mi="0" ci="4" mb="0" cb="0"/><line nr="601" mi="0" ci="1" mb="0" cb="0"/><line nr="602" mi="0" ci="6" mb="0" cb="2"/><line nr="603" mi="0" ci="2" mb="0" cb="0"/><line nr="605" mi="2" ci="7" mb="1" cb="1"/><line nr="611" mi="0" ci="4" mb="0" cb="0"/><line nr="612" mi="0" ci="5" mb="0" cb="0"/><line nr="617" mi="0" ci="4" mb="0" cb="0"/><line nr="618" mi="0" ci="3" mb="0" cb="2"/><line nr="619" mi="0" ci="2" mb="0" cb="0"/><line nr="621" mi="0" ci="4" mb="0" cb="0"/><line nr="622" mi="0" ci="9" mb="0" cb="2"/><line nr="623" mi="0" ci="12" mb="0" cb="2"/><line nr="624" mi="0" ci="4" mb="0" cb="0"/><line nr="625" mi="0" ci="1" mb="0" cb="0"/><line nr="626" mi="0" ci="1" mb="0" cb="0"/><line nr="627" mi="0" ci="4" mb="0" cb="0"/><line nr="633" mi="0" ci="7" mb="0" cb="0"/><line nr="634" mi="0" ci="4" mb="0" cb="0"/><line nr="635" mi="0" ci="15" mb="0" cb="0"/><line nr="636" mi="0" ci="5" mb="0" cb="0"/><line nr="642" mi="0" ci="5" mb="0" cb="0"/><line nr="648" mi="0" ci="3" mb="0" cb="2"/><line nr="649" mi="0" ci="5" mb="0" cb="0"/><line nr="651" mi="0" ci="5" mb="0" cb="0"/><line nr="656" mi="0" ci="9" mb="0" cb="2"/><line nr="661" mi="0" ci="8" mb="0" cb="2"/><line nr="662" mi="0" ci="6" mb="0" cb="2"/><line nr="663" mi="0" ci="2" mb="0" cb="0"/><line nr="666" mi="0" ci="2" mb="0" cb="0"/><line nr="671" mi="0" ci="3" mb="0" cb="2"/><line nr="672" mi="0" ci="5" mb="0" cb="0"/><line nr="674" mi="0" ci="6" mb="0" cb="0"/><line nr="675" mi="0" ci="8" mb="0" cb="0"/><line nr="676" mi="0" ci="3" mb="0" cb="0"/><line nr="681" mi="0" ci="3" mb="0" cb="2"/><line nr="682" mi="0" ci="2" mb="0" cb="0"/><line nr="684" mi="0" ci="4" mb="0" cb="0"/><line nr="690" mi="0" ci="8" mb="0" cb="2"/><line nr="694" mi="0" ci="3" mb="0" cb="2"/><line nr="695" mi="0" ci="2" mb="0" cb="0"/><line nr="697" mi="0" ci="2" mb="0" cb="0"/><line nr="703" mi="0" ci="2" mb="0" cb="2"/><line nr="704" mi="0" ci="14" mb="0" cb="0"/><line nr="706" mi="0" ci="4" mb="0" cb="2"/><line nr="707" mi="0" ci="17" mb="0" cb="0"/><line nr="709" mi="0" ci="7" mb="0" cb="0"/><line nr="710" mi="0" ci="7" mb="0" cb="0"/><line nr="711" mi="0" ci="4" mb="0" cb="0"/><line nr="712" mi="0" ci="13" mb="0" cb="0"/><line nr="713" mi="0" ci="3" mb="0" cb="0"/><line nr="718" mi="0" ci="2" mb="0" cb="2"/><line nr="719" mi="0" ci="14" mb="0" cb="0"/><line nr="721" mi="0" ci="4" mb="0" cb="2"/><line nr="722" mi="0" ci="17" mb="0" cb="0"/><line nr="724" mi="0" ci="3" mb="0" cb="0"/><line nr="725" mi="0" ci="3" mb="0" cb="2"/><line nr="726" mi="0" ci="2" mb="0" cb="0"/><line nr="728" mi="0" ci="8" mb="0" cb="0"/><line nr="729" mi="0" ci="7" mb="0" cb="0"/><line nr="730" mi="0" ci="7" mb="0" cb="0"/><line nr="731" mi="0" ci="14" mb="0" cb="0"/><line nr="732" mi="0" ci="3" mb="0" cb="0"/><line nr="738" mi="0" ci="5" mb="0" cb="2"/><line nr="739" mi="0" ci="2" mb="0" cb="0"/><line nr="741" mi="0" ci="9" mb="0" cb="0"/><line nr="742" mi="0" ci="9" mb="0" cb="2"/><line nr="743" mi="0" ci="9" mb="0" cb="0"/><line nr="744" mi="0" ci="2" mb="0" cb="2"/><line nr="745" mi="0" ci="8" mb="0" cb="0"/><line nr="748" mi="0" ci="3" mb="0" cb="0"/><line nr="754" mi="0" ci="11" mb="0" cb="2"/><line nr="755" mi="0" ci="6" mb="0" cb="2"/><line nr="756" mi="0" ci="2" mb="0" cb="0"/><line nr="759" mi="0" ci="2" mb="0" cb="0"/><line nr="764" mi="0" ci="4" mb="0" cb="0"/><line nr="769" mi="0" ci="4" mb="0" cb="0"/><line nr="770" mi="0" ci="4" mb="0" cb="0"/><line nr="771" mi="0" ci="9" mb="0" cb="2"/><line nr="772" mi="0" ci="8" mb="0" cb="0"/><line nr="774" mi="0" ci="3" mb="0" cb="0"/><line nr="779" mi="0" ci="3" mb="0" cb="0"/><line nr="784" mi="0" ci="4" mb="0" cb="2"/><line nr="785" mi="0" ci="2" mb="0" cb="0"/><line nr="787" mi="0" ci="13" mb="0" cb="0"/><line nr="793" mi="0" ci="6" mb="0" cb="2"/><line nr="794" mi="0" ci="6" mb="0" cb="2"/><line nr="795" mi="0" ci="6" mb="0" cb="0"/><line nr="796" mi="0" ci="4" mb="0" cb="0"/><line nr="797" mi="0" ci="6" mb="0" cb="0"/><line nr="798" mi="0" ci="2" mb="0" cb="0"/><line nr="803" mi="0" ci="4" mb="0" cb="0"/><line nr="804" mi="0" ci="8" mb="0" cb="0"/><line nr="805" mi="0" ci="9" mb="0" cb="2"/><line nr="806" mi="0" ci="10" mb="0" cb="2"/><line nr="807" mi="0" ci="1" mb="0" cb="0"/><line nr="808" mi="0" ci="6" mb="0" cb="0"/><line nr="813" mi="0" ci="4" mb="0" cb="0"/><line nr="814" mi="0" ci="3" mb="0" cb="2"/><line nr="815" mi="0" ci="4" mb="0" cb="0"/><line nr="817" mi="0" ci="2" mb="0" cb="0"/><line nr="822" mi="0" ci="3" mb="0" cb="2"/><line nr="823" mi="0" ci="2" mb="0" cb="0"/><line nr="825" mi="0" ci="3" mb="0" cb="0"/><line nr="826" mi="0" ci="3" mb="0" cb="2"/><line nr="827" mi="0" ci="3" mb="0" cb="0"/><line nr="829" mi="0" ci="2" mb="0" cb="0"/><line nr="830" mi="0" ci="8" mb="0" cb="0"/><line nr="831" mi="0" ci="7" mb="0" cb="0"/><line nr="832" mi="0" ci="9" mb="0" cb="0"/><line nr="840" mi="0" ci="5" mb="0" cb="0"/><line nr="845" mi="0" ci="5" mb="0" cb="0"/><line nr="850" mi="0" ci="2" mb="0" cb="0"/><line nr="851" mi="0" ci="8" mb="0" cb="2"/><line nr="852" mi="0" ci="4" mb="0" cb="0"/><line nr="853" mi="0" ci="4" mb="0" cb="2"/><line nr="854" mi="0" ci="2" mb="0" cb="0"/><line nr="855" mi="0" ci="1" mb="0" cb="0"/><line nr="858" mi="0" ci="2" mb="0" cb="2"/><line nr="859" mi="0" ci="2" mb="0" cb="0"/><line nr="861" mi="0" ci="4" mb="0" cb="0"/><line nr="867" mi="0" ci="4" mb="0" cb="0"/><line nr="868" mi="0" ci="2" mb="0" cb="0"/><line nr="869" mi="0" ci="8" mb="0" cb="2"/><line nr="870" mi="0" ci="4" mb="0" cb="0"/><line nr="871" mi="0" ci="4" mb="0" cb="2"/><line nr="872" mi="0" ci="2" mb="0" cb="0"/><line nr="873" mi="0" ci="1" mb="0" cb="0"/><line nr="876" mi="0" ci="2" mb="0" cb="2"/><line nr="877" mi="0" ci="2" mb="0" cb="0"/><line nr="879" mi="0" ci="4" mb="0" cb="0"/><line nr="885" mi="0" ci="4" mb="0" cb="0"/><line nr="886" mi="0" ci="2" mb="0" cb="0"/><line nr="887" mi="0" ci="9" mb="0" cb="2"/><line nr="888" mi="0" ci="4" mb="0" cb="0"/><line nr="889" mi="0" ci="4" mb="0" cb="2"/><line nr="890" mi="0" ci="2" mb="0" cb="0"/><line nr="891" mi="0" ci="1" mb="0" cb="0"/><line nr="894" mi="0" ci="2" mb="0" cb="2"/><line nr="895" mi="0" ci="2" mb="0" cb="0"/><line nr="897" mi="0" ci="4" mb="0" cb="0"/><line nr="903" mi="0" ci="2" mb="0" cb="2"/><line nr="904" mi="0" ci="14" mb="0" cb="0"/><line nr="906" mi="0" ci="4" mb="0" cb="2"/><line nr="907" mi="0" ci="14" mb="0" cb="0"/><line nr="909" mi="0" ci="6" mb="0" cb="0"/><line nr="910" mi="0" ci="7" mb="0" cb="0"/><line nr="911" mi="0" ci="14" mb="0" cb="0"/><line nr="912" mi="0" ci="3" mb="0" cb="0"/><line nr="917" mi="0" ci="4" mb="0" cb="0"/><line nr="918" mi="0" ci="8" mb="0" cb="2"/><line nr="919" mi="0" ci="4" mb="0" cb="0"/><line nr="920" mi="0" ci="4" mb="0" cb="2"/><line nr="921" mi="0" ci="4" mb="0" cb="0"/><line nr="924" mi="0" ci="5" mb="0" cb="2"/><line nr="925" mi="0" ci="2" mb="0" cb="0"/><line nr="927" mi="0" ci="4" mb="0" cb="0"/><line nr="933" mi="0" ci="4" mb="0" cb="0"/><line nr="934" mi="0" ci="9" mb="0" cb="2"/><line nr="935" mi="0" ci="4" mb="0" cb="0"/><line nr="936" mi="0" ci="1" mb="0" cb="0"/><line nr="937" mi="0" ci="4" mb="0" cb="0"/><line nr="938" mi="0" ci="8" mb="0" cb="2"/><line nr="939" mi="0" ci="4" mb="0" cb="0"/><line nr="940" mi="0" ci="4" mb="0" cb="2"/><line nr="941" mi="0" ci="4" mb="0" cb="0"/><line nr="944" mi="0" ci="5" mb="0" cb="2"/><line nr="945" mi="0" ci="2" mb="0" cb="0"/><line nr="947" mi="0" ci="4" mb="0" cb="0"/><line nr="953" mi="0" ci="4" mb="0" cb="0"/><line nr="954" mi="0" ci="2" mb="0" cb="0"/><line nr="955" mi="0" ci="8" mb="0" cb="2"/><line nr="956" mi="0" ci="4" mb="0" cb="0"/><line nr="957" mi="0" ci="2" mb="0" cb="2"/><line nr="958" mi="0" ci="8" mb="0" cb="0"/><line nr="960" mi="0" ci="4" mb="0" cb="2"/><line nr="961" mi="0" ci="4" mb="0" cb="0"/><line nr="962" mi="0" ci="3" mb="0" cb="0"/><line nr="964" mi="0" ci="7" mb="0" cb="0"/><line nr="968" mi="0" ci="7" mb="0" cb="2"/><line nr="973" mi="0" ci="4" mb="0" cb="0"/><line nr="974" mi="0" ci="2" mb="0" cb="0"/><line nr="975" mi="0" ci="8" mb="0" cb="2"/><line nr="976" mi="0" ci="4" mb="0" cb="0"/><line nr="977" mi="0" ci="4" mb="0" cb="2"/><line nr="978" mi="0" ci="4" mb="0" cb="0"/><line nr="979" mi="0" ci="3" mb="0" cb="0"/><line nr="981" mi="0" ci="7" mb="0" cb="0"/><line nr="984" mi="0" ci="7" mb="0" cb="2"/><line nr="989" mi="0" ci="4" mb="0" cb="0"/><line nr="990" mi="0" ci="4" mb="0" cb="0"/><line nr="991" mi="0" ci="9" mb="0" cb="2"/><line nr="992" mi="0" ci="4" mb="0" cb="0"/><line nr="993" mi="0" ci="1" mb="0" cb="0"/><line nr="994" mi="0" ci="4" mb="0" cb="0"/><line nr="995" mi="0" ci="8" mb="0" cb="2"/><line nr="996" mi="0" ci="4" mb="0" cb="0"/><line nr="997" mi="0" ci="4" mb="0" cb="2"/><line nr="998" mi="0" ci="4" mb="0" cb="0"/><line nr="1001" mi="0" ci="5" mb="0" cb="2"/><line nr="1002" mi="0" ci="2" mb="0" cb="0"/><line nr="1004" mi="0" ci="4" mb="0" cb="0"/><line nr="1010" mi="0" ci="5" mb="0" cb="0"/><line nr="1011" mi="0" ci="9" mb="0" cb="2"/><line nr="1012" mi="0" ci="13" mb="0" cb="0"/><line nr="1014" mi="0" ci="3" mb="0" cb="0"/><line nr="1019" mi="0" ci="5" mb="0" cb="0"/><line nr="1024" mi="0" ci="4" mb="0" cb="0"/><line nr="1025" mi="0" ci="11" mb="0" cb="0"/><line nr="1027" mi="0" ci="4" mb="0" cb="0"/><line nr="1028" mi="0" ci="2" mb="0" cb="0"/><line nr="1029" mi="0" ci="4" mb="0" cb="0"/><line nr="1034" mi="0" ci="4" mb="0" cb="0"/><line nr="1035" mi="0" ci="13" mb="0" cb="0"/><line nr="1040" mi="0" ci="10" mb="0" cb="6"/><line nr="1041" mi="0" ci="2" mb="0" cb="0"/><line nr="1043" mi="0" ci="6" mb="0" cb="4"/><line nr="1044" mi="0" ci="2" mb="0" cb="0"/><line nr="1046" mi="0" ci="4" mb="0" cb="0"/><line nr="1047" mi="0" ci="7" mb="0" cb="0"/><line nr="1048" mi="0" ci="3" mb="0" cb="0"/><line nr="1049" mi="0" ci="7" mb="0" cb="0"/><line nr="1050" mi="0" ci="3" mb="0" cb="0"/><line nr="1055" mi="0" ci="5" mb="0" cb="0"/><line nr="1060" mi="0" ci="8" mb="0" cb="0"/><line nr="1065" mi="0" ci="7" mb="0" cb="0"/><line nr="1066" mi="0" ci="2" mb="0" cb="0"/><line nr="1067" mi="0" ci="3" mb="0" cb="0"/><line nr="1073" mi="0" ci="7" mb="0" cb="0"/><line nr="1074" mi="0" ci="9" mb="0" cb="0"/><line nr="1075" mi="0" ci="3" mb="0" cb="0"/><line nr="1080" mi="0" ci="5" mb="0" cb="0"/><line nr="1085" mi="0" ci="8" mb="0" cb="0"/><line nr="1086" mi="0" ci="6" mb="0" cb="0"/><line nr="1087" mi="0" ci="10" mb="0" cb="0"/><line nr="1088" mi="0" ci="3" mb="0" cb="0"/><line nr="1093" mi="0" ci="8" mb="0" cb="0"/><line nr="1098" mi="0" ci="4" mb="0" cb="0"/><line nr="1099" mi="0" ci="5" mb="0" cb="0"/><line nr="1100" mi="0" ci="7" mb="0" cb="0"/><line nr="1105" mi="0" ci="4" mb="0" cb="0"/><line nr="1106" mi="0" ci="9" mb="0" cb="2"/><line nr="1107" mi="0" ci="4" mb="0" cb="0"/><line nr="1108" mi="0" ci="4" mb="0" cb="2"/><line nr="1109" mi="0" ci="7" mb="0" cb="2"/><line nr="1110" mi="0" ci="4" mb="0" cb="0"/><line nr="1112" mi="0" ci="12" mb="0" cb="0"/><line nr="1116" mi="0" ci="4" mb="0" cb="0"/><line nr="1121" mi="0" ci="8" mb="0" cb="0"/><line nr="1126" mi="0" ci="4" mb="0" cb="0"/><line nr="1127" mi="0" ci="8" mb="0" cb="0"/><line nr="1132" mi="0" ci="2" mb="0" cb="2"/><line nr="1133" mi="0" ci="14" mb="0" cb="0"/><line nr="1135" mi="0" ci="4" mb="0" cb="2"/><line nr="1136" mi="0" ci="14" mb="0" cb="0"/><line nr="1138" mi="0" ci="4" mb="0" cb="0"/><line nr="1143" mi="0" ci="9" mb="0" cb="6"/><line nr="1144" mi="0" ci="8" mb="0" cb="0"/><line nr="1145" mi="0" ci="16" mb="0" cb="0"/><line nr="1147" mi="0" ci="3" mb="0" cb="2"/><line nr="1148" mi="0" ci="2" mb="0" cb="0"/><line nr="1150" mi="0" ci="5" mb="0" cb="0"/><line nr="1151" mi="0" ci="8" mb="0" cb="0"/><line nr="1152" mi="0" ci="3" mb="0" cb="0"/><line nr="1157" mi="0" ci="3" mb="0" cb="2"/><line nr="1158" mi="0" ci="5" mb="0" cb="0"/><line nr="1160" mi="0" ci="7" mb="0" cb="0"/><line nr="1161" mi="0" ci="8" mb="0" cb="0"/><line nr="1162" mi="0" ci="3" mb="0" cb="0"/><line nr="1167" mi="0" ci="9" mb="0" cb="2"/><line nr="1172" mi="0" ci="4" mb="0" cb="2"/><line nr="1173" mi="0" ci="2" mb="0" cb="0"/><line nr="1175" mi="0" ci="2" mb="0" cb="2"/><line nr="1176" mi="0" ci="2" mb="0" cb="0"/><line nr="1178" mi="0" ci="6" mb="0" cb="0"/><line nr="1183" mi="0" ci="4" mb="0" cb="2"/><line nr="1184" mi="0" ci="2" mb="0" cb="0"/><line nr="1186" mi="0" ci="2" mb="0" cb="2"/><line nr="1187" mi="0" ci="2" mb="0" cb="0"/><line nr="1189" mi="0" ci="3" mb="0" cb="0"/><line nr="1190" mi="0" ci="11" mb="0" cb="0"/><line nr="1191" mi="0" ci="3" mb="0" cb="0"/><line nr="1196" mi="0" ci="4" mb="0" cb="0"/><line nr="1197" mi="0" ci="5" mb="0" cb="0"/><line nr="1202" mi="0" ci="4" mb="0" cb="0"/><line nr="1203" mi="0" ci="9" mb="0" cb="2"/><line nr="1204" mi="0" ci="4" mb="0" cb="0"/><line nr="1205" mi="0" ci="4" mb="0" cb="2"/><line nr="1206" mi="0" ci="4" mb="0" cb="0"/><line nr="1209" mi="0" ci="2" mb="0" cb="0"/><line nr="1214" mi="0" ci="3" mb="0" cb="0"/><line nr="1220" mi="0" ci="4" mb="0" cb="0"/><line nr="1221" mi="0" ci="3" mb="0" cb="2"/><line nr="1222" mi="0" ci="4" mb="0" cb="0"/><line nr="1224" mi="0" ci="5" mb="0" cb="0"/><line nr="1225" mi="0" ci="5" mb="0" cb="0"/><line nr="1226" mi="0" ci="9" mb="0" cb="2"/><line nr="1227" mi="0" ci="7" mb="0" cb="0"/><line nr="1228" mi="0" ci="5" mb="0" cb="0"/><line nr="1229" mi="0" ci="5" mb="0" cb="0"/><line nr="1231" mi="0" ci="6" mb="0" cb="0"/><line nr="1237" mi="0" ci="4" mb="0" cb="0"/><line nr="1238" mi="0" ci="3" mb="0" cb="2"/><line nr="1239" mi="0" ci="5" mb="0" cb="0"/><line nr="1241" mi="0" ci="5" mb="0" cb="0"/><line nr="1242" mi="0" ci="5" mb="0" cb="0"/><line nr="1243" mi="0" ci="5" mb="0" cb="0"/><line nr="1244" mi="0" ci="9" mb="0" cb="2"/><line nr="1245" mi="0" ci="7" mb="0" cb="0"/><line nr="1246" mi="0" ci="5" mb="0" cb="0"/><line nr="1247" mi="0" ci="5" mb="0" cb="0"/><line nr="1248" mi="0" ci="5" mb="0" cb="0"/><line nr="1250" mi="0" ci="8" mb="0" cb="0"/><line nr="1256" mi="0" ci="2" mb="0" cb="2"/><line nr="1257" mi="0" ci="14" mb="0" cb="0"/><line nr="1259" mi="0" ci="4" mb="0" cb="2"/><line nr="1260" mi="0" ci="14" mb="0" cb="0"/><line nr="1262" mi="0" ci="3" mb="0" cb="0"/><line nr="1263" mi="0" ci="4" mb="0" cb="0"/><line nr="1264" mi="0" ci="3" mb="0" cb="0"/><line nr="1269" mi="0" ci="4" mb="0" cb="0"/><line nr="1270" mi="0" ci="6" mb="0" cb="0"/><line nr="1275" mi="0" ci="4" mb="0" cb="0"/><line nr="1276" mi="0" ci="8" mb="0" cb="0"/><line nr="1281" mi="0" ci="5" mb="0" cb="0"/><line nr="1286" mi="0" ci="3" mb="0" cb="2"/><line nr="1287" mi="0" ci="2" mb="0" cb="0"/><line nr="1288" mi="0" ci="3" mb="0" cb="2"/><line nr="1289" mi="0" ci="3" mb="0" cb="0"/><line nr="1290" mi="0" ci="4" mb="0" cb="0"/><line nr="1291" mi="0" ci="4" mb="0" cb="0"/><line nr="1293" mi="0" ci="2" mb="0" cb="0"/><line nr="1299" mi="0" ci="6" mb="0" cb="0"/><line nr="1304" mi="0" ci="2" mb="0" cb="0"/><line nr="1309" mi="0" ci="14" mb="0" cb="0"/><line nr="1313" mi="0" ci="3" mb="0" cb="2"/><line nr="1314" mi="0" ci="3" mb="0" cb="0"/><line nr="1315" mi="0" ci="3" mb="0" cb="0"/><line nr="1317" mi="0" ci="3" mb="0" cb="0"/><line nr="1318" mi="0" ci="4" mb="0" cb="0"/><line nr="1319" mi="0" ci="3" mb="0" cb="2"/><line nr="1320" mi="0" ci="6" mb="0" cb="0"/><line nr="1322" mi="0" ci="3" mb="0" cb="0"/><line nr="1329" mi="3" ci="0" mb="0" cb="0"/><line nr="1332" mi="0" ci="2" mb="0" cb="2"/><line nr="1333" mi="0" ci="3" mb="0" cb="0"/><line nr="1335" mi="0" ci="7" mb="0" cb="0"/><line nr="1336" mi="0" ci="21" mb="0" cb="0"/><counter type="INSTRUCTION" missed="5" covered="2363"/><counter type="BRANCH" missed="1" covered="217"/><counter type="LINE" missed="1" covered="461"/><counter type="COMPLEXITY" missed="2" covered="251"/><counter type="METHOD" missed="1" covered="143"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="Collections.java"><line nr="19" mi="3" ci="0" mb="0" cb="0"/><line nr="23" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="3" mb="0" cb="2"/><line nr="25" mi="0" ci="5" mb="0" cb="0"/><line nr="26" mi="0" ci="3" mb="0" cb="2"/><line nr="27" mi="0" ci="2" mb="0" cb="0"/><line nr="29" mi="0" ci="17" mb="0" cb="2"/><line nr="36" mi="0" ci="4" mb="0" cb="0"/><line nr="37" mi="0" ci="4" mb="0" cb="0"/><line nr="38" mi="0" ci="3" mb="0" cb="2"/><line nr="39" mi="0" ci="5" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="2"/><line nr="41" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="7" mb="0" cb="0"/><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="15" mb="0" cb="0"/><line nr="47" mi="0" ci="5" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="6" mb="0" cb="0"/><line nr="58" mi="0" ci="9" mb="0" cb="2"/><line nr="59" mi="0" ci="5" mb="0" cb="0"/><line nr="60" mi="0" ci="6" mb="0" cb="0"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="14" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="1" cb="1"/><line nr="76" mi="5" ci="0" mb="0" cb="0"/><line nr="78" mi="0" ci="3" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="80" mi="0" ci="18" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="2"/><line nr="88" mi="0" ci="2" mb="0" cb="0"/><line nr="91" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="7" mb="0" cb="2"/><line nr="93" mi="0" ci="7" mb="0" cb="0"/><line nr="95" mi="0" ci="5" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="10" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="2" mb="0" cb="2"/><line nr="109" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="14" mb="0" cb="0"/><line nr="113" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="0" ci="9" mb="0" cb="2"/><line nr="122" mi="0" ci="12" mb="0" cb="0"/><line nr="129" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="8" covered="286"/><counter type="BRANCH" missed="1" covered="21"/><counter type="LINE" missed="2" covered="52"/><counter type="COMPLEXITY" missed="2" covered="30"/><counter type="METHOD" missed="1" covered="20"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="HashMap.java"><line nr="33" mi="0" ci="6" mb="0" cb="0"/><line nr="38" mi="0" ci="2" mb="0" cb="0"/><line nr="39" mi="0" ci="3" mb="0" cb="0"/><line nr="40" mi="0" ci="13" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="59" mi="0" ci="8" mb="0" cb="0"/><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="76" mi="0" ci="10" mb="0" cb="0"/><line nr="88" mi="0" ci="4" mb="0" cb="0"/><line nr="89" mi="0" ci="2" mb="0" cb="0"/><line nr="90" mi="0" ci="11" mb="0" cb="2"/><line nr="91" mi="0" ci="7" mb="0" cb="0"/><line nr="92" mi="0" ci="1" mb="0" cb="0"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="106" mi="0" ci="8" mb="0" cb="0"/><line nr="119" mi="0" ci="4" mb="0" cb="0"/><line nr="120" mi="0" ci="5" mb="0" cb="2"/><line nr="121" mi="0" ci="5" mb="0" cb="0"/><line nr="123" mi="0" ci="2" mb="0" cb="0"/><line nr="124" mi="0" ci="8" mb="0" cb="2"/><line nr="125" mi="0" ci="11" mb="0" cb="0"/><line nr="127" mi="0" ci="3" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="0" ci="5" mb="0" cb="0"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="0" ci="5" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="2" mb="0" cb="0"/><line nr="175" mi="0" ci="16" mb="0" cb="2"/><line nr="176" mi="0" ci="7" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="2" mb="0" cb="0"/><line nr="193" mi="0" ci="16" mb="0" cb="2"/><line nr="194" mi="0" ci="7" mb="0" cb="0"/><line nr="196" mi="0" ci="3" mb="0" cb="0"/><line nr="209" mi="0" ci="4" mb="0" cb="0"/><line nr="210" mi="0" ci="3" mb="0" cb="2"/><line nr="211" mi="0" ci="3" mb="0" cb="0"/><line nr="213" mi="0" ci="2" mb="0" cb="0"/><line nr="214" mi="0" ci="10" mb="0" cb="2"/><line nr="215" mi="0" ci="7" mb="0" cb="0"/><line nr="216" mi="0" ci="1" mb="0" cb="0"/><line nr="217" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="4" ci="0" mb="0" cb="0"/><line nr="224" mi="4" ci="0" mb="0" cb="0"/><line nr="225" mi="17" ci="0" mb="0" cb="0"/><line nr="226" mi="3" ci="0" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="236" mi="0" ci="5" mb="0" cb="0"/><line nr="241" mi="0" ci="10" mb="0" cb="0"/><line nr="246" mi="0" ci="2" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="6" mb="0" cb="0"/><line nr="257" mi="0" ci="4" mb="0" cb="0"/><line nr="258" mi="0" ci="6" mb="0" cb="0"/><line nr="263" mi="0" ci="2" mb="0" cb="2"/><line nr="264" mi="0" ci="2" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="2"/><line nr="267" mi="0" ci="2" mb="0" cb="0"/><line nr="269" mi="0" ci="6" mb="0" cb="0"/><line nr="274" mi="0" ci="2" mb="0" cb="2"/><line nr="275" mi="0" ci="2" mb="0" cb="0"/><line nr="277" mi="0" ci="4" mb="0" cb="2"/><line nr="278" mi="0" ci="2" mb="0" cb="0"/><line nr="280" mi="0" ci="6" mb="0" cb="0"/><line nr="285" mi="0" ci="4" mb="0" cb="0"/><line nr="286" mi="0" ci="5" mb="0" cb="0"/><line nr="291" mi="0" ci="4" mb="0" cb="0"/><line nr="292" mi="0" ci="6" mb="0" cb="0"/><line nr="297" mi="0" ci="4" mb="0" cb="0"/><line nr="298" mi="0" ci="7" mb="0" cb="0"/><line nr="299" mi="0" ci="4" mb="0" cb="2"/><line nr="300" mi="0" ci="4" mb="0" cb="0"/><line nr="302" mi="0" ci="2" mb="0" cb="0"/><line nr="309" mi="0" ci="4" mb="0" cb="0"/><line nr="310" mi="0" ci="5" mb="0" cb="0"/><line nr="315" mi="0" ci="4" mb="0" cb="0"/><line nr="316" mi="0" ci="7" mb="0" cb="0"/><line nr="317" mi="0" ci="16" mb="0" cb="2"/><line nr="318" mi="0" ci="4" mb="0" cb="0"/><line nr="319" mi="0" ci="1" mb="0" cb="0"/><line nr="320" mi="0" ci="2" mb="0" cb="0"/><line nr="326" mi="0" ci="4" mb="0" cb="0"/><line nr="327" mi="0" ci="11" mb="0" cb="0"/><line nr="332" mi="0" ci="5" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="7" mb="0" cb="0"/><line nr="339" mi="0" ci="4" mb="0" cb="0"/><line nr="340" mi="0" ci="2" mb="0" cb="0"/><line nr="341" mi="0" ci="3" mb="0" cb="0"/><line nr="342" mi="0" ci="6" mb="0" cb="0"/><line nr="343" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="5" mb="0" cb="0"/><line nr="350" mi="0" ci="5" mb="0" cb="0"/><line nr="355" mi="0" ci="2" mb="0" cb="0"/><line nr="360" mi="0" ci="3" mb="0" cb="2"/><line nr="361" mi="0" ci="5" mb="0" cb="0"/><line nr="363" mi="0" ci="5" mb="0" cb="0"/><line nr="369" mi="0" ci="9" mb="0" cb="2"/><line nr="374" mi="0" ci="4" mb="0" cb="2"/><line nr="375" mi="0" ci="5" mb="0" cb="0"/><line nr="377" mi="0" ci="7" mb="0" cb="0"/><line nr="383" mi="0" ci="3" mb="0" cb="2"/><line nr="384" mi="0" ci="2" mb="0" cb="0"/><line nr="386" mi="0" ci="4" mb="0" cb="0"/><line nr="392" mi="0" ci="4" mb="0" cb="0"/><line nr="397" mi="0" ci="2" mb="0" cb="0"/><line nr="402" mi="0" ci="4" mb="0" cb="0"/><line nr="407" mi="0" ci="6" mb="0" cb="0"/><line nr="412" mi="0" ci="4" mb="0" cb="0"/><line nr="417" mi="0" ci="4" mb="0" cb="0"/><line nr="418" mi="0" ci="13" mb="0" cb="0"/><line nr="423" mi="0" ci="4" mb="0" cb="0"/><line nr="424" mi="0" ci="11" mb="0" cb="0"/><line nr="429" mi="3" ci="0" mb="0" cb="0"/><line nr="434" mi="0" ci="6" mb="0" cb="0"/><line nr="440" mi="0" ci="7" mb="0" cb="0"/><line nr="445" mi="0" ci="4" mb="0" cb="0"/><line nr="446" mi="0" ci="5" mb="0" cb="0"/><line nr="447" mi="0" ci="10" mb="0" cb="0"/><line nr="452" mi="0" ci="4" mb="0" cb="0"/><line nr="453" mi="0" ci="3" mb="0" cb="2"/><line nr="454" mi="0" ci="5" mb="0" cb="0"/><line nr="456" mi="0" ci="2" mb="0" cb="0"/><line nr="461" mi="0" ci="9" mb="0" cb="0"/><line nr="466" mi="0" ci="7" mb="0" cb="0"/><line nr="471" mi="0" ci="5" mb="0" cb="0"/><line nr="472" mi="0" ci="11" mb="0" cb="2"/><line nr="477" mi="0" ci="4" mb="0" cb="0"/><line nr="478" mi="0" ci="3" mb="0" cb="0"/><line nr="479" mi="0" ci="9" mb="0" cb="2"/><line nr="480" mi="0" ci="4" mb="0" cb="0"/><line nr="481" mi="0" ci="1" mb="0" cb="0"/><line nr="482" mi="0" ci="11" mb="0" cb="2"/><line nr="487" mi="0" ci="4" mb="0" cb="0"/><line nr="488" mi="0" ci="4" mb="0" cb="0"/><line nr="489" mi="1" ci="13" mb="1" cb="1"/><line nr="494" mi="0" ci="5" mb="0" cb="0"/><line nr="499" mi="0" ci="4" mb="0" cb="0"/><line nr="500" mi="0" ci="2" mb="0" cb="0"/><line nr="501" mi="0" ci="10" mb="0" cb="2"/><line nr="502" mi="0" ci="4" mb="1" cb="1"/><line nr="503" mi="0" ci="7" mb="0" cb="0"/><line nr="505" mi="0" ci="1" mb="0" cb="0"/><line nr="506" mi="0" ci="3" mb="0" cb="0"/><line nr="511" mi="0" ci="4" mb="0" cb="0"/><line nr="512" mi="0" ci="9" mb="0" cb="0"/><line nr="517" mi="0" ci="4" mb="0" cb="0"/><line nr="518" mi="0" ci="9" mb="0" cb="0"/><line nr="523" mi="0" ci="4" mb="0" cb="0"/><line nr="524" mi="0" ci="9" mb="0" cb="0"/><line nr="529" mi="0" ci="4" mb="0" cb="0"/><line nr="534" mi="0" ci="5" mb="0" cb="0"/><line nr="539" mi="0" ci="8" mb="0" cb="0"/><line nr="544" mi="0" ci="4" mb="0" cb="0"/><line nr="545" mi="0" ci="5" mb="0" cb="0"/><line nr="546" mi="0" ci="10" mb="0" cb="0"/><line nr="551" mi="0" ci="4" mb="0" cb="2"/><line nr="552" mi="0" ci="5" mb="0" cb="0"/><line nr="554" mi="0" ci="6" mb="0" cb="0"/><line nr="560" mi="0" ci="4" mb="0" cb="2"/><line nr="561" mi="0" ci="2" mb="0" cb="0"/><line nr="563" mi="0" ci="4" mb="0" cb="0"/><line nr="569" mi="0" ci="5" mb="0" cb="2"/><line nr="570" mi="0" ci="2" mb="0" cb="0"/><line nr="572" mi="0" ci="7" mb="0" cb="0"/><line nr="578" mi="0" ci="5" mb="0" cb="2"/><line nr="579" mi="0" ci="2" mb="0" cb="0"/><line nr="581" mi="0" ci="7" mb="0" cb="0"/><line nr="587" mi="0" ci="4" mb="0" cb="0"/><line nr="588" mi="0" ci="5" mb="0" cb="0"/><line nr="593" mi="0" ci="4" mb="0" cb="0"/><line nr="594" mi="0" ci="6" mb="0" cb="0"/><line nr="595" mi="0" ci="9" mb="0" cb="2"/><line nr="600" mi="0" ci="4" mb="0" cb="0"/><line nr="605" mi="0" ci="6" mb="0" cb="0"/><line nr="610" mi="0" ci="3" mb="0" cb="2"/><line nr="611" mi="0" ci="2" mb="0" cb="0"/><line nr="612" mi="0" ci="3" mb="1" cb="1"/><line nr="613" mi="0" ci="3" mb="0" cb="0"/><line nr="614" mi="0" ci="5" mb="0" cb="0"/><line nr="616" mi="2" ci="0" mb="0" cb="0"/><line nr="621" mi="0" ci="7" mb="0" cb="2"/><line nr="626" mi="0" ci="2" mb="0" cb="0"/><line nr="631" mi="0" ci="14" mb="0" cb="0"/><line nr="635" mi="0" ci="10" mb="0" cb="2"/><counter type="INSTRUCTION" missed="34" covered="945"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="6" covered="187"/><counter type="COMPLEXITY" missed="6" covered="113"/><counter type="METHOD" missed="3" covered="83"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SortedSet.java"><line nr="120" mi="0" ci="10" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Comparators.java"><line nr="16" mi="2" ci="0" mb="0" cb="0"/><line nr="17" mi="1" ci="0" mb="0" cb="0"/><line nr="30" mi="0" ci="7" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="7"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Tree.java"><line nr="43" mi="0" ci="2" mb="0" cb="0"/><line nr="44" mi="0" ci="2" mb="0" cb="0"/><line nr="45" mi="0" ci="2" mb="0" cb="0"/><line nr="46" mi="0" ci="4" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="2" mb="0" cb="0"/><line nr="50" mi="0" ci="8" mb="0" cb="0"/><line nr="60" mi="0" ci="2" mb="0" cb="0"/><line nr="71" mi="0" ci="6" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="7" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="7" mb="0" cb="0"/><line nr="113" mi="0" ci="4" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="0"/><line nr="115" mi="2" ci="13" mb="1" cb="1"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="3" mb="0" cb="2"/><line nr="133" mi="0" ci="3" mb="0" cb="0"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="136" mi="0" ci="15" mb="0" cb="2"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="7" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="7" mb="0" cb="0"/><line nr="199" mi="0" ci="10" mb="0" cb="4"/><line nr="209" mi="5" ci="0" mb="0" cb="0"/><line nr="228" mi="4" ci="0" mb="0" cb="0"/><line nr="229" mi="4" ci="0" mb="0" cb="0"/><line nr="238" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="0" ci="4" mb="0" cb="0"/><line nr="250" mi="0" ci="3" mb="0" cb="2"/><line nr="251" mi="0" ci="2" mb="0" cb="0"/><line nr="253" mi="4" ci="34" mb="1" cb="4"/><line nr="255" mi="0" ci="3" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="259" mi="0" ci="3" mb="0" cb="0"/><line nr="261" mi="0" ci="3" mb="0" cb="0"/><line nr="263" mi="13" ci="0" mb="0" cb="0"/><line nr="274" mi="0" ci="6" mb="0" cb="4"/><line nr="275" mi="0" ci="2" mb="0" cb="0"/><line nr="277" mi="0" ci="16" mb="0" cb="0"/><line nr="287" mi="0" ci="3" mb="0" cb="2"/><line nr="288" mi="0" ci="2" mb="0" cb="0"/><line nr="289" mi="0" ci="3" mb="0" cb="2"/><line nr="290" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="16" mb="0" cb="0"/><line nr="302" mi="0" ci="3" mb="0" cb="2"/><line nr="303" mi="0" ci="2" mb="0" cb="0"/><line nr="305" mi="0" ci="18" mb="0" cb="0"/><line nr="313" mi="0" ci="2" mb="0" cb="0"/><line nr="318" mi="0" ci="4" mb="0" cb="0"/><line nr="323" mi="0" ci="4" mb="0" cb="0"/><line nr="324" mi="0" ci="3" mb="0" cb="2"/><line nr="325" mi="0" ci="2" mb="0" cb="0"/><line nr="327" mi="0" ci="5" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="3" mb="0" cb="2"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="337" mi="0" ci="5" mb="0" cb="0"/><line nr="343" mi="0" ci="4" mb="0" cb="2"/><line nr="344" mi="0" ci="2" mb="0" cb="0"/><line nr="346" mi="0" ci="5" mb="0" cb="0"/><line nr="352" mi="0" ci="4" mb="0" cb="2"/><line nr="353" mi="0" ci="2" mb="0" cb="0"/><line nr="355" mi="0" ci="5" mb="0" cb="0"/><line nr="361" mi="0" ci="4" mb="0" cb="0"/><line nr="362" mi="0" ci="5" mb="0" cb="0"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="368" mi="0" ci="3" mb="0" cb="2"/><line nr="369" mi="0" ci="2" mb="0" cb="0"/><line nr="371" mi="0" ci="5" mb="0" cb="0"/><line nr="377" mi="0" ci="4" mb="0" cb="0"/><line nr="378" mi="0" ci="3" mb="0" cb="2"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="381" mi="0" ci="5" mb="0" cb="0"/><line nr="387" mi="0" ci="4" mb="0" cb="0"/><line nr="388" mi="0" ci="5" mb="0" cb="0"/><line nr="393" mi="0" ci="4" mb="0" cb="0"/><line nr="394" mi="0" ci="10" mb="0" cb="2"/><line nr="399" mi="0" ci="4" mb="0" cb="0"/><line nr="400" mi="0" ci="3" mb="0" cb="2"/><line nr="401" mi="0" ci="2" mb="0" cb="0"/><line nr="403" mi="0" ci="6" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="0" cb="0"/><line nr="411" mi="0" ci="3" mb="0" cb="2"/><line nr="412" mi="0" ci="2" mb="0" cb="0"/><line nr="414" mi="0" ci="5" mb="0" cb="0"/><line nr="420" mi="0" ci="5" mb="0" cb="0"/><line nr="425" mi="0" ci="2" mb="0" cb="0"/><line nr="430" mi="0" ci="3" mb="0" cb="2"/><line nr="431" mi="0" ci="5" mb="0" cb="0"/><line nr="433" mi="0" ci="4" mb="0" cb="0"/><line nr="439" mi="0" ci="9" mb="0" cb="2"/><line nr="444" mi="0" ci="3" mb="0" cb="2"/><line nr="445" mi="0" ci="5" mb="0" cb="0"/><line nr="447" mi="0" ci="4" mb="0" cb="0"/><line nr="453" mi="0" ci="9" mb="0" cb="2"/><line nr="458" mi="0" ci="2" mb="0" cb="0"/><line nr="463" mi="0" ci="4" mb="0" cb="0"/><line nr="468" mi="0" ci="3" mb="0" cb="0"/><line nr="473" mi="0" ci="4" mb="0" cb="0"/><line nr="474" mi="0" ci="10" mb="0" cb="2"/><line nr="479" mi="0" ci="3" mb="0" cb="0"/><line nr="485" mi="0" ci="4" mb="0" cb="0"/><line nr="486" mi="0" ci="3" mb="0" cb="2"/><line nr="487" mi="0" ci="4" mb="0" cb="0"/><line nr="489" mi="0" ci="5" mb="0" cb="0"/><line nr="495" mi="0" ci="4" mb="0" cb="0"/><line nr="496" mi="0" ci="3" mb="0" cb="2"/><line nr="497" mi="0" ci="4" mb="0" cb="0"/><line nr="499" mi="0" ci="2" mb="0" cb="0"/><line nr="504" mi="0" ci="3" mb="0" cb="2"/><line nr="505" mi="0" ci="2" mb="0" cb="0"/><line nr="507" mi="0" ci="6" mb="0" cb="0"/><line nr="513" mi="0" ci="14" mb="0" cb="2"/><line nr="518" mi="0" ci="4" mb="0" cb="0"/><line nr="519" mi="0" ci="5" mb="0" cb="0"/><line nr="524" mi="0" ci="5" mb="0" cb="0"/><line nr="529" mi="0" ci="4" mb="0" cb="0"/><line nr="530" mi="0" ci="9" mb="0" cb="0"/><line nr="535" mi="0" ci="4" mb="0" cb="0"/><line nr="536" mi="0" ci="9" mb="0" cb="0"/><line nr="541" mi="0" ci="5" mb="0" cb="0"/><line nr="546" mi="0" ci="6" mb="0" cb="0"/><line nr="552" mi="0" ci="4" mb="0" cb="0"/><line nr="553" mi="0" ci="3" mb="0" cb="2"/><line nr="554" mi="0" ci="4" mb="0" cb="0"/><line nr="556" mi="0" ci="5" mb="0" cb="0"/><line nr="563" mi="0" ci="8" mb="0" cb="0"/><line nr="568" mi="0" ci="2" mb="0" cb="0"/><line nr="573" mi="0" ci="3" mb="0" cb="2"/><line nr="574" mi="0" ci="5" mb="0" cb="0"/><line nr="576" mi="0" ci="4" mb="0" cb="0"/><line nr="582" mi="0" ci="9" mb="0" cb="2"/><line nr="587" mi="0" ci="3" mb="0" cb="2"/><line nr="588" mi="0" ci="2" mb="0" cb="0"/><line nr="590" mi="0" ci="5" mb="0" cb="0"/><line nr="596" mi="0" ci="3" mb="0" cb="2"/><line nr="597" mi="0" ci="2" mb="0" cb="0"/><line nr="599" mi="0" ci="5" mb="0" cb="0"/><line nr="605" mi="0" ci="4" mb="0" cb="0"/><line nr="606" mi="0" ci="5" mb="0" cb="0"/><line nr="611" mi="0" ci="4" mb="0" cb="0"/><line nr="612" mi="0" ci="5" mb="0" cb="0"/><line nr="617" mi="3" ci="0" mb="0" cb="0"/><line nr="624" mi="0" ci="4" mb="0" cb="0"/><line nr="625" mi="0" ci="3" mb="0" cb="2"/><line nr="626" mi="0" ci="4" mb="0" cb="0"/><line nr="628" mi="0" ci="6" mb="0" cb="0"/><line nr="636" mi="0" ci="4" mb="0" cb="0"/><line nr="637" mi="0" ci="3" mb="0" cb="2"/><line nr="638" mi="0" ci="5" mb="0" cb="0"/><line nr="640" mi="0" ci="6" mb="0" cb="0"/><line nr="646" mi="0" ci="4" mb="0" cb="0"/><line nr="647" mi="0" ci="3" mb="0" cb="2"/><line nr="648" mi="0" ci="2" mb="0" cb="0"/><line nr="650" mi="0" ci="6" mb="0" cb="0"/><line nr="656" mi="0" ci="4" mb="0" cb="0"/><line nr="657" mi="0" ci="3" mb="0" cb="2"/><line nr="658" mi="0" ci="11" mb="0" cb="0"/><line nr="660" mi="0" ci="3" mb="0" cb="0"/><line nr="661" mi="0" ci="6" mb="0" cb="0"/><line nr="662" mi="0" ci="3" mb="0" cb="2"/><line nr="663" mi="0" ci="1" mb="0" cb="0"/><line nr="664" mi="0" ci="3" mb="0" cb="0"/><line nr="665" mi="0" ci="7" mb="0" cb="0"/><line nr="666" mi="0" ci="10" mb="0" cb="0"/><line nr="668" mi="0" ci="2" mb="0" cb="0"/><line nr="675" mi="0" ci="5" mb="0" cb="0"/><line nr="716" mi="0" ci="2" mb="0" cb="0"/><line nr="717" mi="0" ci="4" mb="0" cb="0"/><line nr="718" mi="0" ci="3" mb="0" cb="0"/><line nr="719" mi="0" ci="3" mb="0" cb="0"/><line nr="720" mi="0" ci="23" mb="0" cb="0"/><line nr="721" mi="0" ci="11" mb="0" cb="0"/><line nr="722" mi="0" ci="1" mb="0" cb="0"/><line nr="726" mi="0" ci="3" mb="0" cb="0"/><line nr="731" mi="0" ci="3" mb="0" cb="0"/><line nr="736" mi="0" ci="2" mb="0" cb="0"/><line nr="741" mi="0" ci="4" mb="0" cb="0"/><line nr="746" mi="0" ci="6" mb="0" cb="0"/><line nr="751" mi="0" ci="3" mb="0" cb="2"/><line nr="752" mi="0" ci="2" mb="0" cb="0"/><line nr="753" mi="0" ci="3" mb="0" cb="2"/><line nr="754" mi="0" ci="3" mb="0" cb="0"/><line nr="755" mi="0" ci="8" mb="0" cb="2"/><line nr="756" mi="0" ci="8" mb="0" cb="2"/><line nr="758" mi="0" ci="2" mb="0" cb="0"/><line nr="764" mi="0" ci="3" mb="0" cb="0"/><line nr="769" mi="12" ci="14" mb="1" cb="1"/><line nr="774" mi="0" ci="4" mb="0" cb="0"/><line nr="775" mi="0" ci="4" mb="0" cb="0"/><line nr="776" mi="0" ci="3" mb="0" cb="0"/><line nr="780" mi="0" ci="5" mb="0" cb="0"/><line nr="781" mi="0" ci="10" mb="0" cb="2"/><line nr="782" mi="0" ci="4" mb="0" cb="0"/><line nr="783" mi="0" ci="4" mb="0" cb="0"/><line nr="784" mi="0" ci="6" mb="0" cb="2"/><line nr="785" mi="0" ci="2" mb="0" cb="0"/><line nr="786" mi="0" ci="17" mb="0" cb="2"/><line nr="788" mi="0" ci="1" mb="0" cb="0"/><line nr="791" mi="0" ci="4" mb="0" cb="0"/><line nr="792" mi="0" ci="3" mb="0" cb="2"/><line nr="793" mi="0" ci="2" mb="0" cb="0"/><line nr="795" mi="0" ci="18" mb="0" cb="0"/><line nr="810" mi="0" ci="5" mb="0" cb="0"/><line nr="822" mi="0" ci="5" mb="0" cb="0"/><line nr="848" mi="0" ci="2" mb="0" cb="0"/><line nr="849" mi="0" ci="3" mb="0" cb="0"/><line nr="850" mi="0" ci="1" mb="0" cb="0"/><line nr="859" mi="0" ci="2" mb="0" cb="0"/><line nr="860" mi="0" ci="5" mb="0" cb="0"/><line nr="861" mi="0" ci="5" mb="0" cb="0"/><line nr="862" mi="0" ci="1" mb="0" cb="0"/><line nr="873" mi="0" ci="2" mb="0" cb="0"/><line nr="874" mi="0" ci="3" mb="0" cb="0"/><line nr="875" mi="0" ci="4" mb="0" cb="0"/><line nr="876" mi="0" ci="7" mb="0" cb="0"/><line nr="877" mi="0" ci="1" mb="0" cb="0"/><line nr="889" mi="0" ci="3" mb="0" cb="0"/><line nr="903" mi="0" ci="5" mb="0" cb="0"/><line nr="906" mi="0" ci="2" mb="0" cb="0"/><line nr="907" mi="0" ci="1" mb="0" cb="0"/><line nr="911" mi="0" ci="2" mb="0" cb="0"/><line nr="916" mi="0" ci="2" mb="0" cb="0"/><line nr="921" mi="0" ci="5" mb="0" cb="0"/><line nr="926" mi="0" ci="2" mb="0" cb="0"/><line nr="931" mi="0" ci="2" mb="0" cb="0"/><line nr="936" mi="0" ci="2" mb="0" cb="0"/><line nr="941" mi="0" ci="7" mb="0" cb="2"/><line nr="946" mi="0" ci="2" mb="0" cb="0"/><line nr="951" mi="0" ci="10" mb="0" cb="0"/><line nr="955" mi="0" ci="2" mb="0" cb="0"/><line nr="966" mi="0" ci="2" mb="0" cb="0"/><line nr="995" mi="5" ci="29" mb="0" cb="0"/><line nr="1000" mi="0" ci="6" mb="0" cb="0"/><line nr="1005" mi="0" ci="6" mb="0" cb="0"/><line nr="1010" mi="0" ci="6" mb="0" cb="0"/><line nr="1015" mi="0" ci="6" mb="0" cb="0"/><line nr="1026" mi="3" ci="0" mb="0" cb="0"/><line nr="1030" mi="0" ci="7" mb="0" cb="0"/><line nr="1031" mi="0" ci="3" mb="1" cb="1"/><line nr="1032" mi="2" ci="0" mb="0" cb="0"/><line nr="1034" mi="0" ci="1" mb="0" cb="0"/><line nr="1035" mi="0" ci="3" mb="0" cb="0"/><line nr="1036" mi="0" ci="6" mb="0" cb="0"/><line nr="1037" mi="0" ci="3" mb="0" cb="0"/><line nr="1038" mi="0" ci="8" mb="0" cb="0"/><line nr="1043" mi="3" ci="0" mb="0" cb="0"/><line nr="1046" mi="0" ci="5" mb="0" cb="0"/><line nr="1047" mi="0" ci="10" mb="0" cb="0"/><line nr="1048" mi="0" ci="6" mb="0" cb="0"/><line nr="1052" mi="3" ci="0" mb="0" cb="0"/><line nr="1058" mi="0" ci="5" mb="0" cb="2"/><line nr="1059" mi="0" ci="7" mb="0" cb="0"/><line nr="1061" mi="0" ci="11" mb="0" cb="2"/><line nr="1062" mi="0" ci="5" mb="0" cb="0"/><line nr="1063" mi="0" ci="7" mb="0" cb="2"/><line nr="1064" mi="0" ci="2" mb="0" cb="2"/><line nr="1065" mi="0" ci="6" mb="0" cb="0"/><line nr="1066" mi="0" ci="7" mb="0" cb="0"/><line nr="1068" mi="0" ci="1" mb="0" cb="0"/><line nr="1069" mi="0" ci="2" mb="0" cb="0"/><line nr="1074" mi="3" ci="0" mb="0" cb="0"/><line nr="1077" mi="0" ci="9" mb="0" cb="0"/><line nr="1078" mi="0" ci="5" mb="0" cb="0"/><line nr="1082" mi="0" ci="3" mb="0" cb="2"/><line nr="1083" mi="0" ci="4" mb="0" cb="0"/><line nr="1085" mi="0" ci="3" mb="0" cb="0"/><line nr="1086" mi="0" ci="2" mb="0" cb="0"/><line nr="1087" mi="0" ci="1" mb="0" cb="0"/><line nr="1088" mi="0" ci="10" mb="0" cb="0"/><line nr="1089" mi="0" ci="3" mb="0" cb="0"/><line nr="1090" mi="0" ci="4" mb="0" cb="0"/><line nr="1095" mi="0" ci="2" mb="0" cb="0"/><line nr="1096" mi="0" ci="1" mb="0" cb="0"/><line nr="1097" mi="0" ci="10" mb="0" cb="0"/><line nr="1098" mi="0" ci="2" mb="0" cb="0"/><line nr="1102" mi="0" ci="2" mb="0" cb="0"/><line nr="1103" mi="0" ci="4" mb="0" cb="0"/><line nr="1104" mi="0" ci="4" mb="0" cb="0"/><line nr="1105" mi="0" ci="3" mb="0" cb="2"/><line nr="1106" mi="0" ci="4" mb="0" cb="0"/><line nr="1107" mi="0" ci="5" mb="0" cb="0"/><line nr="1108" mi="0" ci="6" mb="0" cb="0"/><line nr="1109" mi="0" ci="1" mb="0" cb="0"/><line nr="1110" mi="0" ci="3" mb="0" cb="0"/><line nr="1114" mi="3" ci="0" mb="0" cb="0"/><line nr="1118" mi="0" ci="6" mb="0" cb="0"/><line nr="1119" mi="0" ci="1" mb="0" cb="0"/><line nr="1120" mi="0" ci="3" mb="0" cb="0"/><line nr="1121" mi="0" ci="6" mb="0" cb="0"/><line nr="1122" mi="0" ci="13" mb="0" cb="0"/><line nr="1123" mi="0" ci="13" mb="0" cb="0"/><line nr="1124" mi="0" ci="4" mb="0" cb="0"/><line nr="1129" mi="0" ci="6" mb="0" cb="0"/><line nr="1130" mi="0" ci="4" mb="0" cb="0"/><line nr="1131" mi="0" ci="6" mb="0" cb="0"/><line nr="1132" mi="0" ci="13" mb="0" cb="0"/><line nr="1133" mi="0" ci="13" mb="0" cb="0"/><line nr="1134" mi="0" ci="13" mb="0" cb="0"/><line nr="1135" mi="0" ci="5" mb="0" cb="0"/><line nr="1140" mi="3" ci="0" mb="0" cb="0"/><line nr="1144" mi="0" ci="3" mb="0" cb="2"/><line nr="1145" mi="0" ci="2" mb="0" cb="0"/><line nr="1147" mi="0" ci="6" mb="0" cb="0"/><line nr="1148" mi="0" ci="1" mb="0" cb="0"/><line nr="1149" mi="0" ci="3" mb="0" cb="0"/><line nr="1150" mi="0" ci="6" mb="0" cb="0"/><line nr="1151" mi="0" ci="3" mb="0" cb="0"/><line nr="1152" mi="0" ci="6" mb="0" cb="0"/><line nr="1157" mi="3" ci="0" mb="0" cb="0"/><line nr="1161" mi="0" ci="3" mb="0" cb="2"/><line nr="1162" mi="0" ci="9" mb="0" cb="0"/><line nr="1164" mi="0" ci="6" mb="0" cb="0"/><line nr="1165" mi="0" ci="1" mb="0" cb="0"/><line nr="1166" mi="0" ci="4" mb="0" cb="0"/><line nr="1167" mi="0" ci="7" mb="0" cb="0"/><line nr="1168" mi="0" ci="3" mb="0" cb="0"/><line nr="1169" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="75" covered="1499"/><counter type="BRANCH" missed="4" covered="117"/><counter type="LINE" missed="13" covered="308"/><counter type="COMPLEXITY" missed="15" covered="191"/><counter type="METHOD" missed="11" covered="133"/><counter type="CLASS" missed="0" covered="13"/></sourcefile><sourcefile name="TreeSet.java"><line nr="38" mi="0" ci="2" mb="0" cb="0"/><line nr="39" mi="0" ci="3" mb="0" cb="0"/><line nr="40" mi="0" ci="1" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="0" ci="2" mb="0" cb="0"/><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="4" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="6" mb="0" cb="0"/><line nr="57" mi="0" ci="8" mb="0" cb="0"/><line nr="61" mi="0" ci="5" mb="0" cb="0"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="66" mi="0" ci="6" mb="0" cb="0"/><line nr="70" mi="6" ci="0" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="0" cb="0"/><line nr="81" mi="0" ci="4" mb="0" cb="0"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="88" mi="0" ci="4" mb="0" cb="0"/><line nr="89" mi="0" ci="4" mb="0" cb="0"/><line nr="90" mi="0" ci="7" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="13" mb="0" cb="0"/><line nr="122" mi="4" ci="0" mb="0" cb="0"/><line nr="123" mi="7" ci="0" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="4" mb="0" cb="0"/><line nr="139" mi="0" ci="13" mb="0" cb="0"/><line nr="153" mi="4" ci="0" mb="0" cb="0"/><line nr="154" mi="7" ci="0" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="12" mb="0" cb="2"/><line nr="164" mi="0" ci="4" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="9" mb="0" cb="2"/><line nr="167" mi="0" ci="3" mb="0" cb="0"/><line nr="168" mi="0" ci="1" mb="0" cb="0"/><line nr="178" mi="0" ci="4" mb="0" cb="0"/><line nr="179" mi="0" ci="4" mb="0" cb="0"/><line nr="189" mi="0" ci="4" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="201" mi="0" ci="4" mb="0" cb="0"/><line nr="211" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="4" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="0" cb="0"/><line nr="223" mi="0" ci="4" mb="0" cb="0"/><line nr="233" mi="0" ci="4" mb="0" cb="0"/><line nr="234" mi="0" ci="4" mb="0" cb="0"/><line nr="244" mi="0" ci="4" mb="0" cb="0"/><line nr="245" mi="0" ci="4" mb="0" cb="0"/><line nr="255" mi="0" ci="4" mb="0" cb="0"/><line nr="256" mi="0" ci="4" mb="0" cb="0"/><line nr="276" mi="0" ci="5" mb="0" cb="0"/><line nr="280" mi="0" ci="5" mb="0" cb="0"/><line nr="306" mi="0" ci="6" mb="0" cb="0"/><line nr="310" mi="0" ci="6" mb="0" cb="0"/><line nr="314" mi="0" ci="6" mb="0" cb="0"/><line nr="334" mi="0" ci="5" mb="0" cb="0"/><line nr="360" mi="0" ci="6" mb="0" cb="0"/><line nr="380" mi="0" ci="5" mb="0" cb="0"/><line nr="384" mi="0" ci="5" mb="0" cb="0"/><line nr="410" mi="0" ci="6" mb="0" cb="0"/><line nr="414" mi="0" ci="6" mb="0" cb="0"/><line nr="418" mi="0" ci="6" mb="0" cb="0"/><line nr="438" mi="0" ci="5" mb="0" cb="0"/><line nr="464" mi="0" ci="6" mb="0" cb="0"/><line nr="469" mi="0" ci="8" mb="0" cb="0"/><line nr="474" mi="0" ci="4" mb="0" cb="0"/><line nr="475" mi="0" ci="3" mb="0" cb="0"/><line nr="476" mi="0" ci="9" mb="0" cb="2"/><line nr="477" mi="0" ci="4" mb="0" cb="0"/><line nr="478" mi="0" ci="1" mb="0" cb="0"/><line nr="479" mi="0" ci="4" mb="0" cb="2"/><line nr="480" mi="0" ci="2" mb="0" cb="0"/><line nr="482" mi="0" ci="5" mb="0" cb="0"/><line nr="488" mi="0" ci="12" mb="0" cb="2"/><line nr="493" mi="0" ci="4" mb="0" cb="0"/><line nr="499" mi="0" ci="4" mb="0" cb="0"/><line nr="500" mi="0" ci="3" mb="1" cb="1"/><line nr="501" mi="0" ci="4" mb="0" cb="0"/><line nr="502" mi="0" ci="8" mb="0" cb="0"/><line nr="504" mi="4" ci="0" mb="0" cb="0"/><line nr="510" mi="0" ci="5" mb="0" cb="0"/><line nr="515" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="4" mb="0" cb="0"/><line nr="521" mi="0" ci="9" mb="0" cb="0"/><line nr="526" mi="0" ci="4" mb="0" cb="0"/><line nr="527" mi="0" ci="9" mb="0" cb="0"/><line nr="532" mi="0" ci="2" mb="0" cb="2"/><line nr="533" mi="0" ci="2" mb="0" cb="0"/><line nr="534" mi="0" ci="4" mb="0" cb="2"/><line nr="535" mi="0" ci="5" mb="0" cb="0"/><line nr="537" mi="0" ci="9" mb="0" cb="0"/><line nr="543" mi="0" ci="2" mb="0" cb="2"/><line nr="544" mi="0" ci="2" mb="0" cb="0"/><line nr="545" mi="0" ci="4" mb="0" cb="2"/><line nr="546" mi="0" ci="5" mb="0" cb="0"/><line nr="548" mi="0" ci="9" mb="0" cb="0"/><line nr="554" mi="0" ci="4" mb="0" cb="0"/><line nr="555" mi="0" ci="5" mb="0" cb="0"/><line nr="560" mi="0" ci="4" mb="0" cb="0"/><line nr="561" mi="0" ci="9" mb="0" cb="0"/><line nr="562" mi="0" ci="9" mb="0" cb="2"/><line nr="567" mi="0" ci="4" mb="0" cb="0"/><line nr="568" mi="0" ci="9" mb="0" cb="0"/><line nr="569" mi="0" ci="9" mb="0" cb="2"/><line nr="574" mi="0" ci="4" mb="0" cb="0"/><line nr="575" mi="0" ci="5" mb="0" cb="0"/><line nr="581" mi="4" ci="0" mb="0" cb="0"/><line nr="582" mi="7" ci="0" mb="0" cb="0"/><line nr="587" mi="5" ci="0" mb="0" cb="0"/><line nr="592" mi="0" ci="4" mb="0" cb="0"/><line nr="593" mi="0" ci="6" mb="0" cb="0"/><line nr="598" mi="0" ci="4" mb="0" cb="0"/><line nr="599" mi="0" ci="8" mb="0" cb="0"/><line nr="600" mi="0" ci="8" mb="0" cb="0"/><line nr="605" mi="0" ci="5" mb="0" cb="0"/><line nr="610" mi="0" ci="2" mb="0" cb="0"/><line nr="615" mi="0" ci="3" mb="0" cb="2"/><line nr="616" mi="0" ci="5" mb="0" cb="0"/><line nr="618" mi="0" ci="5" mb="0" cb="0"/><line nr="624" mi="0" ci="4" mb="0" cb="0"/><line nr="629" mi="0" ci="3" mb="0" cb="2"/><line nr="630" mi="0" ci="5" mb="0" cb="0"/><line nr="632" mi="0" ci="11" mb="0" cb="0"/><line nr="638" mi="0" ci="9" mb="0" cb="2"/><line nr="644" mi="0" ci="4" mb="0" cb="0"/><line nr="645" mi="0" ci="3" mb="1" cb="1"/><line nr="646" mi="0" ci="4" mb="0" cb="0"/><line nr="647" mi="0" ci="8" mb="0" cb="0"/><line nr="649" mi="4" ci="0" mb="0" cb="0"/><line nr="655" mi="0" ci="4" mb="0" cb="0"/><line nr="660" mi="0" ci="2" mb="0" cb="0"/><line nr="665" mi="0" ci="4" mb="0" cb="0"/><line nr="670" mi="0" ci="4" mb="0" cb="0"/><line nr="675" mi="0" ci="4" mb="0" cb="0"/><line nr="676" mi="0" ci="7" mb="0" cb="0"/><line nr="681" mi="0" ci="5" mb="0" cb="0"/><line nr="686" mi="0" ci="3" mb="0" cb="0"/><line nr="691" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="4" mb="0" cb="0"/><line nr="701" mi="0" ci="4" mb="0" cb="0"/><line nr="702" mi="0" ci="16" mb="0" cb="0"/><line nr="703" mi="0" ci="6" mb="0" cb="0"/><line nr="708" mi="0" ci="4" mb="0" cb="0"/><line nr="709" mi="0" ci="3" mb="0" cb="2"/><line nr="710" mi="0" ci="4" mb="0" cb="0"/><line nr="712" mi="0" ci="2" mb="0" cb="0"/><line nr="717" mi="0" ci="8" mb="0" cb="0"/><line nr="722" mi="0" ci="4" mb="0" cb="0"/><line nr="723" mi="0" ci="3" mb="0" cb="2"/><line nr="724" mi="0" ci="2" mb="0" cb="0"/><line nr="726" mi="0" ci="3" mb="0" cb="0"/><line nr="727" mi="0" ci="3" mb="0" cb="0"/><line nr="728" mi="0" ci="6" mb="1" cb="3"/><line nr="729" mi="0" ci="6" mb="0" cb="0"/><line nr="731" mi="0" ci="4" mb="0" cb="2"/><line nr="732" mi="0" ci="2" mb="0" cb="0"/><line nr="734" mi="0" ci="5" mb="0" cb="0"/><line nr="741" mi="0" ci="5" mb="0" cb="2"/><line nr="742" mi="0" ci="10" mb="0" cb="0"/><line nr="744" mi="0" ci="2" mb="0" cb="0"/><line nr="751" mi="0" ci="5" mb="0" cb="0"/><line nr="756" mi="0" ci="4" mb="0" cb="0"/><line nr="757" mi="0" ci="3" mb="0" cb="2"/><line nr="758" mi="0" ci="2" mb="0" cb="0"/><line nr="760" mi="0" ci="6" mb="0" cb="0"/><line nr="761" mi="0" ci="5" mb="0" cb="0"/><line nr="762" mi="0" ci="16" mb="0" cb="2"/><line nr="768" mi="0" ci="4" mb="0" cb="0"/><line nr="769" mi="0" ci="11" mb="0" cb="0"/><line nr="774" mi="0" ci="4" mb="0" cb="0"/><line nr="775" mi="0" ci="3" mb="0" cb="2"/><line nr="776" mi="0" ci="2" mb="0" cb="0"/><line nr="777" mi="0" ci="10" mb="0" cb="0"/><line nr="779" mi="0" ci="11" mb="0" cb="0"/><line nr="780" mi="0" ci="4" mb="0" cb="0"/><line nr="781" mi="0" ci="2" mb="0" cb="0"/><line nr="788" mi="0" ci="4" mb="0" cb="0"/><line nr="789" mi="0" ci="3" mb="0" cb="2"/><line nr="790" mi="0" ci="2" mb="0" cb="0"/><line nr="791" mi="0" ci="10" mb="0" cb="0"/><line nr="793" mi="0" ci="11" mb="0" cb="0"/><line nr="794" mi="0" ci="4" mb="0" cb="0"/><line nr="795" mi="0" ci="2" mb="0" cb="0"/><line nr="802" mi="0" ci="5" mb="0" cb="0"/><line nr="807" mi="0" ci="15" mb="0" cb="0"/><line nr="812" mi="0" ci="4" mb="0" cb="0"/><line nr="813" mi="0" ci="16" mb="0" cb="0"/><line nr="814" mi="0" ci="6" mb="0" cb="0"/><line nr="819" mi="0" ci="3" mb="0" cb="2"/><line nr="820" mi="0" ci="5" mb="0" cb="0"/><line nr="822" mi="0" ci="11" mb="0" cb="0"/><line nr="828" mi="0" ci="9" mb="0" cb="2"/><line nr="833" mi="0" ci="2" mb="0" cb="2"/><line nr="834" mi="0" ci="5" mb="0" cb="0"/><line nr="835" mi="0" ci="4" mb="0" cb="2"/><line nr="836" mi="0" ci="2" mb="0" cb="0"/><line nr="838" mi="0" ci="9" mb="0" cb="0"/><line nr="844" mi="0" ci="2" mb="0" cb="2"/><line nr="845" mi="0" ci="5" mb="0" cb="0"/><line nr="846" mi="0" ci="4" mb="0" cb="2"/><line nr="847" mi="0" ci="2" mb="0" cb="0"/><line nr="849" mi="0" ci="9" mb="0" cb="0"/><line nr="855" mi="0" ci="4" mb="0" cb="0"/><line nr="856" mi="0" ci="5" mb="0" cb="0"/><line nr="857" mi="0" ci="9" mb="0" cb="2"/><line nr="862" mi="0" ci="4" mb="0" cb="0"/><line nr="863" mi="0" ci="9" mb="0" cb="0"/><line nr="864" mi="0" ci="9" mb="0" cb="2"/><line nr="870" mi="0" ci="4" mb="0" cb="0"/><line nr="871" mi="0" ci="3" mb="1" cb="1"/><line nr="872" mi="0" ci="4" mb="0" cb="0"/><line nr="873" mi="0" ci="8" mb="0" cb="0"/><line nr="875" mi="4" ci="0" mb="0" cb="0"/><line nr="881" mi="4" ci="0" mb="0" cb="0"/><line nr="887" mi="0" ci="4" mb="0" cb="0"/><line nr="888" mi="0" ci="12" mb="0" cb="0"/><line nr="889" mi="0" ci="4" mb="0" cb="0"/><line nr="895" mi="0" ci="4" mb="0" cb="0"/><line nr="896" mi="0" ci="9" mb="0" cb="0"/><line nr="897" mi="0" ci="4" mb="0" cb="0"/><line nr="898" mi="0" ci="4" mb="0" cb="0"/><line nr="899" mi="0" ci="4" mb="0" cb="0"/><line nr="904" mi="0" ci="4" mb="0" cb="0"/><line nr="905" mi="0" ci="6" mb="0" cb="0"/><line nr="906" mi="0" ci="7" mb="0" cb="0"/><line nr="911" mi="0" ci="4" mb="0" cb="0"/><line nr="912" mi="0" ci="6" mb="0" cb="0"/><line nr="913" mi="0" ci="9" mb="0" cb="0"/><line nr="918" mi="0" ci="4" mb="0" cb="0"/><line nr="919" mi="0" ci="10" mb="0" cb="0"/><line nr="920" mi="0" ci="6" mb="0" cb="0"/><line nr="927" mi="0" ci="3" mb="0" cb="2"/><line nr="928" mi="0" ci="2" mb="0" cb="0"/><line nr="929" mi="0" ci="3" mb="0" cb="2"/><line nr="930" mi="0" ci="3" mb="0" cb="0"/><line nr="931" mi="0" ci="6" mb="0" cb="0"/><line nr="933" mi="0" ci="2" mb="0" cb="0"/><line nr="939" mi="0" ci="4" mb="0" cb="0"/><line nr="944" mi="0" ci="2" mb="0" cb="0"/><line nr="949" mi="0" ci="14" mb="0" cb="0"/><counter type="INSTRUCTION" missed="60" covered="1207"/><counter type="BRANCH" missed="4" covered="70"/><counter type="LINE" missed="12" covered="232"/><counter type="COMPLEXITY" missed="10" covered="146"/><counter type="METHOD" missed="6" covered="113"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Stack.java"><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="60" mi="0" ci="2" mb="0" cb="0"/><line nr="61" mi="0" ci="8" mb="0" cb="0"/><line nr="71" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="0" ci="4" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="3" mb="0" cb="2"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="0"/><line nr="125" mi="0" ci="4" mb="0" cb="0"/><line nr="126" mi="0" ci="3" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="3" mb="0" cb="0"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="0" ci="3" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="3" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="0"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="181" mi="0" ci="3" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="3" mb="0" cb="0"/><line nr="202" mi="0" ci="4" mb="0" cb="0"/><line nr="203" mi="0" ci="3" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="7" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="7" mb="0" cb="0"/><line nr="236" mi="0" ci="4" mb="0" cb="0"/><line nr="240" mi="0" ci="5" mb="0" cb="0"/><line nr="244" mi="0" ci="5" mb="0" cb="0"/><line nr="264" mi="0" ci="4" mb="0" cb="0"/><line nr="290" mi="0" ci="5" mb="0" cb="0"/><line nr="310" mi="0" ci="4" mb="0" cb="0"/><line nr="336" mi="0" ci="5" mb="0" cb="0"/><line nr="340" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="5" mb="0" cb="0"/><line nr="348" mi="0" ci="5" mb="0" cb="0"/><line nr="368" mi="0" ci="4" mb="0" cb="0"/><line nr="394" mi="0" ci="5" mb="0" cb="0"/><line nr="414" mi="0" ci="4" mb="0" cb="0"/><line nr="440" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="189"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="49"/><counter type="COMPLEXITY" missed="0" covered="31"/><counter type="METHOD" missed="0" covered="30"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="HashArrayMappedTrie.java"><line nr="30" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="9" ci="17" mb="0" cb="0"/><line nr="54" mi="0" ci="12" mb="0" cb="0"/><line nr="63" mi="0" ci="3" mb="0" cb="0"/><line nr="75" mi="0" ci="8" mb="0" cb="0"/><line nr="76" mi="0" ci="10" mb="0" cb="0"/><line nr="77" mi="0" ci="8" mb="0" cb="0"/><line nr="78" mi="0" ci="6" mb="0" cb="0"/><line nr="79" mi="0" ci="6" mb="0" cb="0"/><line nr="80" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="6" mb="0" cb="0"/><line nr="88" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="7" mb="0" cb="0"/><line nr="101" mi="0" ci="5" mb="0" cb="0"/><line nr="106" mi="0" ci="5" mb="0" cb="0"/><line nr="111" mi="0" ci="7" mb="0" cb="0"/><line nr="116" mi="0" ci="7" mb="0" cb="0"/><line nr="121" mi="0" ci="3" mb="0" cb="2"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="3" mb="0" cb="2"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="125" mi="0" ci="4" mb="0" cb="0"/><line nr="126" mi="0" ci="6" mb="0" cb="4"/><line nr="127" mi="0" ci="6" mb="0" cb="2"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="131" mi="0" ci="10" mb="0" cb="4"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="142" mi="0" ci="22" mb="0" cb="0"/><line nr="156" mi="0" ci="5" mb="0" cb="0"/><line nr="158" mi="0" ci="2" mb="0" cb="0"/><line nr="159" mi="0" ci="1" mb="0" cb="0"/><line nr="163" mi="0" ci="2" mb="0" cb="0"/><line nr="168" mi="0" ci="2" mb="0" cb="0"/><line nr="173" mi="0" ci="13" mb="0" cb="2"/><line nr="178" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="0" ci="2" mb="0" cb="0"/><line nr="188" mi="0" ci="2" mb="0" cb="0"/><line nr="193" mi="0" ci="2" mb="0" cb="0"/><line nr="203" mi="0" ci="2" mb="0" cb="0"/><line nr="213" mi="0" ci="3" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="0" ci="3" mb="0" cb="0"/><line nr="224" mi="0" ci="3" mb="0" cb="2"/><line nr="225" mi="0" ci="10" mb="0" cb="0"/><line nr="227" mi="0" ci="4" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="6" mb="0" cb="0"/><line nr="230" mi="0" ci="3" mb="0" cb="2"/><line nr="231" mi="0" ci="7" mb="0" cb="0"/><line nr="232" mi="0" ci="9" mb="0" cb="0"/><line nr="234" mi="0" ci="22" mb="0" cb="2"/><line nr="235" mi="0" ci="14" mb="0" cb="0"/><line nr="241" mi="0" ci="2" mb="0" cb="0"/><line nr="260" mi="0" ci="2" mb="0" cb="0"/><line nr="261" mi="0" ci="3" mb="0" cb="0"/><line nr="262" mi="0" ci="3" mb="0" cb="0"/><line nr="263" mi="0" ci="3" mb="0" cb="0"/><line nr="264" mi="0" ci="13" mb="0" cb="0"/><line nr="265" mi="0" ci="1" mb="0" cb="0"/><line nr="269" mi="0" ci="5" mb="0" cb="2"/><line nr="270" mi="0" ci="4" mb="0" cb="0"/><line nr="272" mi="0" ci="2" mb="0" cb="0"/><line nr="278" mi="0" ci="5" mb="0" cb="2"/><line nr="279" mi="0" ci="13" mb="0" cb="2"/><line nr="281" mi="0" ci="16" mb="0" cb="2"/><line nr="287" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="6" mb="0" cb="0"/><line nr="293" mi="0" ci="3" mb="0" cb="0"/><line nr="298" mi="0" ci="3" mb="0" cb="0"/><line nr="303" mi="0" ci="3" mb="0" cb="0"/><line nr="308" mi="0" ci="3" mb="0" cb="0"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="334" mi="0" ci="2" mb="0" cb="0"/><line nr="335" mi="0" ci="3" mb="0" cb="0"/><line nr="336" mi="0" ci="3" mb="0" cb="0"/><line nr="337" mi="0" ci="3" mb="0" cb="0"/><line nr="338" mi="0" ci="6" mb="0" cb="0"/><line nr="339" mi="0" ci="3" mb="0" cb="0"/><line nr="340" mi="0" ci="17" mb="0" cb="0"/><line nr="341" mi="0" ci="1" mb="0" cb="0"/><line nr="345" mi="0" ci="5" mb="0" cb="2"/><line nr="346" mi="0" ci="2" mb="0" cb="0"/><line nr="348" mi="0" ci="16" mb="0" cb="0"/><line nr="353" mi="0" ci="5" mb="0" cb="2"/><line nr="354" mi="0" ci="4" mb="0" cb="0"/><line nr="355" mi="0" ci="3" mb="0" cb="2"/><line nr="356" mi="0" ci="2" mb="0" cb="0"/><line nr="358" mi="0" ci="10" mb="0" cb="0"/><line nr="361" mi="2" ci="14" mb="1" cb="1"/><line nr="366" mi="0" ci="2" mb="0" cb="2"/><line nr="367" mi="0" ci="2" mb="0" cb="0"/><line nr="369" mi="0" ci="3" mb="0" cb="2"/><line nr="370" mi="0" ci="11" mb="0" cb="0"/><line nr="372" mi="0" ci="3" mb="0" cb="2"/><line nr="373" mi="0" ci="11" mb="0" cb="0"/><line nr="375" mi="0" ci="2" mb="0" cb="0"/><line nr="376" mi="0" ci="2" mb="0" cb="0"/><line nr="377" mi="0" ci="3" mb="0" cb="2"/><line nr="378" mi="0" ci="3" mb="0" cb="0"/><line nr="379" mi="0" ci="11" mb="0" cb="0"/><line nr="380" mi="0" ci="3" mb="0" cb="0"/><line nr="381" mi="0" ci="1" mb="0" cb="0"/><line nr="382" mi="0" ci="11" mb="0" cb="0"/><line nr="386" mi="0" ci="5" mb="0" cb="2"/><line nr="387" mi="0" ci="3" mb="0" cb="0"/><line nr="389" mi="0" ci="10" mb="0" cb="0"/><line nr="390" mi="0" ci="3" mb="0" cb="0"/><line nr="391" mi="0" ci="2" mb="0" cb="0"/><line nr="392" mi="0" ci="4" mb="0" cb="4"/><line nr="393" mi="0" ci="5" mb="0" cb="2"/><line nr="394" mi="0" ci="3" mb="0" cb="0"/><line nr="396" mi="0" ci="11" mb="0" cb="0"/><line nr="398" mi="0" ci="10" mb="0" cb="2"/><line nr="400" mi="0" ci="4" mb="0" cb="0"/><line nr="405" mi="0" ci="3" mb="0" cb="0"/><line nr="410" mi="0" ci="3" mb="0" cb="0"/><line nr="415" mi="0" ci="10" mb="0" cb="0"/><line nr="416" mi="0" ci="5" mb="0" cb="0"/><line nr="420" mi="0" ci="7" mb="0" cb="2"/><line nr="425" mi="0" ci="8" mb="0" cb="0"/><line nr="426" mi="0" ci="4" mb="0" cb="2"/><line nr="427" mi="0" ci="4" mb="0" cb="0"/><line nr="429" mi="0" ci="6" mb="0" cb="0"/><line nr="431" mi="0" ci="2" mb="0" cb="0"/><line nr="438" mi="0" ci="3" mb="0" cb="0"/><line nr="443" mi="0" ci="3" mb="0" cb="0"/><line nr="448" mi="0" ci="3" mb="0" cb="0"/><line nr="466" mi="0" ci="2" mb="0" cb="0"/><line nr="467" mi="0" ci="3" mb="0" cb="0"/><line nr="468" mi="0" ci="3" mb="0" cb="0"/><line nr="469" mi="0" ci="3" mb="0" cb="0"/><line nr="470" mi="0" ci="1" mb="0" cb="0"/><line nr="474" mi="0" ci="3" mb="0" cb="0"/><line nr="475" mi="0" ci="4" mb="0" cb="0"/><line nr="476" mi="0" ci="3" mb="0" cb="0"/><line nr="477" mi="0" ci="21" mb="0" cb="2"/><line nr="482" mi="0" ci="5" mb="0" cb="0"/><line nr="483" mi="0" ci="3" mb="0" cb="0"/><line nr="484" mi="0" ci="5" mb="0" cb="0"/><line nr="485" mi="0" ci="3" mb="0" cb="0"/><line nr="486" mi="0" ci="8" mb="0" cb="2"/><line nr="487" mi="0" ci="10" mb="0" cb="2"/><line nr="488" mi="0" ci="11" mb="0" cb="2"/><line nr="489" mi="0" ci="9" mb="0" cb="0"/><line nr="490" mi="0" ci="9" mb="0" cb="4"/><line nr="491" mi="0" ci="9" mb="0" cb="4"/><line nr="492" mi="0" ci="16" mb="0" cb="4"/><line nr="493" mi="0" ci="2" mb="0" cb="2"/><line nr="494" mi="0" ci="2" mb="0" cb="0"/><line nr="495" mi="0" ci="2" mb="0" cb="2"/><line nr="496" mi="0" ci="13" mb="0" cb="4"/><line nr="497" mi="0" ci="8" mb="0" cb="0"/><line nr="499" mi="0" ci="14" mb="0" cb="0"/><line nr="501" mi="0" ci="2" mb="0" cb="2"/><line nr="502" mi="0" ci="5" mb="0" cb="2"/><line nr="503" mi="0" ci="8" mb="0" cb="0"/><line nr="505" mi="0" ci="15" mb="0" cb="0"/><line nr="508" mi="0" ci="2" mb="0" cb="2"/><line nr="509" mi="0" ci="2" mb="0" cb="0"/><line nr="511" mi="0" ci="18" mb="0" cb="0"/><line nr="518" mi="0" ci="4" mb="0" cb="0"/><line nr="522" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="2" mb="0" cb="0"/><line nr="524" mi="0" ci="2" mb="0" cb="0"/><line nr="525" mi="0" ci="3" mb="0" cb="0"/><line nr="526" mi="0" ci="7" mb="0" cb="2"/><line nr="527" mi="0" ci="4" mb="0" cb="2"/><line nr="528" mi="0" ci="5" mb="0" cb="0"/><line nr="529" mi="0" ci="3" mb="0" cb="0"/><line nr="530" mi="0" ci="2" mb="0" cb="0"/><line nr="531" mi="0" ci="3" mb="0" cb="2"/><line nr="532" mi="0" ci="4" mb="0" cb="0"/><line nr="533" mi="0" ci="2" mb="0" cb="0"/><line nr="535" mi="0" ci="4" mb="0" cb="0"/><line nr="537" mi="0" ci="4" mb="0" cb="0"/><line nr="539" mi="0" ci="11" mb="0" cb="0"/><line nr="544" mi="0" ci="2" mb="0" cb="0"/><line nr="549" mi="0" ci="3" mb="0" cb="0"/><line nr="554" mi="0" ci="4" mb="0" cb="0"/><line nr="568" mi="0" ci="9" mb="0" cb="0"/><line nr="573" mi="0" ci="2" mb="0" cb="0"/><line nr="574" mi="0" ci="3" mb="0" cb="0"/><line nr="575" mi="0" ci="3" mb="0" cb="0"/><line nr="576" mi="0" ci="3" mb="0" cb="0"/><line nr="577" mi="0" ci="1" mb="0" cb="0"/><line nr="582" mi="0" ci="5" mb="0" cb="0"/><line nr="583" mi="0" ci="6" mb="0" cb="0"/><line nr="584" mi="0" ci="7" mb="0" cb="0"/><line nr="590" mi="0" ci="5" mb="0" cb="0"/><line nr="591" mi="0" ci="6" mb="0" cb="0"/><line nr="592" mi="0" ci="9" mb="0" cb="0"/><line nr="593" mi="0" ci="6" mb="1" cb="3"/><line nr="594" mi="0" ci="18" mb="0" cb="0"/><line nr="595" mi="0" ci="6" mb="1" cb="3"/><line nr="596" mi="0" ci="6" mb="0" cb="2"/><line nr="597" mi="0" ci="6" mb="0" cb="0"/><line nr="599" mi="0" ci="18" mb="0" cb="0"/><line nr="602" mi="0" ci="19" mb="0" cb="0"/><line nr="608" mi="0" ci="6" mb="0" cb="0"/><line nr="612" mi="0" ci="5" mb="0" cb="0"/><line nr="613" mi="0" ci="4" mb="0" cb="0"/><line nr="614" mi="0" ci="2" mb="0" cb="0"/><line nr="619" mi="0" ci="2" mb="0" cb="0"/><line nr="620" mi="0" ci="2" mb="0" cb="0"/><line nr="621" mi="0" ci="2" mb="0" cb="0"/><line nr="622" mi="0" ci="6" mb="0" cb="2"/><line nr="623" mi="0" ci="5" mb="0" cb="0"/><line nr="624" mi="0" ci="6" mb="0" cb="4"/><line nr="625" mi="0" ci="5" mb="0" cb="0"/><line nr="626" mi="0" ci="4" mb="0" cb="0"/><line nr="627" mi="0" ci="6" mb="0" cb="0"/><line nr="630" mi="0" ci="7" mb="0" cb="0"/><line nr="635" mi="0" ci="2" mb="0" cb="0"/><line nr="640" mi="0" ci="3" mb="0" cb="0"/><line nr="645" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="1194"/><counter type="BRANCH" missed="3" covered="113"/><counter type="LINE" missed="0" covered="215"/><counter type="COMPLEXITY" missed="5" covered="126"/><counter type="METHOD" missed="2" covered="71"/><counter type="CLASS" missed="0" covered="10"/></sourcefile><sourcefile name="Iterator.java"><line nr="51" mi="0" ci="8" mb="0" cb="0"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="60" mi="2" ci="0" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="3" mb="0" cb="2"/><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="78" mi="0" ci="9" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="4" mb="0" cb="2"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="94" mi="0" ci="9" mb="0" cb="0"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="117" mi="0" ci="10" mb="0" cb="0"/><line nr="119" mi="0" ci="4" mb="0" cb="0"/><line nr="123" mi="0" ci="3" mb="0" cb="0"/><line nr="128" mi="0" ci="3" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="0" ci="3" mb="0" cb="2"/><line nr="145" mi="0" ci="2" mb="0" cb="0"/><line nr="147" mi="0" ci="10" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="0" ci="10" mb="0" cb="2"/><line nr="158" mi="0" ci="11" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="3" mb="0" cb="2"/><line nr="176" mi="0" ci="3" mb="0" cb="0"/><line nr="178" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="4" mb="0" cb="0"/><line nr="193" mi="0" ci="3" mb="0" cb="2"/><line nr="194" mi="0" ci="3" mb="0" cb="0"/><line nr="196" mi="0" ci="11" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="0" ci="10" mb="0" cb="0"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="224" mi="0" ci="10" mb="0" cb="2"/><line nr="229" mi="0" ci="12" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="242" mi="0" ci="10" mb="0" cb="0"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="10" mb="0" cb="2"/><line nr="252" mi="0" ci="12" mb="0" cb="0"/><line nr="264" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="0" ci="10" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="0" ci="10" mb="0" cb="2"/><line nr="275" mi="0" ci="12" mb="0" cb="0"/><line nr="287" mi="0" ci="4" mb="0" cb="0"/><line nr="288" mi="0" ci="10" mb="0" cb="0"/><line nr="289" mi="0" ci="4" mb="0" cb="0"/><line nr="293" mi="0" ci="10" mb="0" cb="2"/><line nr="298" mi="0" ci="12" mb="0" cb="0"/><line nr="310" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="0" ci="10" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="0"/><line nr="316" mi="0" ci="10" mb="0" cb="2"/><line nr="321" mi="0" ci="12" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="10" mb="0" cb="0"/><line nr="335" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="10" mb="0" cb="2"/><line nr="344" mi="0" ci="12" mb="0" cb="0"/><line nr="356" mi="0" ci="4" mb="0" cb="0"/><line nr="357" mi="0" ci="10" mb="0" cb="0"/><line nr="358" mi="0" ci="4" mb="0" cb="0"/><line nr="362" mi="0" ci="10" mb="0" cb="2"/><line nr="367" mi="0" ci="12" mb="0" cb="0"/><line nr="379" mi="0" ci="4" mb="0" cb="0"/><line nr="380" mi="0" ci="10" mb="0" cb="0"/><line nr="381" mi="0" ci="4" mb="0" cb="0"/><line nr="385" mi="0" ci="10" mb="0" cb="2"/><line nr="390" mi="0" ci="12" mb="0" cb="0"/><line nr="406" mi="0" ci="4" mb="0" cb="0"/><line nr="407" mi="0" ci="4" mb="0" cb="0"/><line nr="420" mi="0" ci="4" mb="0" cb="0"/><line nr="421" mi="0" ci="4" mb="0" cb="0"/><line nr="440" mi="0" ci="5" mb="0" cb="0"/><line nr="464" mi="0" ci="12" mb="0" cb="0"/><line nr="468" mi="0" ci="3" mb="0" cb="2"/><line nr="469" mi="0" ci="5" mb="0" cb="0"/><line nr="470" mi="0" ci="3" mb="0" cb="2"/><line nr="471" mi="0" ci="5" mb="0" cb="0"/><line nr="472" mi="0" ci="3" mb="0" cb="2"/><line nr="473" mi="0" ci="5" mb="0" cb="0"/><line nr="474" mi="0" ci="4" mb="0" cb="2"/><line nr="475" mi="0" ci="5" mb="0" cb="0"/><line nr="476" mi="0" ci="8" mb="0" cb="2"/><line nr="477" mi="0" ci="2" mb="0" cb="0"/><line nr="479" mi="0" ci="18" mb="0" cb="0"/><line nr="481" mi="0" ci="3" mb="0" cb="0"/><line nr="482" mi="0" ci="4" mb="0" cb="0"/><line nr="483" mi="0" ci="4" mb="0" cb="0"/><line nr="487" mi="0" ci="3" mb="0" cb="0"/><line nr="492" mi="0" ci="3" mb="0" cb="0"/><line nr="493" mi="0" ci="28" mb="0" cb="8"/><line nr="494" mi="0" ci="4" mb="0" cb="0"/><line nr="496" mi="0" ci="4" mb="0" cb="0"/><line nr="497" mi="0" ci="7" mb="0" cb="0"/><line nr="498" mi="0" ci="6" mb="0" cb="2"/><line nr="499" mi="0" ci="3" mb="0" cb="0"/><line nr="502" mi="0" ci="3" mb="0" cb="0"/><line nr="525" mi="0" ci="5" mb="0" cb="0"/><line nr="549" mi="0" ci="6" mb="0" cb="2"/><line nr="550" mi="0" ci="7" mb="0" cb="0"/><line nr="570" mi="0" ci="5" mb="0" cb="0"/><line nr="594" mi="0" ci="8" mb="0" cb="2"/><line nr="595" mi="0" ci="8" mb="0" cb="0"/><line nr="614" mi="0" ci="5" mb="0" cb="0"/><line nr="638" mi="0" ci="12" mb="0" cb="0"/><line nr="642" mi="0" ci="3" mb="0" cb="2"/><line nr="643" mi="0" ci="5" mb="0" cb="0"/><line nr="644" mi="0" ci="3" mb="0" cb="2"/><line nr="645" mi="0" ci="5" mb="0" cb="0"/><line nr="646" mi="0" ci="3" mb="0" cb="2"/><line nr="647" mi="0" ci="5" mb="0" cb="0"/><line nr="648" mi="0" ci="4" mb="0" cb="2"/><line nr="649" mi="0" ci="5" mb="0" cb="0"/><line nr="650" mi="0" ci="4" mb="0" cb="2"/><line nr="651" mi="0" ci="4" mb="0" cb="0"/><line nr="652" mi="0" ci="8" mb="0" cb="2"/><line nr="653" mi="0" ci="2" mb="0" cb="0"/><line nr="655" mi="0" ci="18" mb="0" cb="0"/><line nr="657" mi="0" ci="3" mb="0" cb="0"/><line nr="658" mi="0" ci="4" mb="0" cb="0"/><line nr="659" mi="0" ci="4" mb="0" cb="0"/><line nr="663" mi="0" ci="3" mb="0" cb="0"/><line nr="668" mi="0" ci="3" mb="0" cb="0"/><line nr="669" mi="0" ci="28" mb="0" cb="8"/><line nr="670" mi="0" ci="4" mb="0" cb="0"/><line nr="672" mi="0" ci="4" mb="0" cb="0"/><line nr="673" mi="0" ci="7" mb="0" cb="0"/><line nr="674" mi="0" ci="6" mb="0" cb="2"/><line nr="675" mi="0" ci="3" mb="0" cb="0"/><line nr="678" mi="0" ci="3" mb="0" cb="0"/><line nr="701" mi="0" ci="5" mb="0" cb="0"/><line nr="725" mi="0" ci="2" mb="0" cb="2"/><line nr="726" mi="0" ci="5" mb="0" cb="0"/><line nr="727" mi="0" ci="3" mb="0" cb="2"/><line nr="728" mi="0" ci="4" mb="0" cb="0"/><line nr="729" mi="0" ci="8" mb="0" cb="2"/><line nr="730" mi="0" ci="2" mb="0" cb="0"/><line nr="732" mi="0" ci="18" mb="0" cb="0"/><line nr="734" mi="0" ci="4" mb="0" cb="0"/><line nr="735" mi="0" ci="4" mb="0" cb="0"/><line nr="739" mi="0" ci="3" mb="0" cb="0"/><line nr="744" mi="0" ci="3" mb="0" cb="0"/><line nr="745" mi="0" ci="22" mb="0" cb="8"/><line nr="746" mi="0" ci="4" mb="0" cb="0"/><line nr="748" mi="0" ci="7" mb="0" cb="0"/><line nr="750" mi="0" ci="3" mb="0" cb="0"/><line nr="773" mi="0" ci="5" mb="0" cb="0"/><line nr="797" mi="0" ci="4" mb="0" cb="2"/><line nr="798" mi="0" ci="5" mb="0" cb="0"/><line nr="799" mi="0" ci="4" mb="0" cb="2"/><line nr="800" mi="0" ci="4" mb="0" cb="0"/><line nr="801" mi="0" ci="11" mb="0" cb="2"/><line nr="802" mi="0" ci="2" mb="0" cb="0"/><line nr="804" mi="0" ci="18" mb="0" cb="0"/><line nr="806" mi="0" ci="4" mb="0" cb="0"/><line nr="807" mi="0" ci="4" mb="0" cb="0"/><line nr="811" mi="0" ci="3" mb="0" cb="0"/><line nr="816" mi="0" ci="3" mb="0" cb="0"/><line nr="817" mi="0" ci="28" mb="0" cb="8"/><line nr="818" mi="0" ci="4" mb="0" cb="0"/><line nr="820" mi="0" ci="7" mb="0" cb="0"/><line nr="822" mi="0" ci="3" mb="0" cb="0"/><line nr="837" mi="0" ci="10" mb="0" cb="0"/><line nr="838" mi="0" ci="5" mb="0" cb="0"/><line nr="842" mi="0" ci="2" mb="0" cb="0"/><line nr="847" mi="0" ci="9" mb="0" cb="0"/><line nr="861" mi="0" ci="10" mb="0" cb="0"/><line nr="862" mi="0" ci="5" mb="0" cb="0"/><line nr="866" mi="0" ci="2" mb="0" cb="0"/><line nr="871" mi="0" ci="9" mb="0" cb="0"/><line nr="884" mi="0" ci="4" mb="0" cb="0"/><line nr="885" mi="0" ci="11" mb="0" cb="0"/><line nr="888" mi="0" ci="2" mb="0" cb="0"/><line nr="893" mi="0" ci="4" mb="0" cb="0"/><line nr="908" mi="0" ci="4" mb="0" cb="0"/><line nr="909" mi="0" ci="14" mb="0" cb="0"/><line nr="910" mi="0" ci="5" mb="0" cb="0"/><line nr="914" mi="0" ci="2" mb="0" cb="0"/><line nr="919" mi="0" ci="3" mb="0" cb="0"/><line nr="920" mi="0" ci="7" mb="0" cb="0"/><line nr="921" mi="0" ci="2" mb="0" cb="0"/><line nr="934" mi="0" ci="11" mb="0" cb="0"/><line nr="937" mi="0" ci="2" mb="0" cb="0"/><line nr="942" mi="0" ci="3" mb="0" cb="0"/><line nr="951" mi="0" ci="4" mb="0" cb="0"/><line nr="952" mi="0" ci="3" mb="0" cb="2"/><line nr="953" mi="0" ci="2" mb="0" cb="0"/><line nr="954" mi="0" ci="3" mb="0" cb="2"/><line nr="955" mi="0" ci="3" mb="0" cb="0"/><line nr="957" mi="0" ci="13" mb="0" cb="0"/><line nr="968" mi="0" ci="3" mb="0" cb="2"/><line nr="969" mi="0" ci="2" mb="0" cb="0"/><line nr="971" mi="0" ci="2" mb="0" cb="0"/><line nr="972" mi="0" ci="18" mb="0" cb="0"/><line nr="974" mi="0" ci="4" mb="0" cb="0"/><line nr="978" mi="0" ci="4" mb="0" cb="0"/><line nr="983" mi="0" ci="3" mb="0" cb="2"/><line nr="984" mi="0" ci="3" mb="0" cb="0"/><line nr="985" mi="0" ci="3" mb="0" cb="0"/><line nr="987" mi="0" ci="3" mb="0" cb="0"/><line nr="988" mi="0" ci="4" mb="0" cb="0"/><line nr="1004" mi="0" ci="4" mb="0" cb="0"/><line nr="1005" mi="0" ci="4" mb="0" cb="0"/><line nr="1010" mi="0" ci="4" mb="0" cb="0"/><line nr="1011" mi="0" ci="3" mb="0" cb="2"/><line nr="1012" mi="0" ci="2" mb="0" cb="0"/><line nr="1014" mi="0" ci="2" mb="0" cb="0"/><line nr="1015" mi="0" ci="3" mb="0" cb="0"/><line nr="1016" mi="0" ci="19" mb="0" cb="0"/><line nr="1019" mi="0" ci="12" mb="0" cb="4"/><line nr="1024" mi="0" ci="8" mb="0" cb="0"/><line nr="1032" mi="0" ci="4" mb="0" cb="0"/><line nr="1033" mi="0" ci="3" mb="0" cb="0"/><line nr="1034" mi="0" ci="6" mb="0" cb="4"/><line nr="1035" mi="0" ci="2" mb="0" cb="0"/><line nr="1037" mi="0" ci="2" mb="0" cb="0"/><line nr="1038" mi="0" ci="27" mb="0" cb="0"/><line nr="1041" mi="0" ci="12" mb="0" cb="4"/><line nr="1046" mi="0" ci="11" mb="0" cb="2"/><line nr="1047" mi="0" ci="11" mb="0" cb="2"/><line nr="1048" mi="0" ci="4" mb="0" cb="0"/><line nr="1056" mi="0" ci="3" mb="0" cb="2"/><line nr="1057" mi="0" ci="2" mb="0" cb="0"/><line nr="1059" mi="0" ci="2" mb="0" cb="0"/><line nr="1060" mi="0" ci="14" mb="0" cb="0"/><line nr="1061" mi="0" ci="4" mb="0" cb="0"/><line nr="1065" mi="0" ci="4" mb="0" cb="0"/><line nr="1070" mi="0" ci="13" mb="0" cb="0"/><line nr="1079" mi="0" ci="4" mb="0" cb="0"/><line nr="1080" mi="0" ci="3" mb="0" cb="2"/><line nr="1081" mi="0" ci="4" mb="0" cb="0"/><line nr="1083" mi="0" ci="5" mb="0" cb="0"/><line nr="1084" mi="0" ci="16" mb="0" cb="0"/><line nr="1091" mi="0" ci="4" mb="0" cb="0"/><line nr="1092" mi="0" ci="3" mb="0" cb="2"/><line nr="1093" mi="0" ci="5" mb="0" cb="0"/><line nr="1095" mi="0" ci="5" mb="0" cb="0"/><line nr="1096" mi="0" ci="23" mb="0" cb="0"/><line nr="1104" mi="0" ci="2" mb="0" cb="0"/><line nr="1109" mi="0" ci="3" mb="0" cb="2"/><line nr="1110" mi="0" ci="2" mb="0" cb="0"/><line nr="1112" mi="0" ci="7" mb="0" cb="0"/><line nr="1118" mi="0" ci="4" mb="0" cb="0"/><line nr="1119" mi="0" ci="3" mb="0" cb="2"/><line nr="1120" mi="0" ci="2" mb="0" cb="0"/><line nr="1122" mi="0" ci="8" mb="0" cb="0"/><line nr="1128" mi="0" ci="4" mb="0" cb="0"/><line nr="1129" mi="0" ci="3" mb="0" cb="2"/><line nr="1130" mi="0" ci="2" mb="0" cb="0"/><line nr="1132" mi="0" ci="7" mb="0" cb="0"/><line nr="1144" mi="0" ci="2" mb="0" cb="2"/><line nr="1145" mi="0" ci="2" mb="0" cb="0"/><line nr="1146" mi="0" ci="3" mb="0" cb="2"/><line nr="1147" mi="0" ci="2" mb="0" cb="0"/><line nr="1149" mi="0" ci="2" mb="0" cb="0"/><line nr="1150" mi="0" ci="18" mb="0" cb="0"/><line nr="1152" mi="0" ci="5" mb="0" cb="0"/><line nr="1156" mi="0" ci="7" mb="0" cb="4"/><line nr="1157" mi="0" ci="4" mb="0" cb="0"/><line nr="1158" mi="0" ci="7" mb="0" cb="0"/><line nr="1160" mi="0" ci="4" mb="0" cb="0"/><line nr="1165" mi="0" ci="4" mb="0" cb="0"/><line nr="1173" mi="0" ci="2" mb="0" cb="2"/><line nr="1174" mi="0" ci="2" mb="0" cb="0"/><line nr="1175" mi="0" ci="3" mb="0" cb="2"/><line nr="1176" mi="0" ci="2" mb="0" cb="0"/><line nr="1178" mi="0" ci="2" mb="0" cb="0"/><line nr="1179" mi="0" ci="18" mb="0" cb="0"/><line nr="1180" mi="0" ci="4" mb="0" cb="0"/><line nr="1184" mi="0" ci="10" mb="0" cb="4"/><line nr="1185" mi="0" ci="9" mb="0" cb="0"/><line nr="1187" mi="0" ci="14" mb="0" cb="4"/><line nr="1192" mi="0" ci="8" mb="0" cb="0"/><line nr="1193" mi="0" ci="5" mb="0" cb="0"/><line nr="1194" mi="0" ci="3" mb="0" cb="0"/><line nr="1202" mi="0" ci="4" mb="0" cb="0"/><line nr="1203" mi="0" ci="5" mb="0" cb="0"/><line nr="1208" mi="0" ci="4" mb="0" cb="0"/><line nr="1209" mi="0" ci="3" mb="0" cb="2"/><line nr="1210" mi="0" ci="2" mb="0" cb="0"/><line nr="1212" mi="0" ci="2" mb="0" cb="0"/><line nr="1213" mi="0" ci="18" mb="0" cb="0"/><line nr="1215" mi="0" ci="4" mb="0" cb="0"/><line nr="1219" mi="0" ci="7" mb="0" cb="4"/><line nr="1220" mi="0" ci="4" mb="0" cb="0"/><line nr="1221" mi="0" ci="5" mb="0" cb="2"/><line nr="1222" mi="0" ci="3" mb="0" cb="0"/><line nr="1224" mi="0" ci="1" mb="0" cb="0"/><line nr="1225" mi="0" ci="7" mb="0" cb="2"/><line nr="1230" mi="0" ci="3" mb="0" cb="0"/><line nr="1231" mi="0" ci="3" mb="0" cb="0"/><line nr="1232" mi="0" ci="2" mb="0" cb="0"/><line nr="1246" mi="0" ci="4" mb="0" cb="0"/><line nr="1247" mi="0" ci="3" mb="0" cb="2"/><line nr="1248" mi="0" ci="2" mb="0" cb="0"/><line nr="1250" mi="0" ci="2" mb="0" cb="0"/><line nr="1251" mi="0" ci="18" mb="0" cb="0"/><line nr="1253" mi="0" ci="4" mb="0" cb="0"/><line nr="1257" mi="0" ci="8" mb="0" cb="4"/><line nr="1258" mi="0" ci="4" mb="0" cb="0"/><line nr="1259" mi="0" ci="5" mb="0" cb="2"/><line nr="1260" mi="0" ci="4" mb="0" cb="0"/><line nr="1262" mi="0" ci="1" mb="0" cb="0"/><line nr="1263" mi="0" ci="4" mb="0" cb="0"/><line nr="1268" mi="0" ci="4" mb="0" cb="0"/><line nr="1269" mi="0" ci="3" mb="0" cb="0"/><line nr="1270" mi="0" ci="2" mb="0" cb="0"/><line nr="1278" mi="0" ci="4" mb="0" cb="0"/><line nr="1279" mi="0" ci="5" mb="0" cb="0"/><line nr="1284" mi="0" ci="4" mb="0" cb="0"/><line nr="1285" mi="0" ci="2" mb="0" cb="0"/><line nr="1286" mi="0" ci="3" mb="0" cb="2"/><line nr="1287" mi="0" ci="3" mb="0" cb="0"/><line nr="1288" mi="0" ci="4" mb="0" cb="2"/><line nr="1289" mi="0" ci="2" mb="0" cb="0"/><line nr="1291" mi="0" ci="1" mb="0" cb="0"/><line nr="1292" mi="0" ci="3" mb="0" cb="0"/><line nr="1304" mi="0" ci="4" mb="0" cb="0"/><line nr="1305" mi="0" ci="3" mb="1" cb="1"/><line nr="1306" mi="2" ci="0" mb="0" cb="0"/><line nr="1308" mi="0" ci="2" mb="0" cb="0"/><line nr="1309" mi="0" ci="18" mb="0" cb="0"/><line nr="1311" mi="0" ci="4" mb="0" cb="0"/><line nr="1312" mi="0" ci="4" mb="0" cb="0"/><line nr="1317" mi="0" ci="10" mb="0" cb="4"/><line nr="1318" mi="0" ci="11" mb="0" cb="0"/><line nr="1320" mi="0" ci="2" mb="0" cb="0"/><line nr="1325" mi="0" ci="4" mb="0" cb="0"/><line nr="1333" mi="0" ci="4" mb="0" cb="0"/><line nr="1334" mi="0" ci="6" mb="0" cb="0"/><line nr="1339" mi="0" ci="3" mb="0" cb="0"/><line nr="1344" mi="0" ci="4" mb="0" cb="0"/><line nr="1345" mi="0" ci="3" mb="0" cb="2"/><line nr="1346" mi="0" ci="2" mb="0" cb="0"/><line nr="1348" mi="0" ci="7" mb="0" cb="0"/><line nr="1349" mi="0" ci="4" mb="0" cb="0"/><line nr="1350" mi="0" ci="15" mb="0" cb="0"/><line nr="1351" mi="0" ci="5" mb="0" cb="0"/><line nr="1353" mi="0" ci="9" mb="0" cb="0"/><line nr="1359" mi="0" ci="5" mb="0" cb="0"/><line nr="1364" mi="0" ci="2" mb="0" cb="0"/><line nr="1369" mi="0" ci="3" mb="0" cb="2"/><line nr="1370" mi="0" ci="5" mb="0" cb="0"/><line nr="1372" mi="0" ci="3" mb="0" cb="0"/><line nr="1377" mi="0" ci="9" mb="0" cb="2"/><line nr="1382" mi="0" ci="3" mb="0" cb="2"/><line nr="1383" mi="0" ci="4" mb="0" cb="0"/><line nr="1385" mi="0" ci="4" mb="0" cb="0"/><line nr="1391" mi="0" ci="9" mb="0" cb="2"/><line nr="1396" mi="0" ci="7" mb="0" cb="2"/><line nr="1401" mi="0" ci="2" mb="0" cb="0"/><line nr="1406" mi="0" ci="2" mb="0" cb="0"/><line nr="1411" mi="0" ci="14" mb="0" cb="0"/><line nr="1423" mi="0" ci="4" mb="0" cb="0"/><line nr="1424" mi="0" ci="3" mb="0" cb="2"/><line nr="1425" mi="0" ci="2" mb="0" cb="0"/><line nr="1427" mi="0" ci="2" mb="0" cb="0"/><line nr="1428" mi="0" ci="19" mb="0" cb="0"/><line nr="1432" mi="0" ci="4" mb="0" cb="0"/><line nr="1437" mi="0" ci="7" mb="0" cb="0"/><line nr="1445" mi="0" ci="3" mb="0" cb="0"/><line nr="1450" mi="0" ci="4" mb="0" cb="0"/><line nr="1451" mi="0" ci="3" mb="0" cb="2"/><line nr="1452" mi="0" ci="4" mb="0" cb="0"/><line nr="1454" mi="0" ci="3" mb="0" cb="0"/><line nr="1455" mi="0" ci="5" mb="0" cb="0"/><line nr="1456" mi="0" ci="6" mb="0" cb="0"/><line nr="1457" mi="0" ci="4" mb="0" cb="0"/><line nr="1463" mi="0" ci="4" mb="0" cb="0"/><line nr="1464" mi="0" ci="3" mb="0" cb="2"/><line nr="1465" mi="0" ci="2" mb="0" cb="0"/><line nr="1467" mi="0" ci="2" mb="0" cb="0"/><line nr="1468" mi="0" ci="19" mb="0" cb="0"/><line nr="1471" mi="0" ci="4" mb="0" cb="0"/><line nr="1476" mi="0" ci="4" mb="0" cb="0"/><line nr="1477" mi="0" ci="4" mb="0" cb="0"/><line nr="1478" mi="0" ci="2" mb="0" cb="0"/><line nr="1486" mi="0" ci="4" mb="0" cb="0"/><line nr="1487" mi="0" ci="3" mb="0" cb="2"/><line nr="1488" mi="0" ci="5" mb="0" cb="0"/><line nr="1490" mi="0" ci="3" mb="0" cb="0"/><line nr="1491" mi="0" ci="7" mb="0" cb="0"/><line nr="1497" mi="0" ci="4" mb="0" cb="0"/><line nr="1498" mi="0" ci="3" mb="0" cb="2"/><line nr="1499" mi="0" ci="5" mb="0" cb="0"/><line nr="1501" mi="0" ci="4" mb="0" cb="0"/><line nr="1502" mi="0" ci="13" mb="0" cb="0"/><line nr="1508" mi="0" ci="3" mb="0" cb="2"/><line nr="1509" mi="0" ci="2" mb="0" cb="0"/><line nr="1511" mi="0" ci="2" mb="0" cb="0"/><line nr="1512" mi="0" ci="22" mb="0" cb="0"/><line nr="1514" mi="0" ci="4" mb="0" cb="0"/><line nr="1518" mi="0" ci="4" mb="0" cb="0"/><line nr="1523" mi="0" ci="4" mb="0" cb="0"/><line nr="1524" mi="0" ci="8" mb="0" cb="4"/><line nr="1525" mi="0" ci="2" mb="0" cb="0"/><line nr="1527" mi="0" ci="3" mb="0" cb="0"/><line nr="1528" mi="0" ci="3" mb="0" cb="0"/><line nr="1537" mi="0" ci="3" mb="0" cb="2"/><line nr="1538" mi="0" ci="2" mb="0" cb="0"/><line nr="1540" mi="0" ci="2" mb="0" cb="0"/><line nr="1541" mi="0" ci="23" mb="0" cb="0"/><line nr="1545" mi="0" ci="4" mb="0" cb="0"/><line nr="1550" mi="0" ci="4" mb="0" cb="0"/><line nr="1551" mi="0" ci="5" mb="0" cb="2"/><line nr="1552" mi="0" ci="3" mb="0" cb="0"/><line nr="1554" mi="0" ci="2" mb="0" cb="0"/><line nr="1564" mi="0" ci="4" mb="0" cb="0"/><line nr="1566" mi="0" ci="14" mb="0" cb="2"/><line nr="1571" mi="0" ci="5" mb="0" cb="0"/><line nr="1576" mi="0" ci="4" mb="0" cb="0"/><line nr="1577" mi="0" ci="3" mb="0" cb="2"/><line nr="1578" mi="0" ci="3" mb="0" cb="0"/><line nr="1580" mi="0" ci="2" mb="0" cb="0"/><line nr="1581" mi="0" ci="22" mb="0" cb="0"/><line nr="1583" mi="0" ci="3" mb="0" cb="0"/><line nr="1584" mi="0" ci="5" mb="0" cb="0"/><line nr="1588" mi="0" ci="11" mb="0" cb="4"/><line nr="1593" mi="0" ci="3" mb="0" cb="2"/><line nr="1594" mi="0" ci="3" mb="0" cb="0"/><line nr="1595" mi="0" ci="3" mb="0" cb="0"/><line nr="1597" mi="0" ci="10" mb="0" cb="0"/><line nr="1598" mi="0" ci="3" mb="0" cb="0"/><line nr="1608" mi="0" ci="4" mb="0" cb="0"/><line nr="1609" mi="0" ci="3" mb="0" cb="2"/><line nr="1610" mi="0" ci="3" mb="0" cb="0"/><line nr="1612" mi="0" ci="9" mb="0" cb="0"/><line nr="1618" mi="0" ci="5" mb="0" cb="0"/><line nr="1623" mi="0" ci="4" mb="0" cb="4"/><line nr="1624" mi="0" ci="18" mb="0" cb="0"/><line nr="1626" mi="0" ci="3" mb="0" cb="2"/><line nr="1627" mi="0" ci="2" mb="0" cb="0"/><line nr="1629" mi="0" ci="3" mb="0" cb="0"/><line nr="1630" mi="0" ci="22" mb="0" cb="0"/><line nr="1631" mi="0" ci="4" mb="0" cb="0"/><line nr="1632" mi="0" ci="4" mb="0" cb="0"/><line nr="1636" mi="0" ci="7" mb="0" cb="4"/><line nr="1637" mi="0" ci="6" mb="0" cb="0"/><line nr="1638" mi="0" ci="6" mb="0" cb="0"/><line nr="1639" mi="0" ci="14" mb="0" cb="2"/><line nr="1640" mi="0" ci="1" mb="0" cb="0"/><line nr="1641" mi="0" ci="7" mb="0" cb="2"/><line nr="1646" mi="0" ci="3" mb="0" cb="0"/><line nr="1647" mi="0" ci="3" mb="0" cb="0"/><line nr="1648" mi="0" ci="2" mb="0" cb="0"/><line nr="1656" mi="0" ci="4" mb="0" cb="0"/><line nr="1657" mi="0" ci="3" mb="0" cb="2"/><line nr="1658" mi="0" ci="4" mb="0" cb="0"/><line nr="1660" mi="0" ci="3" mb="0" cb="0"/><line nr="1661" mi="0" ci="10" mb="0" cb="0"/><line nr="1668" mi="0" ci="3" mb="0" cb="0"/><line nr="1669" mi="0" ci="8" mb="0" cb="0"/><line nr="1675" mi="0" ci="2" mb="0" cb="0"/><line nr="1680" mi="0" ci="3" mb="0" cb="2"/><line nr="1681" mi="0" ci="4" mb="0" cb="0"/><line nr="1683" mi="0" ci="3" mb="0" cb="0"/><line nr="1684" mi="0" ci="2" mb="0" cb="0"/><line nr="1690" mi="0" ci="3" mb="0" cb="2"/><line nr="1691" mi="0" ci="3" mb="0" cb="0"/><line nr="1692" mi="0" ci="3" mb="0" cb="0"/><line nr="1694" mi="0" ci="2" mb="0" cb="0"/><line nr="1706" mi="0" ci="5" mb="0" cb="4"/><line nr="1707" mi="0" ci="2" mb="0" cb="0"/><line nr="1709" mi="0" ci="2" mb="0" cb="0"/><line nr="1710" mi="0" ci="18" mb="0" cb="0"/><line nr="1712" mi="0" ci="5" mb="0" cb="0"/><line nr="1716" mi="0" ci="11" mb="0" cb="4"/><line nr="1721" mi="0" ci="6" mb="0" cb="0"/><line nr="1722" mi="0" ci="4" mb="0" cb="0"/><line nr="1730" mi="0" ci="2" mb="0" cb="2"/><line nr="1731" mi="0" ci="2" mb="0" cb="0"/><line nr="1733" mi="0" ci="2" mb="0" cb="0"/><line nr="1734" mi="0" ci="18" mb="0" cb="0"/><line nr="1735" mi="0" ci="4" mb="0" cb="0"/><line nr="1739" mi="0" ci="4" mb="0" cb="2"/><line nr="1740" mi="0" ci="8" mb="0" cb="0"/><line nr="1741" mi="0" ci="6" mb="0" cb="2"/><line nr="1742" mi="0" ci="8" mb="0" cb="0"/><line nr="1745" mi="0" ci="8" mb="0" cb="2"/><line nr="1750" mi="0" ci="4" mb="0" cb="0"/><line nr="1751" mi="0" ci="5" mb="0" cb="0"/><line nr="1752" mi="0" ci="3" mb="0" cb="0"/><line nr="1760" mi="0" ci="4" mb="0" cb="0"/><line nr="1761" mi="0" ci="5" mb="0" cb="0"/><line nr="1766" mi="0" ci="4" mb="0" cb="0"/><line nr="1767" mi="0" ci="3" mb="0" cb="2"/><line nr="1768" mi="0" ci="2" mb="0" cb="0"/><line nr="1770" mi="0" ci="2" mb="0" cb="0"/><line nr="1771" mi="0" ci="18" mb="0" cb="0"/><line nr="1773" mi="0" ci="3" mb="0" cb="0"/><line nr="1774" mi="0" ci="4" mb="0" cb="0"/><line nr="1778" mi="0" ci="10" mb="0" cb="6"/><line nr="1779" mi="0" ci="4" mb="0" cb="0"/><line nr="1780" mi="0" ci="5" mb="0" cb="2"/><line nr="1781" mi="0" ci="4" mb="0" cb="0"/><line nr="1783" mi="0" ci="3" mb="0" cb="0"/><line nr="1785" mi="0" ci="1" mb="0" cb="0"/><line nr="1786" mi="0" ci="7" mb="0" cb="2"/><line nr="1791" mi="0" ci="3" mb="0" cb="0"/><line nr="1792" mi="0" ci="3" mb="0" cb="0"/><line nr="1793" mi="0" ci="2" mb="0" cb="0"/><line nr="1802" mi="3" ci="0" mb="2" cb="0"/><line nr="1803" mi="3" ci="0" mb="0" cb="0"/><line nr="1805" mi="4" ci="0" mb="0" cb="0"/><line nr="1817" mi="0" ci="2" mb="0" cb="0"/><line nr="1818" mi="0" ci="3" mb="0" cb="0"/><line nr="1819" mi="0" ci="3" mb="0" cb="0"/><line nr="1820" mi="0" ci="1" mb="0" cb="0"/><line nr="1824" mi="0" ci="8" mb="0" cb="4"/><line nr="1825" mi="0" ci="7" mb="0" cb="0"/><line nr="1827" mi="0" ci="4" mb="0" cb="0"/><line nr="1832" mi="0" ci="4" mb="0" cb="0"/><line nr="1841" mi="0" ci="3" mb="0" cb="0"/><line nr="1843" mi="0" ci="2" mb="0" cb="0"/><line nr="1844" mi="0" ci="3" mb="0" cb="0"/><line nr="1845" mi="0" ci="3" mb="0" cb="0"/><line nr="1846" mi="0" ci="3" mb="0" cb="0"/><line nr="1847" mi="0" ci="1" mb="0" cb="0"/><line nr="1851" mi="0" ci="7" mb="0" cb="4"/><line nr="1852" mi="0" ci="4" mb="0" cb="0"/><line nr="1853" mi="0" ci="5" mb="0" cb="0"/><line nr="1854" mi="0" ci="5" mb="0" cb="2"/><line nr="1855" mi="0" ci="6" mb="0" cb="0"/><line nr="1856" mi="0" ci="3" mb="0" cb="0"/><line nr="1858" mi="0" ci="1" mb="0" cb="0"/><line nr="1859" mi="0" ci="7" mb="0" cb="2"/><line nr="1864" mi="0" ci="3" mb="0" cb="0"/><line nr="1865" mi="0" ci="3" mb="0" cb="0"/><line nr="1866" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="14" covered="2940"/><counter type="BRANCH" missed="3" covered="291"/><counter type="LINE" missed="5" covered="530"/><counter type="COMPLEXITY" missed="4" covered="372"/><counter type="METHOD" missed="2" covered="227"/><counter type="CLASS" missed="0" covered="42"/></sourcefile><counter type="INSTRUCTION" missed="655" covered="30835"/><counter type="BRANCH" missed="76" covered="2809"/><counter type="LINE" missed="113" covered="5874"/><counter type="COMPLEXITY" missed="134" covered="3548"/><counter type="METHOD" missed="63" covered="2175"/><counter type="CLASS" missed="1" covered="123"/></package><package name="javaslang"><class name="javaslang/ValueModule"><method name="toTraversable" desc="(Ljavaslang/Value;Ljavaslang/collection/Traversable;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/collection/Traversable;" line="993"><counter type="INSTRUCTION" missed="6" covered="13"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaCollection" desc="(Ljavaslang/Value;Ljava/util/Collection;)Ljava/util/Collection;" line="1003"><counter type="INSTRUCTION" missed="6" covered="15"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="28"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="8"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function3$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function3;)V" line="200"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="205"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="210"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="215"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/λ"><method name="isMemoized" desc="()Z" line="81"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isApplicableTo" desc="([Ljava/lang/Object;)Z" line="104"><counter type="INSTRUCTION" missed="2" covered="41"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isApplicableToTypes" desc="([Ljava/lang/Class;)Z" line="128"><counter type="INSTRUCTION" missed="2" covered="50"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="94"/><counter type="BRANCH" missed="4" covered="14"/><counter type="LINE" missed="2" covered="17"/><counter type="COMPLEXITY" missed="4" covered="8"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/λ$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/λ;)V" line="162"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="returnType" desc="()Ljava/lang/Class;" line="169"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterTypes" desc="()[Ljava/lang/Class;" line="173"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="178"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="192"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="200"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hashCode$1" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;" line="194"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hashCode$0" desc="(Ljava/lang/Class;)Ljava/lang/Integer;" line="193"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="108"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="2" covered="11"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function1$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function1;)V" line="195"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="200"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction0$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction0;)V" line="150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Lazy"><method name="of" desc="(Ljava/util/function/Supplier;)Ljavaslang/Lazy;" line="59"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sequence" desc="(Ljava/lang/Iterable;)Ljavaslang/Lazy;" line="77"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="undefined" desc="()Ljavaslang/Lazy;" line="90"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="val" desc="(Ljava/util/function/Supplier;Ljava/lang/Class;)Ljava/lang/Object;" line="104"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/Lazy;" line="124"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/Lazy;" line="134"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/Lazy;" line="141"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="176"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/Lazy;" line="181"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="186"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/Lazy;" line="191"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="199"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="211"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/Lazy;" line="218"><counter type="INSTRUCTION" missed="30" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="7" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unit$3" desc="(Ljava/util/Iterator;)Ljava/lang/Object;" line="226"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$2" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="181"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$val$1" desc="(Ljavaslang/Lazy;Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;" line="110"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$sequence$0" desc="(Ljava/lang/Iterable;)Ljavaslang/collection/Seq;" line="78"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="36" covered="156"/><counter type="BRANCH" missed="7" covered="15"/><counter type="LINE" missed="8" covered="34"/><counter type="COMPLEXITY" missed="6" covered="23"/><counter type="METHOD" missed="2" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction2$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction2;)V" line="182"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="187"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="192"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction7$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction7;)V" line="277"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="282"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="287"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="292"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="297"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="302"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType6" desc="()Ljava/lang/Class;" line="307"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType7" desc="()Ljava/lang/Class;" line="312"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction6$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction6;)V" line="256"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="261"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="266"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="271"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="276"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="281"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType6" desc="()Ljava/lang/Class;" line="286"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function5$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function5;)V" line="237"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="242"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="247"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="252"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="257"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="262"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function2$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function2;)V" line="184"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="189"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="194"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction1$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction1;)V" line="194"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="199"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction8"><method name="of" desc="(Ljavaslang/CheckedFunction8;)Ljavaslang/CheckedFunction8;" line="83"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction8;)Ljavaslang/Function8;" line="103"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction7;" line="130"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction6;" line="142"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction5;" line="155"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction4;" line="169"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction3;" line="184"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction2;" line="200"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="217"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="222"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="232"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction8;" line="237"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction8;" line="242"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction8;" line="268"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction8$Type;" line="274"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$ee731848$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="269"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$4a89ef37$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="250"><counter type="INSTRUCTION" missed="5" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple8;)Ljava/lang/Object;" line="251"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple8;)Ljava/lang/Object;" line="251"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$a8c0275c$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="237"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$77b40acf$1" desc="(Ljavaslang/Tuple8;)Ljava/lang/Object;" line="232"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$b138ee45$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$cd389a8f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$ddfd9e24$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$74991577$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$23b26288$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$196ee757$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="227"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$c17205e4$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="227"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$6f4f6083$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="217"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$b92880e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="200"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$4b205c75$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="184"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$61d7b7b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="169"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$5f77f3d7$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="155"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$c720ead2$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="142"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$6d2f6a9$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$d4eab6bb$1" desc="(Ljavaslang/CheckedFunction8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="103"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="103"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="190" covered="154"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="26"/><counter type="COMPLEXITY" missed="19" covered="21"/><counter type="METHOD" missed="19" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction7"><method name="of" desc="(Ljavaslang/CheckedFunction7;)Ljavaslang/CheckedFunction7;" line="81"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction7;)Ljavaslang/Function7;" line="100"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction6;" line="126"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction5;" line="138"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction4;" line="151"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction3;" line="165"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction2;" line="180"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="196"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="201"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="211"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction7;" line="216"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction7;" line="221"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction7;" line="247"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction7$Type;" line="253"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$f45e165$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="248"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$c1e5963e$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="229"><counter type="INSTRUCTION" missed="5" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple7;)Ljava/lang/Object;" line="230"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple7;)Ljava/lang/Object;" line="230"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$5e13e19f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="216"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$339a6331$1" desc="(Ljavaslang/Tuple7;)Ljava/lang/Object;" line="211"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$30da1cb9$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$cd389a8f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$ddfd9e24$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$74991577$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$23b26288$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="206"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$196ee757$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="206"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$170ca951$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="196"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$22329cb8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="180"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$da5f15fb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="165"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$ae6f6f1a$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="151"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$c5e18215$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="138"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$3853a8ec$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="126"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$ee84c078$1" desc="(Ljavaslang/CheckedFunction7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="100"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="100"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="158" covered="141"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="25"/><counter type="COMPLEXITY" missed="17" covered="20"/><counter type="METHOD" missed="17" covered="19"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function8"><method name="of" desc="(Ljavaslang/Function8;)Ljavaslang/Function8;" line="84"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function8;)Ljavaslang/Function8;" line="104"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function7;" line="131"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function6;" line="143"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function5;" line="156"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function4;" line="170"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function3;" line="185"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function2;" line="201"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="218"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="223"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="233"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function8;" line="238"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function8;" line="243"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function8;" line="269"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function8$Type;" line="275"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$84effd00$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="270"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$507ce370$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="251"><counter type="INSTRUCTION" missed="5" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$324bbb9a$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="238"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$206b5675$1" desc="(Ljavaslang/Tuple8;)Ljava/lang/Object;" line="233"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$34186348$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d9702346$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1b187fdb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1a2e502e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$e258f63f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1abdd40e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="228"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$a8004b9b$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="228"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$c1a83ad$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="218"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$10cc3a9e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="201"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$50d8d70d$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="185"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$bd4eb6fa$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="170"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$46ca3865$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="156"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$db75b94e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="143"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$650997b5$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="131"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$2e93a663$1" desc="(Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="104"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function8;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="104"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="130" covered="207"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="26"/><counter type="COMPLEXITY" missed="11" covered="27"/><counter type="METHOD" missed="11" covered="26"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction0"><method name="of" desc="(Ljavaslang/CheckedFunction0;)Ljavaslang/CheckedFunction0;" line="65"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction0;)Ljavaslang/Function0;" line="77"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="90"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction0;" line="95"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="100"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction0;" line="105"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction0;" line="110"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction0;" line="127"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction0$Type;" line="133"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$53ae0d94$1" desc="(Ljavaslang/CheckedFunction1;)Ljava/lang/Object;" line="128"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$1" desc="()Ljava/lang/Object;" line="113"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$tupled$d82f6a39$1" desc="(Ljavaslang/Tuple0;)Ljava/lang/Object;" line="100"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$90420913$1" desc="(Ljavaslang/CheckedFunction0;)Ljavaslang/control/Option;" line="77"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction0;)Ljava/lang/Object;" line="77"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="48"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="4" covered="11"/><counter type="METHOD" missed="4" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction2"><method name="of" desc="(Ljavaslang/CheckedFunction2;)Ljavaslang/CheckedFunction2;" line="71"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction2;)Ljavaslang/Function2;" line="85"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="106"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="111"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="116"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="121"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction2;" line="126"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction2;" line="131"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction2;" line="157"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction2$Type;" line="163"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$fe6aee07$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$760657ce$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="139"><counter type="INSTRUCTION" missed="5" covered="17"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple2;)Ljava/lang/Object;" line="140"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple2;)Ljava/lang/Object;" line="140"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$c4ff67bd$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="126"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$8f193aaa$1" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="121"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$537704c$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="116"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="116"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$883d9a8a$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="106"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$66aec683$1" desc="(Ljavaslang/CheckedFunction2;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="85"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction2;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="85"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="43" covered="91"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="7" covered="15"/><counter type="METHOD" missed="7" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction1"><method name="of" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction1;" line="69"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/Function1;" line="82"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Ljavaslang/CheckedFunction1;" line="92"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="106"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="111"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="116"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction1;" line="121"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction1;" line="126"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction1;" line="156"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compose" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction1;" line="170"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction1$Type;" line="176"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$compose$fd1ac11a$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;)Ljava/lang/Object;" line="171"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$andThen$f83dc4de$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;)Ljava/lang/Object;" line="157"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$8c340495$1" desc="(Ljavaslang/Lazy;Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;" line="133"><counter type="INSTRUCTION" missed="5" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$3" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="138"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="138"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$memoized$1" desc="()Ljava/lang/Object;" line="129"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$tupled$dedd6d92$1" desc="(Ljavaslang/Tuple1;)Ljava/lang/Object;" line="116"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$4fca70d1$1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="92"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$f951c81a$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;)Ljavaslang/control/Option;" line="82"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;)Ljava/lang/Object;" line="82"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="32" covered="104"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="5" covered="18"/><counter type="METHOD" missed="5" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction4"><method name="of" desc="(Ljavaslang/CheckedFunction4;)Ljavaslang/CheckedFunction4;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction4;)Ljavaslang/Function4;" line="91"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction3;" line="114"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction2;" line="126"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="139"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="144"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="149"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="154"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction4;" line="159"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction4;" line="164"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction4;" line="190"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction4$Type;" line="196"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$898437f6$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="191"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$a11665e5$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="172"><counter type="INSTRUCTION" missed="5" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple4;)Ljava/lang/Object;" line="173"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple4;)Ljava/lang/Object;" line="173"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$e00c33ee$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="159"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$20bcc95d$1" desc="(Ljavaslang/Tuple4;)Ljava/lang/Object;" line="154"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$a704e99b$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="149"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="149"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$cd389a8f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="149"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$ddfd9e24$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="149"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$fad11569$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="139"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$79c2e264$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="126"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$8a2cc03b$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="114"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$aa727ef$1" desc="(Ljavaslang/CheckedFunction4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="91"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="91"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="80" covered="108"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="11" covered="17"/><counter type="METHOD" missed="11" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction3$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction3;)V" line="199"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="204"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="209"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="214"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction3"><method name="of" desc="(Ljavaslang/CheckedFunction3;)Ljavaslang/CheckedFunction3;" line="73"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction3;)Ljavaslang/Function3;" line="88"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction2;" line="110"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="122"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="127"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="132"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="137"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction3;" line="142"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction3;" line="147"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction3;" line="173"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction3$Type;" line="179"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$16cb418f$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="174"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$36dc87f8$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="155"><counter type="INSTRUCTION" missed="5" covered="18"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple3;)Ljava/lang/Object;" line="156"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple3;)Ljava/lang/Object;" line="156"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$bfc16935$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="142"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$6c8966c3$1" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="137"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$76b10b93$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="132"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="132"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$cd389a8f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="132"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$3831a7ab$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="122"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$110ce482$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="110"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$fe79eae8$1" desc="(Ljavaslang/CheckedFunction3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="88"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="88"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="60" covered="99"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="9" covered="16"/><counter type="METHOD" missed="9" covered="15"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction6"><method name="of" desc="(Ljavaslang/CheckedFunction6;)Ljavaslang/CheckedFunction6;" line="79"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction6;)Ljavaslang/Function6;" line="97"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction5;" line="122"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction4;" line="134"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction3;" line="147"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction2;" line="161"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="176"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="181"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="186"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="191"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction6;" line="196"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction6;" line="201"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction6;" line="227"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction6$Type;" line="233"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$5124af61$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="228"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$4f835308$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="209"><counter type="INSTRUCTION" missed="5" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple6;)Ljava/lang/Object;" line="210"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple6;)Ljava/lang/Object;" line="210"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$a427a123$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="196"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$9bd1d014$1" desc="(Ljavaslang/Tuple6;)Ljava/lang/Object;" line="191"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$5948aaee$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="186"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="186"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$cd389a8f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="186"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$ddfd9e24$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="186"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$74991577$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="186"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$23b26288$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="186"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$9f0988bc$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="176"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$791530ff$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="161"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$e618381e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="147"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$f1ee7819$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="134"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$3dd44af0$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="122"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$2a722557$1" desc="(Ljavaslang/CheckedFunction6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="97"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="97"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="129" covered="129"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="15" covered="19"/><counter type="METHOD" missed="15" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction5"><method name="of" desc="(Ljavaslang/CheckedFunction5;)Ljavaslang/CheckedFunction5;" line="77"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/CheckedFunction5;)Ljavaslang/Function5;" line="94"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction4;" line="118"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction3;" line="130"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction2;" line="143"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="157"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="162"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/CheckedFunction1;" line="167"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/CheckedFunction1;" line="172"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/CheckedFunction5;" line="177"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/CheckedFunction5;" line="182"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/CheckedFunction5;" line="208"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/CheckedFunction5$Type;" line="214"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$586b09bc$1" desc="(Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="209"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$4aa6ab95$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/CheckedFunction1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="190"><counter type="INSTRUCTION" missed="5" covered="20"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$2" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple5;)Ljava/lang/Object;" line="191"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljavaslang/CheckedFunction1;Ljavaslang/Tuple5;)Ljava/lang/Object;" line="191"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$1bb076e8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="177"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$9cea79f8$1" desc="(Ljavaslang/Tuple5;)Ljava/lang/Object;" line="172"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$f98941a4$1" desc="(Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="167"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$a920a8b8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="167"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$cd389a8f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="167"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$ddfd9e24$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/CheckedFunction1;" line="167"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$74991577$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="167"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$d5985144$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="157"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$59e11763$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="143"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$2ac7155e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$5324a535$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="118"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$b0b895b2$1" desc="(Ljavaslang/CheckedFunction5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="94"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/CheckedFunction5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="94"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="103" covered="118"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="13" covered="18"/><counter type="METHOD" missed="13" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple"><method name="empty" desc="()Ljavaslang/Tuple0;" line="44"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/Tuple1;" line="55"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple2;" line="68"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple3;" line="83"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple4;" line="100"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple5;" line="119"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple6;" line="140"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple7;" line="163"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Tuple8;" line="188"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="70"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function1"><method name="of" desc="(Ljavaslang/Function1;)Ljavaslang/Function1;" line="70"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function1;)Ljavaslang/Function1;" line="83"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Ljavaslang/Function1;" line="93"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="107"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="112"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="117"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function1;" line="122"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function1;" line="127"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function1;" line="157"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compose" desc="(Ljava/util/function/Function;)Ljavaslang/Function1;" line="171"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function1$Type;" line="177"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$compose$7c2c8dc0$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="172"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$andThen$f79ae404$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$caf7397d$1" desc="(Ljavaslang/Lazy;Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;" line="134"><counter type="INSTRUCTION" missed="5" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$memoized$1" desc="()Ljava/lang/Object;" line="130"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$tupled$65a0f592$1" desc="(Ljavaslang/Tuple1;)Ljava/lang/Object;" line="117"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$99be8eb5$1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="93"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lift$b3a36e54$1" desc="(Ljavaslang/Function1;Ljava/lang/Object;)Ljavaslang/control/Option;" line="83"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function1;Ljava/lang/Object;)Ljava/lang/Object;" line="83"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="32" covered="89"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="5" covered="16"/><counter type="METHOD" missed="5" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function0"><method name="of" desc="(Ljavaslang/Function0;)Ljavaslang/Function0;" line="67"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function0;)Ljavaslang/Function0;" line="79"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="97"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="102"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function0;" line="107"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="112"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function0;" line="117"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function0;" line="122"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function0;" line="139"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function0$Type;" line="145"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$73e9145c$1" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="140"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$5ce19e0b$1" desc="(Ljavaslang/Tuple0;)Ljava/lang/Object;" line="112"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$ee2489ab$1" desc="(Ljavaslang/Function0;)Ljavaslang/control/Option;" line="79"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function0;)Ljava/lang/Object;" line="79"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="46"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="4" covered="11"/><counter type="METHOD" missed="4" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function3"><method name="of" desc="(Ljavaslang/Function3;)Ljavaslang/Function3;" line="74"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function3;)Ljavaslang/Function3;" line="89"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function2;" line="111"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="123"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="128"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="133"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="138"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function3;" line="143"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function3;" line="148"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function3;" line="174"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function3$Type;" line="180"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$6461ab31$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="175"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$cc475b9f$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="156"><counter type="INSTRUCTION" missed="5" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$b6c6d08b$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="143"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$3fce4281$1" desc="(Ljavaslang/Tuple3;)Ljava/lang/Object;" line="138"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$9917d683$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="133"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="133"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d9702346$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="133"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$3b8dfe3f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="123"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$ae6e08a6$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="111"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$8ccf8ae6$1" desc="(Ljavaslang/Function3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="89"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function3;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="89"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="45" covered="107"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="6" covered="17"/><counter type="METHOD" missed="6" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function2"><method name="of" desc="(Ljavaslang/Function2;)Ljavaslang/Function2;" line="73"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function2;)Ljavaslang/Function2;" line="87"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="108"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="113"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="118"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="123"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function2;" line="128"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function2;" line="133"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function2;" line="159"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function2$Type;" line="165"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$e51fb8cb$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="160"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$51ca9a25$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="141"><counter type="INSTRUCTION" missed="5" covered="20"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$74ee6f25$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="128"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$4e02b3fa$1" desc="(Ljavaslang/Tuple2;)Ljava/lang/Object;" line="123"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$fab324b9$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="118"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="118"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$9b0e47c0$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="108"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$9f9e45f$1" desc="(Ljavaslang/Function2;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="87"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function2;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="87"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="34" covered="93"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="5" covered="15"/><counter type="METHOD" missed="5" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function5"><method name="of" desc="(Ljavaslang/Function5;)Ljavaslang/Function5;" line="78"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function5;)Ljavaslang/Function5;" line="95"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function4;" line="119"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function3;" line="131"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function2;" line="144"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="158"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="163"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="168"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="173"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function5;" line="178"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function5;" line="183"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function5;" line="209"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function5$Type;" line="215"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$d9c40ada$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="210"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$8869d176$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="191"><counter type="INSTRUCTION" missed="5" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$d4d30df4$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="178"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$a9f4f1ec$1" desc="(Ljavaslang/Tuple5;)Ljava/lang/Object;" line="173"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$162b1c68$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="168"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="168"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d9702346$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="168"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1b187fdb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="168"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1a2e502e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="168"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$f2f54d54$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$41a115bf$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="144"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$b3da8$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="131"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$466c230f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="119"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$77612a74$1" desc="(Ljavaslang/Function5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="95"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function5;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="95"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="73" covered="141"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="8" covered="21"/><counter type="METHOD" missed="8" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function4$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function4;)V" line="218"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="223"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="228"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="233"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="238"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function4"><method name="of" desc="(Ljavaslang/Function4;)Ljavaslang/Function4;" line="76"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function4;)Ljavaslang/Function4;" line="92"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function3;" line="115"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function2;" line="127"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="140"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="145"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="150"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="155"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function4;" line="160"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function4;" line="165"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function4;" line="191"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function4$Type;" line="197"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$cbaa93b6$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="192"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$10520eba$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="173"><counter type="INSTRUCTION" missed="5" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$6a5b9fd0$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="160"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$df5039a7$1" desc="(Ljavaslang/Tuple4;)Ljava/lang/Object;" line="155"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$d62e823e$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="150"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d9702346$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="150"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1b187fdb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="150"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$f0ad7b9b$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="140"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$a24f4e84$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="127"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$961ffeeb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="115"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$e4fcd20f$1" desc="(Ljavaslang/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="92"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function4;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="92"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="58" covered="123"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="7" covered="19"/><counter type="METHOD" missed="7" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function7"><method name="of" desc="(Ljavaslang/Function7;)Ljavaslang/Function7;" line="82"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function7;)Ljavaslang/Function7;" line="101"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function6;" line="127"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function5;" line="139"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function4;" line="152"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function3;" line="166"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function2;" line="181"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="197"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="202"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="212"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function7;" line="217"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function7;" line="222"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function7;" line="248"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function7$Type;" line="254"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$dccdc6ff$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="249"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$5a29bdd1$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="230"><counter type="INSTRUCTION" missed="5" covered="25"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$baeecad9$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="217"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$b6c7d3$1" desc="(Ljavaslang/Tuple7;)Ljava/lang/Object;" line="212"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$13651c4d$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d9702346$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1b187fdb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1a2e502e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$e258f63f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="207"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1abdd40e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="207"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$356ce3dd$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="197"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$915b1e4c$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="181"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$5c1dbc39$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="166"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$e6d11ba4$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="152"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$181f9a8d$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="139"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$6a4196f4$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="127"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$11b95cfe$1" desc="(Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="101"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function7;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="101"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="109" covered="183"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="25"/><counter type="COMPLEXITY" missed="10" covered="25"/><counter type="METHOD" missed="10" covered="24"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function6"><method name="of" desc="(Ljavaslang/Function6;)Ljavaslang/Function6;" line="80"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lift" desc="(Ljavaslang/Function6;)Ljavaslang/Function6;" line="98"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljavaslang/Function5;" line="123"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function4;" line="135"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function3;" line="148"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function2;" line="162"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="177"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="182"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="curried" desc="()Ljavaslang/Function1;" line="187"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="tupled" desc="()Ljavaslang/Function1;" line="192"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reversed" desc="()Ljavaslang/Function6;" line="197"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="memoized" desc="()Ljavaslang/Function6;" line="202"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljava/util/function/Function;)Ljavaslang/Function6;" line="228"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Ljavaslang/Function6$Type;" line="234"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$e017691d$1" desc="(Ljava/util/function/Function;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="229"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$de6381d3$1" desc="(Ljava/lang/Object;Ljava/util/Map;Ljavaslang/Function1;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="210"><counter type="INSTRUCTION" missed="5" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$reversed$68028bf7$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="197"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$d06883d0$1" desc="(Ljavaslang/Tuple6;)Ljava/lang/Object;" line="192"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$curried$a24d01c3$1" desc="(Ljava/lang/Object;)Ljavaslang/Function1;" line="187"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$430bd86f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="187"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$d9702346$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="187"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1b187fdb$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="187"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1a2e502e$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/Function1;" line="187"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$e258f63f$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="187"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$3883c0ea$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="177"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$a4272bd7$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="162"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$4957842$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="148"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$37f9042b$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="135"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$apply$480a2d92$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="123"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lift$2d3662bb$1" desc="(Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljavaslang/control/Option;" line="98"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljavaslang/Function6;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="98"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="90" covered="161"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="9" covered="23"/><counter type="METHOD" missed="9" covered="22"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function6$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function6;)V" line="257"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="262"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="267"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="272"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="277"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="282"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType6" desc="()Ljava/lang/Class;" line="287"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function0$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function0;)V" line="162"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple0"><method name="&lt;init&gt;" desc="()V" line="40"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="instance" desc="()Ljavaslang/Tuple0;" line="49"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="()Ljava/util/Comparator;" line="53"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="58"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple0;)I" line="63"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="75"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="81"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="88"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="93"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="98"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="110"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$static$80560302$1" desc="(Ljavaslang/Tuple0;Ljavaslang/Tuple0;)I" line="37"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="32"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="14"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple1"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="40"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;)Ljava/util/Comparator;" line="45"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple1;Ljavaslang/Tuple1;)I" line="58"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="72"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple1;)I" line="77"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="86"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/Tuple1;" line="90"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="102"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="108"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="115"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="128"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="133"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$3f9c5c9f$1" desc="(Ljava/util/Comparator;Ljavaslang/Tuple1;Ljavaslang/Tuple1;)I" line="46"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="106"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="29"/><counter type="COMPLEXITY" missed="0" covered="17"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple2"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="54"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple2;Ljavaslang/Tuple2;)I" line="72"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="91"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple2;)I" line="96"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="105"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="114"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/BiFunction;)Ljavaslang/Tuple2;" line="118"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple2;" line="122"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="134"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="140"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="147"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="165"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$3cda90f0$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple2;Ljavaslang/Tuple2;)I" line="55"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="177"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="23"/><counter type="METHOD" missed="0" covered="15"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple3"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V" line="54"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="61"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple3;Ljavaslang/Tuple3;)I" line="84"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="108"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple3;)I" line="113"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="122"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="131"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_3" desc="()Ljava/lang/Object;" line="140"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljavaslang/Function3;)Ljavaslang/Tuple3;" line="144"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple3;" line="148"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="160"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="166"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="173"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="187"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="192"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$f6a7114e$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple3;Ljavaslang/Tuple3;)I" line="62"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="233"/><counter type="BRANCH" missed="0" covered="22"/><counter type="LINE" missed="0" covered="48"/><counter type="COMPLEXITY" missed="0" covered="27"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple4"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V" line="61"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="69"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple4;Ljavaslang/Tuple4;)I" line="97"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="126"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple4;)I" line="131"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="140"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="149"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_3" desc="()Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_4" desc="()Ljava/lang/Object;" line="167"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljavaslang/Function4;)Ljavaslang/Tuple4;" line="171"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple4;" line="175"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="187"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="193"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="200"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="215"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="220"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$497ac03d$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple4;Ljavaslang/Tuple4;)I" line="70"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="289"/><counter type="BRANCH" missed="0" covered="28"/><counter type="LINE" missed="0" covered="57"/><counter type="COMPLEXITY" missed="0" covered="31"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple5"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V" line="68"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="77"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple5;Ljavaslang/Tuple5;)I" line="110"><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="18"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="144"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple5;)I" line="149"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="167"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_3" desc="()Ljava/lang/Object;" line="176"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_4" desc="()Ljava/lang/Object;" line="185"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_5" desc="()Ljava/lang/Object;" line="194"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljavaslang/Function5;)Ljavaslang/Tuple5;" line="198"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple5;" line="202"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="214"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="220"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="227"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="243"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="248"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$d8aebf01$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple5;Ljavaslang/Tuple5;)I" line="78"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="16"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="345"/><counter type="BRANCH" missed="0" covered="34"/><counter type="LINE" missed="0" covered="66"/><counter type="COMPLEXITY" missed="0" covered="35"/><counter type="METHOD" missed="0" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple6"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="85"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple6;Ljavaslang/Tuple6;)I" line="123"><counter type="INSTRUCTION" missed="0" covered="72"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="162"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple6;)I" line="167"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="176"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="185"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_3" desc="()Ljava/lang/Object;" line="194"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_4" desc="()Ljava/lang/Object;" line="203"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_5" desc="()Ljava/lang/Object;" line="212"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_6" desc="()Ljava/lang/Object;" line="221"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljavaslang/Function6;)Ljavaslang/Tuple6;" line="225"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple6;" line="229"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="241"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="247"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="254"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="271"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="276"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$492ca206$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple6;Ljavaslang/Tuple6;)I" line="86"><counter type="INSTRUCTION" missed="0" covered="68"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="401"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="75"/><counter type="COMPLEXITY" missed="0" covered="39"/><counter type="METHOD" missed="0" covered="19"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple7"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V" line="82"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="93"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple7;Ljavaslang/Tuple7;)I" line="136"><counter type="INSTRUCTION" missed="0" covered="83"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="180"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple7;)I" line="185"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="194"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="203"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_3" desc="()Ljava/lang/Object;" line="212"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_4" desc="()Ljava/lang/Object;" line="221"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_5" desc="()Ljava/lang/Object;" line="230"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_6" desc="()Ljava/lang/Object;" line="239"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_7" desc="()Ljava/lang/Object;" line="248"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljavaslang/Function7;)Ljavaslang/Tuple7;" line="252"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple7;" line="256"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="268"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="274"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="281"><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="BRANCH" missed="0" covered="18"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="299"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="304"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$a348e2b8$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple7;Ljavaslang/Tuple7;)I" line="94"><counter type="INSTRUCTION" missed="0" covered="79"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="457"/><counter type="BRANCH" missed="0" covered="46"/><counter type="LINE" missed="0" covered="84"/><counter type="COMPLEXITY" missed="0" covered="43"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Tuple8"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V" line="89"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparator" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" line="101"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple8;Ljavaslang/Tuple8;)I" line="149"><counter type="INSTRUCTION" missed="0" covered="94"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="arity" desc="()I" line="198"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Ljavaslang/Tuple8;)I" line="203"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_1" desc="()Ljava/lang/Object;" line="212"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_2" desc="()Ljava/lang/Object;" line="221"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_3" desc="()Ljava/lang/Object;" line="230"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_4" desc="()Ljava/lang/Object;" line="239"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_5" desc="()Ljava/lang/Object;" line="248"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_6" desc="()Ljava/lang/Object;" line="257"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_7" desc="()Ljava/lang/Object;" line="266"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="_8" desc="()Ljava/lang/Object;" line="275"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljavaslang/Function8;)Ljavaslang/Tuple8;" line="279"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/Tuple8;" line="283"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="295"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSeq" desc="()Ljavaslang/collection/Seq;" line="301"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="308"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="20"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="327"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="332"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$comparator$7165794b$1" desc="(Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljava/util/Comparator;Ljavaslang/Tuple8;Ljavaslang/Tuple8;)I" line="102"><counter type="INSTRUCTION" missed="0" covered="90"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="25"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="513"/><counter type="BRANCH" missed="0" covered="52"/><counter type="LINE" missed="0" covered="93"/><counter type="COMPLEXITY" missed="0" covered="47"/><counter type="METHOD" missed="0" covered="21"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction8$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction8;)V" line="299"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="304"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="309"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="314"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="319"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="324"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType6" desc="()Ljava/lang/Class;" line="329"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType7" desc="()Ljava/lang/Class;" line="334"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType8" desc="()Ljava/lang/Class;" line="339"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction5$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction5;)V" line="236"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="241"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="246"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="251"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="256"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="261"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function8$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function8;)V" line="300"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="305"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="310"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="315"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="320"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="325"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType6" desc="()Ljava/lang/Class;" line="330"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType7" desc="()Ljava/lang/Class;" line="335"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType8" desc="()Ljava/lang/Class;" line="340"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Function7$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/Function7;)V" line="278"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="283"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="288"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="293"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="298"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType5" desc="()Ljava/lang/Class;" line="303"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType6" desc="()Ljava/lang/Class;" line="308"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType7" desc="()Ljava/lang/Class;" line="313"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Lazy$Undefined"><method name="&lt;init&gt;" desc="()V" line="318"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="instance" desc="()Ljavaslang/Lazy$Undefined;" line="323"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="328"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="333"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEvaluated" desc="()Z" line="338"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="343"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="348"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="353"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="358"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="368"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="315"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="11"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/CheckedFunction4$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/CheckedFunction4;)V" line="217"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="222"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType2" desc="()Ljava/lang/Class;" line="227"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType3" desc="()Ljava/lang/Class;" line="232"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType4" desc="()Ljava/lang/Class;" line="237"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Lazy$Defined"><method name="&lt;init&gt;" desc="(Ljava/util/function/Supplier;)V" line="247"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="253"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="266"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEvaluated" desc="()Z" line="271"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="276"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="281"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="286"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="291"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="writeObject" desc="(Ljava/io/ObjectOutputStream;)V" line="301"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="BRANCH" missed="0" covered="14"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="16"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/λModule$ReflectionUtil"><method name="&lt;init&gt;" desc="()V" line="214"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getLambdaSignature" desc="(Ljava/io/Serializable;)Ljava/lang/invoke/MethodType;" line="217"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSerializedLambda" desc="(Ljava/io/Serializable;)Ljava/lang/invoke/SerializedLambda;" line="222"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$getSerializedLambda$0" desc="(Ljava/io/Serializable;)Ljava/lang/invoke/SerializedLambda;" line="223"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="33"/><counter type="LINE" missed="1" covered="7"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/Value"><method name="contains" desc="(Ljava/lang/Object;)Z" line="161"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="corresponds" desc="(Ljava/lang/Iterable;Ljava/util/function/BiPredicate;)Z" line="176"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="eq" desc="(Ljava/lang/Object;)Z" line="214"><counter type="INSTRUCTION" missed="4" covered="27"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="2" covered="7"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="exists" desc="(Ljava/util/function/Predicate;)Z" line="243"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forAll" desc="(Ljava/util/function/Predicate;)Z" line="303"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forEach" desc="(Ljava/util/function/Consumer;)V" line="314"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getOption" desc="()Ljavaslang/control/Option;" line="334"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ifDefined" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="346"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ifDefined" desc="(Ljava/util/function/Supplier;Ljava/util/function/Supplier;)Ljava/lang/Object;" line="358"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ifEmpty" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="370"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ifEmpty" desc="(Ljava/util/function/Supplier;Ljava/util/function/Supplier;)Ljava/lang/Object;" line="382"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDefined" desc="()Z" line="398"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElse" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="415"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseGet" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="426"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseThrow" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="440"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseTry" desc="(Ljavaslang/control/Try$CheckedSupplier;)Ljava/lang/Object;" line="457"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldLeft" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="533"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="foldRight" desc="(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="549"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reduceLeft" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="563"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceLeftOption" desc="(Ljava/util/function/BiFunction;)Ljavaslang/control/Option;" line="577"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceRight" desc="(Ljava/util/function/BiFunction;)Ljava/lang/Object;" line="591"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduceRightOption" desc="(Ljava/util/function/BiFunction;)Ljavaslang/control/Option;" line="605"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toArray" desc="()Ljavaslang/collection/Array;" line="645"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toCharSeq" desc="()Ljavaslang/collection/CharSeq;" line="654"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaArray" desc="()[Ljava/lang/Object;" line="663"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaArray" desc="(Ljava/lang/Class;)[Ljava/lang/Object;" line="675"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaList" desc="()Ljava/util/List;" line="686"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaMap" desc="(Ljava/util/function/Function;)Ljava/util/Map;" line="698"><counter type="INSTRUCTION" missed="14" covered="38"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="3" covered="9"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaOptional" desc="()Ljava/util/Optional;" line="720"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaSet" desc="()Ljava/util/Set;" line="729"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toJavaStream" desc="()Ljava/util/stream/Stream;" line="738"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLazy" desc="()Ljavaslang/Lazy;" line="747"><counter type="INSTRUCTION" missed="3" covered="12"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLeft" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Either;" line="764"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLeft" desc="(Ljava/lang/Object;)Ljavaslang/control/Either;" line="778"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toList" desc="()Ljavaslang/collection/List;" line="787"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toMap" desc="(Ljava/util/function/Function;)Ljavaslang/collection/Map;" line="799"><counter type="INSTRUCTION" missed="9" covered="16"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toOption" desc="()Ljavaslang/control/Option;" line="815"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toQueue" desc="()Ljavaslang/collection/Queue;" line="828"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toRight" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Either;" line="841"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toRight" desc="(Ljava/lang/Object;)Ljavaslang/control/Either;" line="855"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toSet" desc="()Ljavaslang/collection/Set;" line="864"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toStack" desc="()Ljavaslang/collection/Stack;" line="873"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toStream" desc="()Ljavaslang/collection/Stream;" line="882"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toTry" desc="()Ljavaslang/control/Try;" line="894"><counter type="INSTRUCTION" missed="3" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toTry" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Try;" line="911"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toTree" desc="()Ljavaslang/collection/Tree;" line="921"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toVector" desc="()Ljavaslang/collection/Vector;" line="930"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="out" desc="(Ljava/io/PrintStream;)V" line="943"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="out" desc="(Ljava/io/PrintWriter;)V" line="959"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stderr" desc="()V" line="974"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stdout" desc="()V" line="984"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$eq$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Z" line="219"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$contains$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Z" line="161"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="48" covered="609"/><counter type="BRANCH" missed="9" covered="87"/><counter type="LINE" missed="11" covered="118"/><counter type="COMPLEXITY" missed="9" covered="92"/><counter type="METHOD" missed="1" covered="52"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckedFunction4.java"><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="91" mi="16" ci="3" mb="0" cb="0"/><line nr="114" mi="7" ci="4" mb="0" cb="0"/><line nr="126" mi="7" ci="5" mb="0" cb="0"/><line nr="139" mi="7" ci="6" mb="0" cb="0"/><line nr="144" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="22" ci="3" mb="0" cb="0"/><line nr="154" mi="0" ci="14" mb="0" cb="0"/><line nr="159" mi="7" ci="3" mb="0" cb="0"/><line nr="164" mi="0" ci="3" mb="0" cb="2"/><line nr="165" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="3" mb="0" cb="0"/><line nr="170" mi="0" ci="7" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="20" mb="0" cb="0"/><line nr="174" mi="5" ci="3" mb="0" cb="0"/><line nr="175" mi="0" ci="2" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="9" ci="4" mb="0" cb="0"/><line nr="196" mi="0" ci="6" mb="0" cb="0"/><line nr="217" mi="0" ci="3" mb="0" cb="0"/><line nr="218" mi="0" ci="1" mb="0" cb="0"/><line nr="222" mi="0" ci="5" mb="0" cb="0"/><line nr="227" mi="0" ci="5" mb="0" cb="0"/><line nr="232" mi="0" ci="5" mb="0" cb="0"/><line nr="237" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="80" covered="132"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="11" covered="22"/><counter type="METHOD" missed="11" covered="21"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Tuple8.java"><line nr="89" mi="0" ci="2" mb="0" cb="0"/><line nr="90" mi="0" ci="3" mb="0" cb="0"/><line nr="91" mi="0" ci="3" mb="0" cb="0"/><line nr="92" mi="0" ci="3" mb="0" cb="0"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="94" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="98" mi="0" ci="1" mb="0" cb="0"/><line nr="101" mi="0" ci="12" mb="0" cb="0"/><line nr="102" mi="0" ci="7" mb="0" cb="0"/><line nr="103" mi="0" ci="2" mb="0" cb="2"/><line nr="104" mi="0" ci="2" mb="0" cb="0"/><line nr="107" mi="0" ci="7" mb="0" cb="0"/><line nr="108" mi="0" ci="2" mb="0" cb="2"/><line nr="109" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="7" mb="0" cb="0"/><line nr="113" mi="0" ci="2" mb="0" cb="2"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="117" mi="0" ci="7" mb="0" cb="0"/><line nr="118" mi="0" ci="2" mb="0" cb="2"/><line nr="119" mi="0" ci="2" mb="0" cb="0"/><line nr="122" mi="0" ci="7" mb="0" cb="0"/><line nr="123" mi="0" ci="2" mb="0" cb="2"/><line nr="124" mi="0" ci="2" mb="0" cb="0"/><line nr="127" mi="0" ci="7" mb="0" cb="0"/><line nr="128" mi="0" ci="2" mb="0" cb="2"/><line nr="129" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="7" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="0" cb="2"/><line nr="134" mi="0" ci="2" mb="0" cb="0"/><line nr="137" mi="0" ci="7" mb="0" cb="0"/><line nr="138" mi="0" ci="2" mb="0" cb="2"/><line nr="139" mi="0" ci="2" mb="0" cb="0"/><line nr="143" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="2" mb="0" cb="0"/><line nr="152" mi="0" ci="7" mb="0" cb="0"/><line nr="153" mi="0" ci="2" mb="0" cb="2"/><line nr="154" mi="0" ci="2" mb="0" cb="0"/><line nr="157" mi="0" ci="7" mb="0" cb="0"/><line nr="158" mi="0" ci="2" mb="0" cb="2"/><line nr="159" mi="0" ci="2" mb="0" cb="0"/><line nr="162" mi="0" ci="7" mb="0" cb="0"/><line nr="163" mi="0" ci="2" mb="0" cb="2"/><line nr="164" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="7" mb="0" cb="0"/><line nr="168" mi="0" ci="2" mb="0" cb="2"/><line nr="169" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="0" ci="7" mb="0" cb="0"/><line nr="173" mi="0" ci="2" mb="0" cb="2"/><line nr="174" mi="0" ci="2" mb="0" cb="0"/><line nr="177" mi="0" ci="7" mb="0" cb="0"/><line nr="178" mi="0" ci="2" mb="0" cb="2"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="0" ci="7" mb="0" cb="0"/><line nr="183" mi="0" ci="2" mb="0" cb="2"/><line nr="184" mi="0" ci="2" mb="0" cb="0"/><line nr="187" mi="0" ci="7" mb="0" cb="0"/><line nr="188" mi="0" ci="2" mb="0" cb="2"/><line nr="189" mi="0" ci="2" mb="0" cb="0"/><line nr="193" mi="0" ci="2" mb="0" cb="0"/><line nr="198" mi="0" ci="2" mb="0" cb="0"/><line nr="203" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="3" mb="0" cb="0"/><line nr="230" mi="0" ci="3" mb="0" cb="0"/><line nr="239" mi="0" ci="3" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="266" mi="0" ci="3" mb="0" cb="0"/><line nr="275" mi="0" ci="3" mb="0" cb="0"/><line nr="279" mi="0" ci="20" mb="0" cb="0"/><line nr="283" mi="0" ci="34" mb="0" cb="0"/><line nr="295" mi="0" ci="4" mb="0" cb="0"/><line nr="296" mi="0" ci="4" mb="0" cb="0"/><line nr="301" mi="0" ci="44" mb="0" cb="0"/><line nr="308" mi="0" ci="3" mb="0" cb="2"/><line nr="309" mi="0" ci="2" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="2"/><line nr="311" mi="0" ci="2" mb="0" cb="0"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="314" mi="0" ci="11" mb="0" cb="2"/><line nr="315" mi="0" ci="6" mb="0" cb="2"/><line nr="316" mi="0" ci="6" mb="0" cb="2"/><line nr="317" mi="0" ci="6" mb="0" cb="2"/><line nr="318" mi="0" ci="6" mb="0" cb="2"/><line nr="319" mi="0" ci="6" mb="0" cb="2"/><line nr="320" mi="0" ci="6" mb="0" cb="2"/><line nr="321" mi="0" ci="5" mb="0" cb="2"/><line nr="327" mi="0" ci="44" mb="0" cb="0"/><line nr="332" mi="0" ci="45" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="513"/><counter type="BRANCH" missed="0" covered="52"/><counter type="LINE" missed="0" covered="93"/><counter type="COMPLEXITY" missed="0" covered="47"/><counter type="METHOD" missed="0" covered="21"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Tuple.java"><line nr="44" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="5" mb="0" cb="0"/><line nr="68" mi="0" ci="6" mb="0" cb="0"/><line nr="83" mi="0" ci="7" mb="0" cb="0"/><line nr="100" mi="0" ci="8" mb="0" cb="0"/><line nr="119" mi="0" ci="9" mb="0" cb="0"/><line nr="140" mi="0" ci="10" mb="0" cb="0"/><line nr="163" mi="0" ci="11" mb="0" cb="0"/><line nr="188" mi="0" ci="12" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="70"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="9"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckedFunction5.java"><line nr="77" mi="0" ci="2" mb="0" cb="0"/><line nr="94" mi="18" ci="3" mb="0" cb="0"/><line nr="118" mi="8" ci="4" mb="0" cb="0"/><line nr="130" mi="8" ci="5" mb="0" cb="0"/><line nr="143" mi="8" ci="6" mb="0" cb="0"/><line nr="157" mi="8" ci="7" mb="0" cb="0"/><line nr="162" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="30" ci="3" mb="0" cb="0"/><line nr="172" mi="0" ci="16" mb="0" cb="0"/><line nr="177" mi="8" ci="3" mb="0" cb="0"/><line nr="182" mi="0" ci="3" mb="0" cb="2"/><line nr="183" mi="0" ci="2" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="0" ci="3" mb="0" cb="0"/><line nr="188" mi="0" ci="7" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="0" ci="21" mb="0" cb="0"/><line nr="192" mi="5" ci="3" mb="0" cb="0"/><line nr="193" mi="0" ci="2" mb="0" cb="0"/><line nr="208" mi="0" ci="4" mb="0" cb="0"/><line nr="209" mi="10" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="6" mb="0" cb="0"/><line nr="236" mi="0" ci="3" mb="0" cb="0"/><line nr="237" mi="0" ci="1" mb="0" cb="0"/><line nr="241" mi="0" ci="5" mb="0" cb="0"/><line nr="246" mi="0" ci="5" mb="0" cb="0"/><line nr="251" mi="0" ci="5" mb="0" cb="0"/><line nr="256" mi="0" ci="5" mb="0" cb="0"/><line nr="261" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="103" covered="147"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="30"/><counter type="COMPLEXITY" missed="13" covered="24"/><counter type="METHOD" missed="13" covered="23"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Function6.java"><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="20" ci="3" mb="0" cb="0"/><line nr="123" mi="9" ci="4" mb="0" cb="0"/><line nr="135" mi="9" ci="5" mb="0" cb="0"/><line nr="148" mi="9" ci="6" mb="0" cb="0"/><line nr="162" mi="9" ci="7" mb="0" cb="0"/><line nr="177" mi="9" ci="8" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="187" mi="0" ci="42" mb="0" cb="0"/><line nr="192" mi="0" ci="18" mb="0" cb="0"/><line nr="197" mi="9" ci="3" mb="0" cb="0"/><line nr="202" mi="0" ci="3" mb="0" cb="2"/><line nr="203" mi="0" ci="2" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="206" mi="0" ci="4" mb="0" cb="0"/><line nr="207" mi="0" ci="3" mb="0" cb="0"/><line nr="208" mi="0" ci="7" mb="0" cb="0"/><line nr="210" mi="0" ci="4" mb="0" cb="0"/><line nr="211" mi="0" ci="15" mb="0" cb="0"/><line nr="212" mi="5" ci="3" mb="0" cb="0"/><line nr="213" mi="0" ci="2" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="11" ci="4" mb="0" cb="0"/><line nr="234" mi="0" ci="6" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="258" mi="0" ci="1" mb="0" cb="0"/><line nr="262" mi="0" ci="5" mb="0" cb="0"/><line nr="267" mi="0" ci="5" mb="0" cb="0"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="277" mi="0" ci="5" mb="0" cb="0"/><line nr="282" mi="0" ci="5" mb="0" cb="0"/><line nr="287" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="90" covered="195"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="32"/><counter type="COMPLEXITY" missed="9" covered="30"/><counter type="METHOD" missed="9" covered="29"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Tuple7.java"><line nr="82" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="3" mb="0" cb="0"/><line nr="86" mi="0" ci="3" mb="0" cb="0"/><line nr="87" mi="0" ci="3" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="1" mb="0" cb="0"/><line nr="93" mi="0" ci="11" mb="0" cb="0"/><line nr="94" mi="0" ci="7" mb="0" cb="0"/><line nr="95" mi="0" ci="2" mb="0" cb="2"/><line nr="96" mi="0" ci="2" mb="0" cb="0"/><line nr="99" mi="0" ci="7" mb="0" cb="0"/><line nr="100" mi="0" ci="2" mb="0" cb="2"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="7" mb="0" cb="0"/><line nr="105" mi="0" ci="2" mb="0" cb="2"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="109" mi="0" ci="7" mb="0" cb="0"/><line nr="110" mi="0" ci="2" mb="0" cb="2"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="114" mi="0" ci="7" mb="0" cb="0"/><line nr="115" mi="0" ci="2" mb="0" cb="2"/><line nr="116" mi="0" ci="2" mb="0" cb="0"/><line nr="119" mi="0" ci="7" mb="0" cb="0"/><line nr="120" mi="0" ci="2" mb="0" cb="2"/><line nr="121" mi="0" ci="2" mb="0" cb="0"/><line nr="124" mi="0" ci="7" mb="0" cb="0"/><line nr="125" mi="0" ci="2" mb="0" cb="2"/><line nr="126" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="2" mb="0" cb="0"/><line nr="137" mi="0" ci="2" mb="0" cb="0"/><line nr="139" mi="0" ci="7" mb="0" cb="0"/><line nr="140" mi="0" ci="2" mb="0" cb="2"/><line nr="141" mi="0" ci="2" mb="0" cb="0"/><line nr="144" mi="0" ci="7" mb="0" cb="0"/><line nr="145" mi="0" ci="2" mb="0" cb="2"/><line nr="146" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="7" mb="0" cb="0"/><line nr="150" mi="0" ci="2" mb="0" cb="2"/><line nr="151" mi="0" ci="2" mb="0" cb="0"/><line nr="154" mi="0" ci="7" mb="0" cb="0"/><line nr="155" mi="0" ci="2" mb="0" cb="2"/><line nr="156" mi="0" ci="2" mb="0" cb="0"/><line nr="159" mi="0" ci="7" mb="0" cb="0"/><line nr="160" mi="0" ci="2" mb="0" cb="2"/><line nr="161" mi="0" ci="2" mb="0" cb="0"/><line nr="164" mi="0" ci="7" mb="0" cb="0"/><line nr="165" mi="0" ci="2" mb="0" cb="2"/><line nr="166" mi="0" ci="2" mb="0" cb="0"/><line nr="169" mi="0" ci="7" mb="0" cb="0"/><line nr="170" mi="0" ci="2" mb="0" cb="2"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="175" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="2" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="3" mb="0" cb="0"/><line nr="203" mi="0" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="3" mb="0" cb="0"/><line nr="230" mi="0" ci="3" mb="0" cb="0"/><line nr="239" mi="0" ci="3" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="252" mi="0" ci="18" mb="0" cb="0"/><line nr="256" mi="0" ci="30" mb="0" cb="0"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="274" mi="0" ci="39" mb="0" cb="0"/><line nr="281" mi="0" ci="3" mb="0" cb="2"/><line nr="282" mi="0" ci="2" mb="0" cb="0"/><line nr="283" mi="0" ci="3" mb="0" cb="2"/><line nr="284" mi="0" ci="2" mb="0" cb="0"/><line nr="286" mi="0" ci="3" mb="0" cb="0"/><line nr="287" mi="0" ci="11" mb="0" cb="2"/><line nr="288" mi="0" ci="6" mb="0" cb="2"/><line nr="289" mi="0" ci="6" mb="0" cb="2"/><line nr="290" mi="0" ci="6" mb="0" cb="2"/><line nr="291" mi="0" ci="6" mb="0" cb="2"/><line nr="292" mi="0" ci="6" mb="0" cb="2"/><line nr="293" mi="0" ci="5" mb="0" cb="2"/><line nr="299" mi="0" ci="39" mb="0" cb="0"/><line nr="304" mi="0" ci="40" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="457"/><counter type="BRANCH" missed="0" covered="46"/><counter type="LINE" missed="0" covered="84"/><counter type="COMPLEXITY" missed="0" covered="43"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Tuple1.java"><line nr="40" mi="0" ci="2" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="45" mi="0" ci="5" mb="0" cb="0"/><line nr="46" mi="0" ci="7" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="2"/><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="59" mi="0" ci="2" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="0"/><line nr="62" mi="0" ci="2" mb="0" cb="2"/><line nr="63" mi="0" ci="2" mb="0" cb="0"/><line nr="67" mi="0" ci="2" mb="0" cb="0"/><line nr="72" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="0"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="115" mi="0" ci="3" mb="0" cb="2"/><line nr="116" mi="0" ci="2" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="2"/><line nr="118" mi="0" ci="2" mb="0" cb="0"/><line nr="120" mi="0" ci="3" mb="0" cb="0"/><line nr="121" mi="0" ci="6" mb="0" cb="0"/><line nr="128" mi="0" ci="9" mb="0" cb="0"/><line nr="133" mi="0" ci="10" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="106"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="29"/><counter type="COMPLEXITY" missed="0" covered="17"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Function0.java"><line nr="67" mi="0" ci="2" mb="0" cb="0"/><line nr="79" mi="8" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="3" ci="3" mb="0" cb="0"/><line nr="117" mi="0" ci="2" mb="0" cb="0"/><line nr="122" mi="0" ci="3" mb="0" cb="2"/><line nr="123" mi="0" ci="2" mb="0" cb="0"/><line nr="125" mi="0" ci="10" mb="0" cb="0"/><line nr="139" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="5" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="6" mb="0" cb="0"/><line nr="162" mi="0" ci="3" mb="0" cb="0"/><line nr="163" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="50"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="4" covered="12"/><counter type="METHOD" missed="4" covered="11"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Function1.java"><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="10" ci="3" mb="0" cb="0"/><line nr="93" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="2" mb="0" cb="0"/><line nr="117" mi="5" ci="3" mb="0" cb="0"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="127" mi="0" ci="3" mb="0" cb="2"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="8" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="0"/><line nr="134" mi="0" ci="2" mb="0" cb="2"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="138" mi="0" ci="4" mb="0" cb="0"/><line nr="139" mi="0" ci="6" mb="0" cb="0"/><line nr="140" mi="5" ci="3" mb="0" cb="0"/><line nr="141" mi="0" ci="2" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="6" ci="4" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="6" ci="4" mb="0" cb="0"/><line nr="177" mi="0" ci="6" mb="0" cb="0"/><line nr="195" mi="0" ci="3" mb="0" cb="0"/><line nr="196" mi="0" ci="1" mb="0" cb="0"/><line nr="200" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="32" covered="98"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="5" covered="18"/><counter type="METHOD" missed="5" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CheckedFunction0.java"><line nr="65" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="8" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="2" mb="0" cb="0"/><line nr="95" mi="0" ci="2" mb="0" cb="0"/><line nr="100" mi="3" ci="3" mb="0" cb="0"/><line nr="105" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="3" mb="0" cb="2"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="113" mi="0" ci="15" mb="0" cb="0"/><line nr="127" mi="0" ci="4" mb="0" cb="0"/><line nr="128" mi="5" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="6" mb="0" cb="0"/><line nr="150" mi="0" ci="3" mb="0" cb="0"/><line nr="151" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="52"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="4" covered="12"/><counter type="METHOD" missed="4" covered="11"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Function4.java"><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="92" mi="16" ci="3" mb="0" cb="0"/><line nr="115" mi="7" ci="4" mb="0" cb="0"/><line nr="127" mi="7" ci="5" mb="0" cb="0"/><line nr="140" mi="7" ci="6" mb="0" cb="0"/><line nr="145" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="25" mb="0" cb="0"/><line nr="155" mi="0" ci="14" mb="0" cb="0"/><line nr="160" mi="7" ci="3" mb="0" cb="0"/><line nr="165" mi="0" ci="3" mb="0" cb="2"/><line nr="166" mi="0" ci="2" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="0" ci="7" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="13" mb="0" cb="0"/><line nr="175" mi="5" ci="3" mb="0" cb="0"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="9" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="6" mb="0" cb="0"/><line nr="218" mi="0" ci="3" mb="0" cb="0"/><line nr="219" mi="0" ci="1" mb="0" cb="0"/><line nr="223" mi="0" ci="5" mb="0" cb="0"/><line nr="228" mi="0" ci="5" mb="0" cb="0"/><line nr="233" mi="0" ci="5" mb="0" cb="0"/><line nr="238" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="58" covered="147"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="7" covered="24"/><counter type="METHOD" missed="7" covered="23"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CheckedFunction3.java"><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="88" mi="14" ci="3" mb="0" cb="0"/><line nr="110" mi="6" ci="4" mb="0" cb="0"/><line nr="122" mi="6" ci="5" mb="0" cb="0"/><line nr="127" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="15" ci="3" mb="0" cb="0"/><line nr="137" mi="0" ci="12" mb="0" cb="0"/><line nr="142" mi="6" ci="3" mb="0" cb="0"/><line nr="147" mi="0" ci="3" mb="0" cb="2"/><line nr="148" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="4" mb="0" cb="0"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="3" mb="0" cb="0"/><line nr="153" mi="0" ci="7" mb="0" cb="0"/><line nr="155" mi="0" ci="4" mb="0" cb="0"/><line nr="156" mi="0" ci="19" mb="0" cb="0"/><line nr="157" mi="5" ci="3" mb="0" cb="0"/><line nr="158" mi="0" ci="2" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="8" ci="4" mb="0" cb="0"/><line nr="179" mi="0" ci="6" mb="0" cb="0"/><line nr="199" mi="0" ci="3" mb="0" cb="0"/><line nr="200" mi="0" ci="1" mb="0" cb="0"/><line nr="204" mi="0" ci="5" mb="0" cb="0"/><line nr="209" mi="0" ci="5" mb="0" cb="0"/><line nr="214" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="60" covered="118"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="26"/><counter type="COMPLEXITY" missed="9" covered="20"/><counter type="METHOD" missed="9" covered="19"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Tuple3.java"><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="3" mb="0" cb="0"/><line nr="56" mi="0" ci="3" mb="0" cb="0"/><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="58" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="0"/><line nr="62" mi="0" ci="7" mb="0" cb="0"/><line nr="63" mi="0" ci="2" mb="0" cb="2"/><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="67" mi="0" ci="7" mb="0" cb="0"/><line nr="68" mi="0" ci="2" mb="0" cb="2"/><line nr="69" mi="0" ci="2" mb="0" cb="0"/><line nr="72" mi="0" ci="7" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="2"/><line nr="74" mi="0" ci="2" mb="0" cb="0"/><line nr="78" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="2" mb="0" cb="0"/><line nr="85" mi="0" ci="2" mb="0" cb="0"/><line nr="87" mi="0" ci="7" mb="0" cb="0"/><line nr="88" mi="0" ci="2" mb="0" cb="2"/><line nr="89" mi="0" ci="2" mb="0" cb="0"/><line nr="92" mi="0" ci="7" mb="0" cb="0"/><line nr="93" mi="0" ci="2" mb="0" cb="2"/><line nr="94" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="7" mb="0" cb="0"/><line nr="98" mi="0" ci="2" mb="0" cb="2"/><line nr="99" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="2" mb="0" cb="0"/><line nr="108" mi="0" ci="2" mb="0" cb="0"/><line nr="113" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="3" mb="0" cb="0"/><line nr="140" mi="0" ci="3" mb="0" cb="0"/><line nr="144" mi="0" ci="10" mb="0" cb="0"/><line nr="148" mi="0" ci="14" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="19" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="0" cb="2"/><line nr="174" mi="0" ci="2" mb="0" cb="0"/><line nr="175" mi="0" ci="3" mb="0" cb="2"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="0" ci="11" mb="0" cb="2"/><line nr="180" mi="0" ci="6" mb="0" cb="2"/><line nr="181" mi="0" ci="5" mb="0" cb="2"/><line nr="187" mi="0" ci="19" mb="0" cb="0"/><line nr="192" mi="0" ci="20" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="233"/><counter type="BRANCH" missed="0" covered="22"/><counter type="LINE" missed="0" covered="48"/><counter type="COMPLEXITY" missed="0" covered="27"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Function7.java"><line nr="82" mi="0" ci="2" mb="0" cb="0"/><line nr="101" mi="22" ci="3" mb="0" cb="0"/><line nr="127" mi="10" ci="4" mb="0" cb="0"/><line nr="139" mi="10" ci="5" mb="0" cb="0"/><line nr="152" mi="10" ci="6" mb="0" cb="0"/><line nr="166" mi="10" ci="7" mb="0" cb="0"/><line nr="181" mi="10" ci="8" mb="0" cb="0"/><line nr="197" mi="10" ci="9" mb="0" cb="0"/><line nr="202" mi="0" ci="2" mb="0" cb="0"/><line nr="207" mi="0" ci="52" mb="0" cb="0"/><line nr="212" mi="0" ci="20" mb="0" cb="0"/><line nr="217" mi="10" ci="3" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="2"/><line nr="223" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="227" mi="0" ci="3" mb="0" cb="0"/><line nr="228" mi="0" ci="7" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="16" mb="0" cb="0"/><line nr="232" mi="5" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="2" mb="0" cb="0"/><line nr="248" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="12" ci="4" mb="0" cb="0"/><line nr="254" mi="0" ci="6" mb="0" cb="0"/><line nr="278" mi="0" ci="3" mb="0" cb="0"/><line nr="279" mi="0" ci="1" mb="0" cb="0"/><line nr="283" mi="0" ci="5" mb="0" cb="0"/><line nr="288" mi="0" ci="5" mb="0" cb="0"/><line nr="293" mi="0" ci="5" mb="0" cb="0"/><line nr="298" mi="0" ci="5" mb="0" cb="0"/><line nr="303" mi="0" ci="5" mb="0" cb="0"/><line nr="308" mi="0" ci="5" mb="0" cb="0"/><line nr="313" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="109" covered="222"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="10" covered="33"/><counter type="METHOD" missed="10" covered="32"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CheckedFunction6.java"><line nr="79" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="20" ci="3" mb="0" cb="0"/><line nr="122" mi="9" ci="4" mb="0" cb="0"/><line nr="134" mi="9" ci="5" mb="0" cb="0"/><line nr="147" mi="9" ci="6" mb="0" cb="0"/><line nr="161" mi="9" ci="7" mb="0" cb="0"/><line nr="176" mi="9" ci="8" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="186" mi="39" ci="3" mb="0" cb="0"/><line nr="191" mi="0" ci="18" mb="0" cb="0"/><line nr="196" mi="9" ci="3" mb="0" cb="0"/><line nr="201" mi="0" ci="3" mb="0" cb="2"/><line nr="202" mi="0" ci="2" mb="0" cb="0"/><line nr="204" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="0"/><line nr="207" mi="0" ci="7" mb="0" cb="0"/><line nr="209" mi="0" ci="4" mb="0" cb="0"/><line nr="210" mi="0" ci="22" mb="0" cb="0"/><line nr="211" mi="5" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="2" mb="0" cb="0"/><line nr="227" mi="0" ci="4" mb="0" cb="0"/><line nr="228" mi="11" ci="4" mb="0" cb="0"/><line nr="233" mi="0" ci="6" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="0"/><line nr="257" mi="0" ci="1" mb="0" cb="0"/><line nr="261" mi="0" ci="5" mb="0" cb="0"/><line nr="266" mi="0" ci="5" mb="0" cb="0"/><line nr="271" mi="0" ci="5" mb="0" cb="0"/><line nr="276" mi="0" ci="5" mb="0" cb="0"/><line nr="281" mi="0" ci="5" mb="0" cb="0"/><line nr="286" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="129" covered="163"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="32"/><counter type="COMPLEXITY" missed="15" covered="26"/><counter type="METHOD" missed="15" covered="25"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Tuple6.java"><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="76" mi="0" ci="3" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="0"/><line nr="78" mi="0" ci="3" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="81" mi="0" ci="3" mb="0" cb="0"/><line nr="82" mi="0" ci="1" mb="0" cb="0"/><line nr="85" mi="0" ci="10" mb="0" cb="0"/><line nr="86" mi="0" ci="7" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="2"/><line nr="88" mi="0" ci="2" mb="0" cb="0"/><line nr="91" mi="0" ci="7" mb="0" cb="0"/><line nr="92" mi="0" ci="2" mb="0" cb="2"/><line nr="93" mi="0" ci="2" mb="0" cb="0"/><line nr="96" mi="0" ci="7" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="2"/><line nr="98" mi="0" ci="2" mb="0" cb="0"/><line nr="101" mi="0" ci="7" mb="0" cb="0"/><line nr="102" mi="0" ci="2" mb="0" cb="2"/><line nr="103" mi="0" ci="2" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="2"/><line nr="108" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="7" mb="0" cb="0"/><line nr="112" mi="0" ci="2" mb="0" cb="2"/><line nr="113" mi="0" ci="2" mb="0" cb="0"/><line nr="117" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="2" mb="0" cb="0"/><line nr="124" mi="0" ci="2" mb="0" cb="0"/><line nr="126" mi="0" ci="7" mb="0" cb="0"/><line nr="127" mi="0" ci="2" mb="0" cb="2"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="131" mi="0" ci="7" mb="0" cb="0"/><line nr="132" mi="0" ci="2" mb="0" cb="2"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="7" mb="0" cb="0"/><line nr="137" mi="0" ci="2" mb="0" cb="2"/><line nr="138" mi="0" ci="2" mb="0" cb="0"/><line nr="141" mi="0" ci="7" mb="0" cb="0"/><line nr="142" mi="0" ci="2" mb="0" cb="2"/><line nr="143" mi="0" ci="2" mb="0" cb="0"/><line nr="146" mi="0" ci="7" mb="0" cb="0"/><line nr="147" mi="0" ci="2" mb="0" cb="2"/><line nr="148" mi="0" ci="2" mb="0" cb="0"/><line nr="151" mi="0" ci="7" mb="0" cb="0"/><line nr="152" mi="0" ci="2" mb="0" cb="2"/><line nr="153" mi="0" ci="2" mb="0" cb="0"/><line nr="157" mi="0" ci="2" mb="0" cb="0"/><line nr="162" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="3" mb="0" cb="0"/><line nr="185" mi="0" ci="3" mb="0" cb="0"/><line nr="194" mi="0" ci="3" mb="0" cb="0"/><line nr="203" mi="0" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="3" mb="0" cb="0"/><line nr="225" mi="0" ci="16" mb="0" cb="0"/><line nr="229" mi="0" ci="26" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="242" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="34" mb="0" cb="0"/><line nr="254" mi="0" ci="3" mb="0" cb="2"/><line nr="255" mi="0" ci="2" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="2"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="3" mb="0" cb="0"/><line nr="260" mi="0" ci="11" mb="0" cb="2"/><line nr="261" mi="0" ci="6" mb="0" cb="2"/><line nr="262" mi="0" ci="6" mb="0" cb="2"/><line nr="263" mi="0" ci="6" mb="0" cb="2"/><line nr="264" mi="0" ci="6" mb="0" cb="2"/><line nr="265" mi="0" ci="5" mb="0" cb="2"/><line nr="271" mi="0" ci="34" mb="0" cb="0"/><line nr="276" mi="0" ci="35" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="401"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="75"/><counter type="COMPLEXITY" missed="0" covered="39"/><counter type="METHOD" missed="0" covered="19"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="λ.java"><line nr="81" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="8" mb="2" cb="2"/><line nr="106" mi="2" ci="0" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="8" mb="0" cb="2"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="9" mb="0" cb="4"/><line nr="112" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="2" mb="0" cb="0"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="0" ci="8" mb="2" cb="2"/><line nr="130" mi="2" ci="0" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="2"/><line nr="134" mi="0" ci="16" mb="0" cb="0"/><line nr="135" mi="0" ci="6" mb="0" cb="2"/><line nr="136" mi="0" ci="2" mb="0" cb="0"/><line nr="139" mi="0" ci="2" mb="0" cb="0"/><line nr="162" mi="0" ci="2" mb="0" cb="0"/><line nr="163" mi="0" ci="3" mb="0" cb="0"/><line nr="164" mi="0" ci="4" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="1" mb="0" cb="0"/><line nr="169" mi="0" ci="3" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="2"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="3" mb="0" cb="2"/><line nr="181" mi="0" ci="3" mb="0" cb="0"/><line nr="182" mi="0" ci="7" mb="0" cb="2"/><line nr="183" mi="0" ci="9" mb="1" cb="1"/><line nr="184" mi="0" ci="5" mb="1" cb="1"/><line nr="186" mi="0" ci="2" mb="0" cb="0"/><line nr="192" mi="0" ci="5" mb="0" cb="0"/><line nr="193" mi="0" ci="7" mb="0" cb="0"/><line nr="194" mi="0" ci="17" mb="0" cb="0"/><line nr="195" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="21" mb="0" cb="0"/><line nr="214" mi="3" ci="0" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="6" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="0" cb="0"/><line nr="223" mi="0" ci="7" mb="0" cb="0"/><line nr="224" mi="0" ci="3" mb="0" cb="0"/><line nr="225" mi="0" ci="7" mb="0" cb="0"/><line nr="226" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="7" covered="235"/><counter type="BRANCH" missed="6" covered="22"/><counter type="LINE" missed="3" covered="44"/><counter type="COMPLEXITY" missed="7" covered="22"/><counter type="METHOD" missed="1" covered="14"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="Tuple0.java"><line nr="32" mi="0" ci="4" mb="0" cb="0"/><line nr="37" mi="0" ci="7" mb="0" cb="0"/><line nr="40" mi="0" ci="2" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="49" mi="0" ci="2" mb="0" cb="0"/><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="2" mb="0" cb="0"/><line nr="63" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="88" mi="0" ci="7" mb="0" cb="2"/><line nr="93" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="0" covered="14"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Lazy.java"><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="60" mi="0" ci="3" mb="0" cb="2"/><line nr="61" mi="0" ci="3" mb="0" cb="0"/><line nr="63" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="78" mi="0" ci="9" mb="0" cb="0"/><line nr="90" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="2"/><line nr="107" mi="0" ci="5" mb="0" cb="0"/><line nr="109" mi="0" ci="3" mb="0" cb="0"/><line nr="110" mi="0" ci="9" mb="0" cb="0"/><line nr="111" mi="0" ci="11" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="3" mb="0" cb="2"/><line nr="126" mi="0" ci="2" mb="0" cb="0"/><line nr="128" mi="0" ci="9" mb="0" cb="2"/><line nr="134" mi="0" ci="4" mb="0" cb="0"/><line nr="135" mi="0" ci="5" mb="0" cb="0"/><line nr="141" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="3" mb="0" cb="2"/><line nr="143" mi="0" ci="2" mb="0" cb="0"/><line nr="145" mi="0" ci="8" mb="0" cb="0"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="181" mi="0" ci="15" mb="0" cb="2"/><line nr="186" mi="3" ci="0" mb="0" cb="0"/><line nr="191" mi="0" ci="3" mb="0" cb="2"/><line nr="192" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="2" mb="0" cb="0"/><line nr="199" mi="0" ci="2" mb="0" cb="0"/><line nr="211" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="3" mb="1" cb="1"/><line nr="219" mi="0" ci="3" mb="0" cb="0"/><line nr="220" mi="3" ci="0" mb="2" cb="0"/><line nr="221" mi="3" ci="0" mb="0" cb="0"/><line nr="222" mi="12" ci="0" mb="2" cb="0"/><line nr="224" mi="3" ci="0" mb="0" cb="0"/><line nr="225" mi="3" ci="0" mb="2" cb="0"/><line nr="226" mi="7" ci="0" mb="0" cb="0"/><line nr="228" mi="2" ci="0" mb="0" cb="0"/><line nr="247" mi="0" ci="2" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="249" mi="0" ci="1" mb="0" cb="0"/><line nr="253" mi="0" ci="3" mb="0" cb="2"/><line nr="254" mi="0" ci="4" mb="0" cb="0"/><line nr="255" mi="0" ci="3" mb="0" cb="2"/><line nr="256" mi="0" ci="5" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="259" mi="0" ci="8" mb="0" cb="0"/><line nr="261" mi="0" ci="3" mb="0" cb="0"/><line nr="266" mi="0" ci="2" mb="0" cb="0"/><line nr="271" mi="0" ci="7" mb="0" cb="2"/><line nr="276" mi="0" ci="4" mb="0" cb="0"/><line nr="281" mi="0" ci="17" mb="0" cb="6"/><line nr="286" mi="0" ci="9" mb="0" cb="0"/><line nr="291" mi="0" ci="20" mb="0" cb="2"/><line nr="301" mi="0" ci="3" mb="0" cb="0"/><line nr="302" mi="0" ci="2" mb="0" cb="0"/><line nr="303" mi="0" ci="1" mb="0" cb="0"/><line nr="315" mi="0" ci="5" mb="0" cb="0"/><line nr="318" mi="0" ci="2" mb="0" cb="0"/><line nr="319" mi="0" ci="1" mb="0" cb="0"/><line nr="323" mi="0" ci="2" mb="0" cb="0"/><line nr="328" mi="0" ci="5" mb="0" cb="0"/><line nr="333" mi="0" ci="2" mb="0" cb="0"/><line nr="338" mi="0" ci="5" mb="0" cb="0"/><line nr="343" mi="0" ci="2" mb="0" cb="0"/><line nr="348" mi="0" ci="7" mb="0" cb="2"/><line nr="353" mi="0" ci="2" mb="0" cb="0"/><line nr="358" mi="0" ci="10" mb="0" cb="0"/><line nr="368" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="36" covered="301"/><counter type="BRANCH" missed="7" covered="31"/><counter type="LINE" missed="8" covered="65"/><counter type="COMPLEXITY" missed="6" covered="51"/><counter type="METHOD" missed="2" covered="36"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="CheckedFunction7.java"><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="100" mi="22" ci="3" mb="0" cb="0"/><line nr="126" mi="10" ci="4" mb="0" cb="0"/><line nr="138" mi="10" ci="5" mb="0" cb="0"/><line nr="151" mi="10" ci="6" mb="0" cb="0"/><line nr="165" mi="10" ci="7" mb="0" cb="0"/><line nr="180" mi="10" ci="8" mb="0" cb="0"/><line nr="196" mi="10" ci="9" mb="0" cb="0"/><line nr="201" mi="0" ci="2" mb="0" cb="0"/><line nr="206" mi="49" ci="3" mb="0" cb="0"/><line nr="211" mi="0" ci="20" mb="0" cb="0"/><line nr="216" mi="10" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="3" mb="0" cb="2"/><line nr="222" mi="0" ci="2" mb="0" cb="0"/><line nr="224" mi="0" ci="4" mb="0" cb="0"/><line nr="225" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="3" mb="0" cb="0"/><line nr="227" mi="0" ci="7" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="23" mb="0" cb="0"/><line nr="231" mi="5" ci="3" mb="0" cb="0"/><line nr="232" mi="0" ci="2" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="12" ci="4" mb="0" cb="0"/><line nr="253" mi="0" ci="6" mb="0" cb="0"/><line nr="277" mi="0" ci="3" mb="0" cb="0"/><line nr="278" mi="0" ci="1" mb="0" cb="0"/><line nr="282" mi="0" ci="5" mb="0" cb="0"/><line nr="287" mi="0" ci="5" mb="0" cb="0"/><line nr="292" mi="0" ci="5" mb="0" cb="0"/><line nr="297" mi="0" ci="5" mb="0" cb="0"/><line nr="302" mi="0" ci="5" mb="0" cb="0"/><line nr="307" mi="0" ci="5" mb="0" cb="0"/><line nr="312" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="158" covered="180"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="17" covered="28"/><counter type="METHOD" missed="17" covered="27"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CheckedFunction1.java"><line nr="69" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="10" ci="3" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="116" mi="5" ci="3" mb="0" cb="0"/><line nr="121" mi="0" ci="2" mb="0" cb="0"/><line nr="126" mi="0" ci="3" mb="0" cb="2"/><line nr="127" mi="0" ci="2" mb="0" cb="0"/><line nr="129" mi="0" ci="13" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="8" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="0" cb="2"/><line nr="134" mi="0" ci="3" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="16" mb="0" cb="0"/><line nr="139" mi="5" ci="3" mb="0" cb="0"/><line nr="140" mi="0" ci="2" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="6" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="4" mb="0" cb="0"/><line nr="171" mi="6" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="6" mb="0" cb="0"/><line nr="194" mi="0" ci="3" mb="0" cb="0"/><line nr="195" mi="0" ci="1" mb="0" cb="0"/><line nr="199" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="32" covered="113"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="5" covered="20"/><counter type="METHOD" missed="5" covered="18"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Tuple5.java"><line nr="68" mi="0" ci="2" mb="0" cb="0"/><line nr="69" mi="0" ci="3" mb="0" cb="0"/><line nr="70" mi="0" ci="3" mb="0" cb="0"/><line nr="71" mi="0" ci="3" mb="0" cb="0"/><line nr="72" mi="0" ci="3" mb="0" cb="0"/><line nr="73" mi="0" ci="3" mb="0" cb="0"/><line nr="74" mi="0" ci="1" mb="0" cb="0"/><line nr="77" mi="0" ci="9" mb="0" cb="0"/><line nr="78" mi="0" ci="7" mb="0" cb="0"/><line nr="79" mi="0" ci="2" mb="0" cb="2"/><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="0" ci="7" mb="0" cb="0"/><line nr="84" mi="0" ci="2" mb="0" cb="2"/><line nr="85" mi="0" ci="2" mb="0" cb="0"/><line nr="88" mi="0" ci="7" mb="0" cb="0"/><line nr="89" mi="0" ci="2" mb="0" cb="2"/><line nr="90" mi="0" ci="2" mb="0" cb="0"/><line nr="93" mi="0" ci="7" mb="0" cb="0"/><line nr="94" mi="0" ci="2" mb="0" cb="2"/><line nr="95" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="0" ci="7" mb="0" cb="0"/><line nr="99" mi="0" ci="2" mb="0" cb="2"/><line nr="100" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="113" mi="0" ci="7" mb="0" cb="0"/><line nr="114" mi="0" ci="2" mb="0" cb="2"/><line nr="115" mi="0" ci="2" mb="0" cb="0"/><line nr="118" mi="0" ci="7" mb="0" cb="0"/><line nr="119" mi="0" ci="2" mb="0" cb="2"/><line nr="120" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="7" mb="0" cb="0"/><line nr="124" mi="0" ci="2" mb="0" cb="2"/><line nr="125" mi="0" ci="2" mb="0" cb="0"/><line nr="128" mi="0" ci="7" mb="0" cb="0"/><line nr="129" mi="0" ci="2" mb="0" cb="2"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="133" mi="0" ci="7" mb="0" cb="0"/><line nr="134" mi="0" ci="2" mb="0" cb="2"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="139" mi="0" ci="2" mb="0" cb="0"/><line nr="144" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="3" mb="0" cb="0"/><line nr="167" mi="0" ci="3" mb="0" cb="0"/><line nr="176" mi="0" ci="3" mb="0" cb="0"/><line nr="185" mi="0" ci="3" mb="0" cb="0"/><line nr="194" mi="0" ci="3" mb="0" cb="0"/><line nr="198" mi="0" ci="14" mb="0" cb="0"/><line nr="202" mi="0" ci="22" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="4" mb="0" cb="0"/><line nr="220" mi="0" ci="29" mb="0" cb="0"/><line nr="227" mi="0" ci="3" mb="0" cb="2"/><line nr="228" mi="0" ci="2" mb="0" cb="0"/><line nr="229" mi="0" ci="3" mb="0" cb="2"/><line nr="230" mi="0" ci="2" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="11" mb="0" cb="2"/><line nr="234" mi="0" ci="6" mb="0" cb="2"/><line nr="235" mi="0" ci="6" mb="0" cb="2"/><line nr="236" mi="0" ci="6" mb="0" cb="2"/><line nr="237" mi="0" ci="5" mb="0" cb="2"/><line nr="243" mi="0" ci="29" mb="0" cb="0"/><line nr="248" mi="0" ci="30" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="345"/><counter type="BRANCH" missed="0" covered="34"/><counter type="LINE" missed="0" covered="66"/><counter type="COMPLEXITY" missed="0" covered="35"/><counter type="METHOD" missed="0" covered="18"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckedFunction8.java"><line nr="83" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="24" ci="3" mb="0" cb="0"/><line nr="130" mi="11" ci="4" mb="0" cb="0"/><line nr="142" mi="11" ci="5" mb="0" cb="0"/><line nr="155" mi="11" ci="6" mb="0" cb="0"/><line nr="169" mi="11" ci="7" mb="0" cb="0"/><line nr="184" mi="11" ci="8" mb="0" cb="0"/><line nr="200" mi="11" ci="9" mb="0" cb="0"/><line nr="217" mi="11" ci="10" mb="0" cb="0"/><line nr="222" mi="0" ci="2" mb="0" cb="0"/><line nr="227" mi="60" ci="3" mb="0" cb="0"/><line nr="232" mi="0" ci="22" mb="0" cb="0"/><line nr="237" mi="11" ci="3" mb="0" cb="0"/><line nr="242" mi="0" ci="3" mb="0" cb="2"/><line nr="243" mi="0" ci="2" mb="0" cb="0"/><line nr="245" mi="0" ci="4" mb="0" cb="0"/><line nr="246" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="0"/><line nr="248" mi="0" ci="7" mb="0" cb="0"/><line nr="250" mi="0" ci="4" mb="0" cb="0"/><line nr="251" mi="0" ci="24" mb="0" cb="0"/><line nr="252" mi="5" ci="3" mb="0" cb="0"/><line nr="253" mi="0" ci="2" mb="0" cb="0"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="269" mi="13" ci="4" mb="0" cb="0"/><line nr="274" mi="0" ci="6" mb="0" cb="0"/><line nr="299" mi="0" ci="3" mb="0" cb="0"/><line nr="300" mi="0" ci="1" mb="0" cb="0"/><line nr="304" mi="0" ci="5" mb="0" cb="0"/><line nr="309" mi="0" ci="5" mb="0" cb="0"/><line nr="314" mi="0" ci="5" mb="0" cb="0"/><line nr="319" mi="0" ci="5" mb="0" cb="0"/><line nr="324" mi="0" ci="5" mb="0" cb="0"/><line nr="329" mi="0" ci="5" mb="0" cb="0"/><line nr="334" mi="0" ci="5" mb="0" cb="0"/><line nr="339" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="190" covered="198"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="36"/><counter type="COMPLEXITY" missed="19" covered="30"/><counter type="METHOD" missed="19" covered="29"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CheckedFunction2.java"><line nr="71" mi="0" ci="2" mb="0" cb="0"/><line nr="85" mi="12" ci="3" mb="0" cb="0"/><line nr="106" mi="5" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="116" mi="9" ci="3" mb="0" cb="0"/><line nr="121" mi="0" ci="10" mb="0" cb="0"/><line nr="126" mi="5" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="3" mb="0" cb="2"/><line nr="132" mi="0" ci="2" mb="0" cb="0"/><line nr="134" mi="0" ci="4" mb="0" cb="0"/><line nr="135" mi="0" ci="4" mb="0" cb="0"/><line nr="136" mi="0" ci="3" mb="0" cb="0"/><line nr="137" mi="0" ci="7" mb="0" cb="0"/><line nr="139" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="0" ci="18" mb="0" cb="0"/><line nr="141" mi="5" ci="3" mb="0" cb="0"/><line nr="142" mi="0" ci="2" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="7" ci="4" mb="0" cb="0"/><line nr="163" mi="0" ci="6" mb="0" cb="0"/><line nr="182" mi="0" ci="3" mb="0" cb="0"/><line nr="183" mi="0" ci="1" mb="0" cb="0"/><line nr="187" mi="0" ci="5" mb="0" cb="0"/><line nr="192" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="43" covered="105"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="7" covered="18"/><counter type="METHOD" missed="7" covered="17"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Function3.java"><line nr="74" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="14" ci="3" mb="0" cb="0"/><line nr="111" mi="6" ci="4" mb="0" cb="0"/><line nr="123" mi="6" ci="5" mb="0" cb="0"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="133" mi="0" ci="18" mb="0" cb="0"/><line nr="138" mi="0" ci="12" mb="0" cb="0"/><line nr="143" mi="6" ci="3" mb="0" cb="0"/><line nr="148" mi="0" ci="3" mb="0" cb="2"/><line nr="149" mi="0" ci="2" mb="0" cb="0"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="0" ci="3" mb="0" cb="0"/><line nr="154" mi="0" ci="7" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="12" mb="0" cb="0"/><line nr="158" mi="5" ci="3" mb="0" cb="0"/><line nr="159" mi="0" ci="2" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="8" ci="4" mb="0" cb="0"/><line nr="180" mi="0" ci="6" mb="0" cb="0"/><line nr="200" mi="0" ci="3" mb="0" cb="0"/><line nr="201" mi="0" ci="1" mb="0" cb="0"/><line nr="205" mi="0" ci="5" mb="0" cb="0"/><line nr="210" mi="0" ci="5" mb="0" cb="0"/><line nr="215" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="45" covered="126"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="26"/><counter type="COMPLEXITY" missed="6" covered="21"/><counter type="METHOD" missed="6" covered="20"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Value.java"><line nr="161" mi="0" ci="9" mb="0" cb="0"/><line nr="176" mi="0" ci="3" mb="0" cb="0"/><line nr="177" mi="0" ci="3" mb="0" cb="0"/><line nr="178" mi="0" ci="6" mb="0" cb="4"/><line nr="179" mi="0" ci="7" mb="0" cb="2"/><line nr="180" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="0" ci="10" mb="0" cb="4"/><line nr="214" mi="0" ci="3" mb="1" cb="1"/><line nr="215" mi="2" ci="0" mb="0" cb="0"/><line nr="216" mi="0" ci="3" mb="0" cb="2"/><line nr="217" mi="0" ci="3" mb="0" cb="0"/><line nr="218" mi="0" ci="7" mb="0" cb="0"/><line nr="219" mi="0" ci="3" mb="0" cb="2"/><line nr="220" mi="0" ci="5" mb="0" cb="0"/><line nr="221" mi="0" ci="3" mb="0" cb="2"/><line nr="222" mi="0" ci="5" mb="0" cb="0"/><line nr="224" mi="0" ci="4" mb="0" cb="0"/><line nr="227" mi="0" ci="3" mb="1" cb="1"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="2" ci="0" mb="0" cb="0"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="244" mi="0" ci="9" mb="0" cb="2"/><line nr="245" mi="0" ci="4" mb="0" cb="2"/><line nr="246" mi="0" ci="2" mb="0" cb="0"/><line nr="248" mi="0" ci="1" mb="0" cb="0"/><line nr="249" mi="0" ci="2" mb="0" cb="0"/><line nr="303" mi="0" ci="4" mb="0" cb="0"/><line nr="304" mi="0" ci="9" mb="0" cb="2"/><line nr="314" mi="0" ci="4" mb="0" cb="0"/><line nr="315" mi="0" ci="9" mb="0" cb="2"/><line nr="316" mi="0" ci="3" mb="0" cb="0"/><line nr="317" mi="0" ci="1" mb="0" cb="0"/><line nr="318" mi="0" ci="1" mb="0" cb="0"/><line nr="334" mi="0" ci="9" mb="0" cb="2"/><line nr="346" mi="0" ci="7" mb="0" cb="2"/><line nr="358" mi="0" ci="9" mb="0" cb="2"/><line nr="370" mi="0" ci="7" mb="0" cb="2"/><line nr="382" mi="0" ci="9" mb="0" cb="2"/><line nr="398" mi="0" ci="7" mb="0" cb="2"/><line nr="415" mi="0" ci="8" mb="0" cb="2"/><line nr="426" mi="0" ci="4" mb="0" cb="0"/><line nr="427" mi="0" ci="9" mb="0" cb="2"/><line nr="440" mi="0" ci="4" mb="0" cb="0"/><line nr="441" mi="0" ci="3" mb="0" cb="2"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="444" mi="0" ci="3" mb="0" cb="0"/><line nr="457" mi="0" ci="4" mb="0" cb="0"/><line nr="458" mi="0" ci="10" mb="0" cb="2"/><line nr="533" mi="0" ci="4" mb="0" cb="0"/><line nr="534" mi="0" ci="11" mb="0" cb="2"/><line nr="549" mi="4" ci="0" mb="0" cb="0"/><line nr="550" mi="11" ci="0" mb="2" cb="0"/><line nr="563" mi="0" ci="4" mb="0" cb="0"/><line nr="564" mi="0" ci="3" mb="0" cb="0"/><line nr="577" mi="0" ci="4" mb="0" cb="0"/><line nr="578" mi="0" ci="10" mb="0" cb="2"/><line nr="591" mi="0" ci="4" mb="0" cb="0"/><line nr="592" mi="0" ci="3" mb="0" cb="0"/><line nr="605" mi="0" ci="4" mb="0" cb="0"/><line nr="606" mi="0" ci="10" mb="0" cb="2"/><line nr="645" mi="0" ci="7" mb="0" cb="0"/><line nr="654" mi="0" ci="4" mb="0" cb="0"/><line nr="663" mi="0" ci="4" mb="0" cb="0"/><line nr="675" mi="0" ci="4" mb="0" cb="0"/><line nr="676" mi="0" ci="3" mb="0" cb="0"/><line nr="677" mi="0" ci="9" mb="0" cb="0"/><line nr="686" mi="0" ci="7" mb="0" cb="0"/><line nr="698" mi="0" ci="4" mb="0" cb="0"/><line nr="699" mi="0" ci="4" mb="0" cb="0"/><line nr="700" mi="0" ci="3" mb="0" cb="2"/><line nr="701" mi="0" ci="3" mb="1" cb="1"/><line nr="702" mi="6" ci="0" mb="0" cb="0"/><line nr="703" mi="7" ci="0" mb="0" cb="0"/><line nr="704" mi="1" ci="0" mb="0" cb="0"/><line nr="705" mi="0" ci="9" mb="0" cb="2"/><line nr="706" mi="0" ci="5" mb="0" cb="0"/><line nr="707" mi="0" ci="7" mb="0" cb="0"/><line nr="708" mi="0" ci="1" mb="0" cb="0"/><line nr="711" mi="0" ci="2" mb="0" cb="0"/><line nr="720" mi="0" ci="9" mb="0" cb="2"/><line nr="729" mi="0" ci="7" mb="0" cb="0"/><line nr="738" mi="0" ci="5" mb="0" cb="0"/><line nr="747" mi="0" ci="3" mb="1" cb="1"/><line nr="748" mi="3" ci="0" mb="0" cb="0"/><line nr="750" mi="0" ci="9" mb="0" cb="2"/><line nr="764" mi="0" ci="4" mb="0" cb="0"/><line nr="765" mi="0" ci="11" mb="0" cb="2"/><line nr="778" mi="0" ci="10" mb="0" cb="2"/><line nr="787" mi="0" ci="7" mb="0" cb="0"/><line nr="799" mi="0" ci="4" mb="0" cb="0"/><line nr="800" mi="0" ci="3" mb="1" cb="1"/><line nr="801" mi="2" ci="0" mb="0" cb="0"/><line nr="802" mi="0" ci="3" mb="1" cb="1"/><line nr="803" mi="7" ci="0" mb="0" cb="0"/><line nr="805" mi="0" ci="6" mb="0" cb="0"/><line nr="815" mi="0" ci="3" mb="0" cb="2"/><line nr="816" mi="0" ci="3" mb="0" cb="0"/><line nr="818" mi="0" ci="9" mb="0" cb="2"/><line nr="828" mi="0" ci="7" mb="0" cb="0"/><line nr="841" mi="0" ci="4" mb="0" cb="0"/><line nr="842" mi="0" ci="11" mb="0" cb="2"/><line nr="855" mi="0" ci="10" mb="0" cb="2"/><line nr="864" mi="0" ci="7" mb="0" cb="0"/><line nr="873" mi="0" ci="7" mb="0" cb="0"/><line nr="882" mi="0" ci="7" mb="0" cb="0"/><line nr="894" mi="0" ci="3" mb="1" cb="1"/><line nr="895" mi="3" ci="0" mb="0" cb="0"/><line nr="897" mi="0" ci="4" mb="0" cb="0"/><line nr="911" mi="0" ci="4" mb="0" cb="0"/><line nr="912" mi="0" ci="11" mb="0" cb="2"/><line nr="921" mi="0" ci="7" mb="0" cb="0"/><line nr="930" mi="0" ci="7" mb="0" cb="0"/><line nr="943" mi="0" ci="9" mb="0" cb="2"/><line nr="944" mi="0" ci="4" mb="0" cb="0"/><line nr="945" mi="0" ci="3" mb="0" cb="2"/><line nr="946" mi="0" ci="5" mb="0" cb="0"/><line nr="948" mi="0" ci="1" mb="0" cb="0"/><line nr="949" mi="0" ci="1" mb="0" cb="0"/><line nr="959" mi="0" ci="9" mb="0" cb="2"/><line nr="960" mi="0" ci="4" mb="0" cb="0"/><line nr="961" mi="0" ci="3" mb="0" cb="2"/><line nr="962" mi="0" ci="5" mb="0" cb="0"/><line nr="964" mi="0" ci="1" mb="0" cb="0"/><line nr="965" mi="0" ci="1" mb="0" cb="0"/><line nr="974" mi="0" ci="3" mb="0" cb="0"/><line nr="975" mi="0" ci="1" mb="0" cb="0"/><line nr="984" mi="0" ci="3" mb="0" cb="0"/><line nr="985" mi="0" ci="1" mb="0" cb="0"/><line nr="993" mi="0" ci="3" mb="0" cb="2"/><line nr="994" mi="0" ci="2" mb="0" cb="0"/><line nr="995" mi="0" ci="3" mb="1" cb="1"/><line nr="996" mi="6" ci="0" mb="0" cb="0"/><line nr="998" mi="0" ci="5" mb="0" cb="0"/><line nr="1003" mi="0" ci="3" mb="0" cb="2"/><line nr="1004" mi="0" ci="3" mb="1" cb="1"/><line nr="1005" mi="6" ci="0" mb="0" cb="0"/><line nr="1007" mi="0" ci="7" mb="0" cb="0"/><line nr="1010" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="60" covered="637"/><counter type="BRANCH" missed="11" covered="93"/><counter type="LINE" missed="13" covered="126"/><counter type="COMPLEXITY" missed="11" covered="96"/><counter type="METHOD" missed="1" covered="54"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Tuple4.java"><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="62" mi="0" ci="3" mb="0" cb="0"/><line nr="63" mi="0" ci="3" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="65" mi="0" ci="3" mb="0" cb="0"/><line nr="66" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="8" mb="0" cb="0"/><line nr="70" mi="0" ci="7" mb="0" cb="0"/><line nr="71" mi="0" ci="2" mb="0" cb="2"/><line nr="72" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="2"/><line nr="77" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="7" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="2"/><line nr="82" mi="0" ci="2" mb="0" cb="0"/><line nr="85" mi="0" ci="7" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="2"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="91" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="0" ci="2" mb="0" cb="0"/><line nr="100" mi="0" ci="7" mb="0" cb="0"/><line nr="101" mi="0" ci="2" mb="0" cb="2"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="105" mi="0" ci="7" mb="0" cb="0"/><line nr="106" mi="0" ci="2" mb="0" cb="2"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="7" mb="0" cb="0"/><line nr="111" mi="0" ci="2" mb="0" cb="2"/><line nr="112" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="7" mb="0" cb="0"/><line nr="116" mi="0" ci="2" mb="0" cb="2"/><line nr="117" mi="0" ci="2" mb="0" cb="0"/><line nr="121" mi="0" ci="2" mb="0" cb="0"/><line nr="126" mi="0" ci="2" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="0" ci="3" mb="0" cb="0"/><line nr="149" mi="0" ci="3" mb="0" cb="0"/><line nr="158" mi="0" ci="3" mb="0" cb="0"/><line nr="167" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="0" ci="12" mb="0" cb="0"/><line nr="175" mi="0" ci="18" mb="0" cb="0"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="188" mi="0" ci="4" mb="0" cb="0"/><line nr="193" mi="0" ci="24" mb="0" cb="0"/><line nr="200" mi="0" ci="3" mb="0" cb="2"/><line nr="201" mi="0" ci="2" mb="0" cb="0"/><line nr="202" mi="0" ci="3" mb="0" cb="2"/><line nr="203" mi="0" ci="2" mb="0" cb="0"/><line nr="205" mi="0" ci="3" mb="0" cb="0"/><line nr="206" mi="0" ci="11" mb="0" cb="2"/><line nr="207" mi="0" ci="6" mb="0" cb="2"/><line nr="208" mi="0" ci="6" mb="0" cb="2"/><line nr="209" mi="0" ci="5" mb="0" cb="2"/><line nr="215" mi="0" ci="24" mb="0" cb="0"/><line nr="220" mi="0" ci="25" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="289"/><counter type="BRANCH" missed="0" covered="28"/><counter type="LINE" missed="0" covered="57"/><counter type="COMPLEXITY" missed="0" covered="31"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Tuple2.java"><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="50" mi="0" ci="3" mb="0" cb="0"/><line nr="51" mi="0" ci="1" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="55" mi="0" ci="7" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="2"/><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="60" mi="0" ci="7" mb="0" cb="0"/><line nr="61" mi="0" ci="2" mb="0" cb="2"/><line nr="62" mi="0" ci="2" mb="0" cb="0"/><line nr="66" mi="0" ci="2" mb="0" cb="0"/><line nr="72" mi="0" ci="2" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="2"/><line nr="77" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="7" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="2"/><line nr="82" mi="0" ci="2" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="0"/><line nr="91" mi="0" ci="2" mb="0" cb="0"/><line nr="96" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="3" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="8" mb="0" cb="0"/><line nr="122" mi="0" ci="10" mb="0" cb="0"/><line nr="134" mi="0" ci="4" mb="0" cb="0"/><line nr="135" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="0" ci="14" mb="0" cb="0"/><line nr="147" mi="0" ci="3" mb="0" cb="2"/><line nr="148" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="3" mb="0" cb="2"/><line nr="150" mi="0" ci="2" mb="0" cb="0"/><line nr="152" mi="0" ci="3" mb="0" cb="0"/><line nr="153" mi="0" ci="11" mb="0" cb="2"/><line nr="154" mi="0" ci="5" mb="0" cb="2"/><line nr="160" mi="0" ci="14" mb="0" cb="0"/><line nr="165" mi="0" ci="15" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="177"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="23"/><counter type="METHOD" missed="0" covered="15"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Function5.java"><line nr="78" mi="0" ci="2" mb="0" cb="0"/><line nr="95" mi="18" ci="3" mb="0" cb="0"/><line nr="119" mi="8" ci="4" mb="0" cb="0"/><line nr="131" mi="8" ci="5" mb="0" cb="0"/><line nr="144" mi="8" ci="6" mb="0" cb="0"/><line nr="158" mi="8" ci="7" mb="0" cb="0"/><line nr="163" mi="0" ci="2" mb="0" cb="0"/><line nr="168" mi="0" ci="33" mb="0" cb="0"/><line nr="173" mi="0" ci="16" mb="0" cb="0"/><line nr="178" mi="8" ci="3" mb="0" cb="0"/><line nr="183" mi="0" ci="3" mb="0" cb="2"/><line nr="184" mi="0" ci="2" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="188" mi="0" ci="3" mb="0" cb="0"/><line nr="189" mi="0" ci="7" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="14" mb="0" cb="0"/><line nr="193" mi="5" ci="3" mb="0" cb="0"/><line nr="194" mi="0" ci="2" mb="0" cb="0"/><line nr="209" mi="0" ci="4" mb="0" cb="0"/><line nr="210" mi="10" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="6" mb="0" cb="0"/><line nr="237" mi="0" ci="3" mb="0" cb="0"/><line nr="238" mi="0" ci="1" mb="0" cb="0"/><line nr="242" mi="0" ci="5" mb="0" cb="0"/><line nr="247" mi="0" ci="5" mb="0" cb="0"/><line nr="252" mi="0" ci="5" mb="0" cb="0"/><line nr="257" mi="0" ci="5" mb="0" cb="0"/><line nr="262" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="73" covered="170"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="30"/><counter type="COMPLEXITY" missed="8" covered="27"/><counter type="METHOD" missed="8" covered="26"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Function8.java"><line nr="84" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="24" ci="3" mb="0" cb="0"/><line nr="131" mi="11" ci="4" mb="0" cb="0"/><line nr="143" mi="11" ci="5" mb="0" cb="0"/><line nr="156" mi="11" ci="6" mb="0" cb="0"/><line nr="170" mi="11" ci="7" mb="0" cb="0"/><line nr="185" mi="11" ci="8" mb="0" cb="0"/><line nr="201" mi="11" ci="9" mb="0" cb="0"/><line nr="218" mi="11" ci="10" mb="0" cb="0"/><line nr="223" mi="0" ci="2" mb="0" cb="0"/><line nr="228" mi="0" ci="63" mb="0" cb="0"/><line nr="233" mi="0" ci="22" mb="0" cb="0"/><line nr="238" mi="11" ci="3" mb="0" cb="0"/><line nr="243" mi="0" ci="3" mb="0" cb="2"/><line nr="244" mi="0" ci="2" mb="0" cb="0"/><line nr="246" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="249" mi="0" ci="7" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="17" mb="0" cb="0"/><line nr="253" mi="5" ci="3" mb="0" cb="0"/><line nr="254" mi="0" ci="2" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="13" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="6" mb="0" cb="0"/><line nr="300" mi="0" ci="3" mb="0" cb="0"/><line nr="301" mi="0" ci="1" mb="0" cb="0"/><line nr="305" mi="0" ci="5" mb="0" cb="0"/><line nr="310" mi="0" ci="5" mb="0" cb="0"/><line nr="315" mi="0" ci="5" mb="0" cb="0"/><line nr="320" mi="0" ci="5" mb="0" cb="0"/><line nr="325" mi="0" ci="5" mb="0" cb="0"/><line nr="330" mi="0" ci="5" mb="0" cb="0"/><line nr="335" mi="0" ci="5" mb="0" cb="0"/><line nr="340" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="130" covered="251"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="36"/><counter type="COMPLEXITY" missed="11" covered="36"/><counter type="METHOD" missed="11" covered="35"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Function2.java"><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="87" mi="12" ci="3" mb="0" cb="0"/><line nr="108" mi="5" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="2" mb="0" cb="0"/><line nr="118" mi="0" ci="12" mb="0" cb="0"/><line nr="123" mi="0" ci="10" mb="0" cb="0"/><line nr="128" mi="5" ci="3" mb="0" cb="0"/><line nr="133" mi="0" ci="3" mb="0" cb="2"/><line nr="134" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="139" mi="0" ci="7" mb="0" cb="0"/><line nr="141" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="11" mb="0" cb="0"/><line nr="143" mi="5" ci="3" mb="0" cb="0"/><line nr="144" mi="0" ci="2" mb="0" cb="0"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="7" ci="4" mb="0" cb="0"/><line nr="165" mi="0" ci="6" mb="0" cb="0"/><line nr="184" mi="0" ci="3" mb="0" cb="0"/><line nr="185" mi="0" ci="1" mb="0" cb="0"/><line nr="189" mi="0" ci="5" mb="0" cb="0"/><line nr="194" mi="0" ci="5" mb="0" cb="0"/><counter type="INSTRUCTION" missed="34" covered="107"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="5" covered="18"/><counter type="METHOD" missed="5" covered="17"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="1501" covered="6383"/><counter type="BRANCH" missed="24" covered="434"/><counter type="LINE" missed="24" covered="1253"/><counter type="COMPLEXITY" missed="189" covered="873"/><counter type="METHOD" missed="169" covered="664"/><counter type="CLASS" missed="0" covered="54"/></package><package name="javaslang/control"><class name="javaslang/control/Match$MatchFunction$WhenUntyped"><method name="&lt;init&gt;" desc="(Ljava/util/function/Predicate;)V" line="189"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchFunction$Then;" line="194"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$Then;" line="199"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Then;" line="203"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="208"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/lang/Runnable;)Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="217"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Then;" line="225"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$4" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="227"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenRun$3" desc="(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/lang/Object;" line="219"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenRun$2" desc="(Ljava/util/function/Consumer;Ljava/lang/Object;)Ljava/lang/Void;" line="210"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$1" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="204"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="199"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="102"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Try$CheckedPredicate"><method name="negate" desc="()Ljavaslang/control/Try$CheckedPredicate;" line="576"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$negate$0" desc="(Ljava/lang/Object;)Z" line="576"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/control/Match"><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Of;" line="79"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="as" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$Then;" line="90"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljavaslang/control/Match$MatchFunction$WhenUntyped;" line="95"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIs" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$WhenUntyped;" line="100"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIsIn" desc="([Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$WhenUntyped;" line="106"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenType" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$WhenUntyped;" line="111"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenTypeIn" desc="([Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$WhenUntyped;" line="117"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenApplicable" desc="(Ljavaslang/Function1;)Ljavaslang/control/Match$MatchFunction$WhenApplicable;" line="122"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="127"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="131"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="136"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseRun" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchFunction$Effect$Otherwise;" line="141"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseRun" desc="(Ljava/lang/Runnable;)Ljavaslang/control/Match$MatchFunction$Effect$Otherwise;" line="149"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="157"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwiseThrow$4" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="159"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwiseRun$3" desc="(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/lang/Void;" line="151"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwiseRun$2" desc="(Ljava/util/function/Consumer;Ljava/lang/Object;)Ljava/lang/Void;" line="143"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwise$1" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="137"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwise$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="127"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="163"/><counter type="LINE" missed="0" covered="33"/><counter type="COMPLEXITY" missed="0" covered="19"/><counter type="METHOD" missed="0" covered="19"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$SerializableConsumer"><method name="arity" desc="()I" line="1178"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="curried" desc="()Ljavaslang/control/Match$SerializableConsumer;" line="1183"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tupled" desc="()Ljavaslang/control/Match$SerializableConsumer;" line="1188"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reversed" desc="()Ljavaslang/control/Match$SerializableConsumer;" line="1193"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="memoized" desc="()Ljavaslang/control/Match$SerializableConsumer;" line="1198"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getType" desc="()Ljavaslang/control/Match$SerializableConsumer$Type;" line="1210"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$memoized$ae7e008f$1" desc="(Ljava/lang/Object;)V" line="1201"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="1202"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$2d557075$1" desc="(Ljavaslang/Tuple1;)V" line="1188"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/control/Either$Right"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="950"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="956"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getLeft" desc="()Ljava/lang/Object;" line="961"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLeft" desc="()Z" line="966"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isRight" desc="()Z" line="971"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="976"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="981"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="986"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="991"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="51"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="2" covered="10"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Try$NonFatalException"><method name="&lt;init&gt;" desc="(Ljava/lang/Throwable;)V" line="805"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/lang/Throwable;)Ljavaslang/control/Try$NonFatalException;" line="821"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="2" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="847"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="853"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="858"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="83"/><counter type="BRANCH" missed="5" covered="15"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="5" covered="10"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Either$Left"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="886"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="892"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getLeft" desc="()Ljava/lang/Object;" line="897"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLeft" desc="()Z" line="902"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isRight" desc="()Z" line="907"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="912"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="917"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="922"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="927"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="51"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="2" covered="10"/><counter type="METHOD" missed="1" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$Otherwise"><method name="&lt;init&gt;" desc="(Ljava/util/function/Supplier;)V" line="950"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Match$MatchMonad;" line="956"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad;" line="963"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Match$MatchMonad;" line="976"><counter type="INSTRUCTION" missed="44" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="8" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad;" line="995"><counter type="INSTRUCTION" missed="2" covered="15"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchMonad;" line="1005"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Ljava/lang/Object;" line="1012"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="1017"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="1022"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$2" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="999"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unit$1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="985"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$filter$0" desc="(Ljava/util/function/Predicate;)Ljava/lang/Object;" line="957"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="63" covered="76"/><counter type="BRANCH" missed="9" covered="3"/><counter type="LINE" missed="14" covered="15"/><counter type="COMPLEXITY" missed="9" covered="9"/><counter type="METHOD" missed="3" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Then"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/List;)V" line="270"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="277"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljavaslang/control/Match$MatchFunction$When;" line="284"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIs" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$When;" line="289"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIsIn" desc="([Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$When;" line="294"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenType" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$When;" line="299"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenTypeIn" desc="([Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$When;" line="305"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenApplicable" desc="(Ljavaslang/Function1;)Ljavaslang/control/Match$MatchFunction$WhenApplicable;" line="310"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="315"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="319"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="324"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Otherwise;" line="329"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwiseThrow$5" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="331"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwise$4" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="325"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwise$3" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="315"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$2" desc="(Ljava/lang/Object;)Ljavaslang/control/MatchError;" line="280"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Ljava/lang/Object;" line="279"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Z" line="278"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="161"/><counter type="LINE" missed="0" covered="26"/><counter type="COMPLEXITY" missed="0" covered="18"/><counter type="METHOD" missed="0" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Effect$Otherwise"><method name="&lt;init&gt;" desc="(Ljava/util/function/Function;Ljavaslang/collection/List;)V" line="538"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Ljava/lang/Object;)V" line="545"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$accept$2" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="548"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$accept$1" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Ljava/lang/Object;" line="547"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$accept$0" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Z" line="546"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Either$LeftProjection"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Either;)V" line="385"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/algebra/BiFunctor;" line="391"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="()Z" line="396"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="406"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Ljava/lang/Object;" line="417"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElse" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="433"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseGet" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="444"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseRun" desc="(Ljava/util/function/Consumer;)V" line="458"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseThrow" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="474"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toEither" desc="()Ljavaslang/control/Either;" line="488"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="500"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="511"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either$LeftProjection;" line="526"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either$LeftProjection;" line="543"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="553"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Either$LeftProjection;" line="564"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="580"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Either$LeftProjection;" line="587"><counter type="INSTRUCTION" missed="35" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="7" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="602"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="611"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="616"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="621"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="626"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="64" covered="215"/><counter type="BRANCH" missed="8" covered="28"/><counter type="LINE" missed="14" covered="47"/><counter type="COMPLEXITY" missed="10" covered="31"/><counter type="METHOD" missed="5" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$Effect$When"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;ZZ)V" line="1034"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchMonad$Effect$Then;" line="1042"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/lang/Runnable;)Ljavaslang/control/Match$MatchMonad$Effect$Then;" line="1051"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenRun$0" desc="(Ljava/lang/Runnable;Ljava/lang/Object;)V" line="1052"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="3" covered="56"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="1" covered="8"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Invalid"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="531"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isValid" desc="()Z" line="537"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInvalid" desc="()Z" line="542"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="547"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getError" desc="()Ljava/lang/Object;" line="552"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="557"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="562"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="567"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="1" covered="10"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Try$Failure"><method name="&lt;init&gt;" desc="(Ljava/lang/Throwable;)V" line="699"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="707"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getCause" desc="()Ljava/lang/Throwable;" line="712"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="717"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFailure" desc="()Z" line="722"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSuccess" desc="()Z" line="727"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="732"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="737"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="742"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="747"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="64"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="1" covered="12"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$SerializableConsumer$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Match$SerializableConsumer;)V" line="1218"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="1223"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/control/Try$Success"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="629"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="635"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getCause" desc="()Ljava/lang/Throwable;" line="640"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="645"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFailure" desc="()Z" line="650"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSuccess" desc="()Z" line="655"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="660"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="665"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="670"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="675"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="1" covered="12"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation"><method name="valid" desc="(Ljava/lang/Object;)Ljavaslang/control/Validation;" line="70"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invalid" desc="(Ljava/lang/Object;)Ljavaslang/control/Validation;" line="84"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder;" line="100"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder3;" line="119"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder4;" line="141"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder5;" line="166"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder6;" line="194"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder7;" line="225"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder8;" line="259"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="forEach" desc="(Ljava/util/function/Consumer;)V" line="317"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fold" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;" line="341"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="swap" desc="()Ljavaslang/control/Validation;" line="359"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Validation;" line="370"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/control/Validation;" line="395"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leftMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Validation;" line="416"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/algebra/Kind2;)Ljavaslang/control/Validation;" line="428"><counter type="INSTRUCTION" missed="0" covered="63"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="0" covered="15"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder;" line="457"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="417"/><counter type="BRANCH" missed="2" covered="22"/><counter type="LINE" missed="0" covered="95"/><counter type="COMPLEXITY" missed="2" covered="27"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Effect$WhenApplicable"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Match$SerializableConsumer;Ljavaslang/collection/List;)V" line="512"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="thenRun" desc="()Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="519"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="526"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$thenThrow$3" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="528"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$thenThrow$2" desc="(Ljavaslang/control/Match$SerializableConsumer;Ljava/lang/Object;)Z" line="527"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$thenRun$1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="520"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$thenRun$0" desc="(Ljavaslang/control/Match$SerializableConsumer;Ljava/lang/Object;)Z" line="519"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="81" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/control/Try$FatalException"><method name="&lt;init&gt;" desc="(Ljava/lang/Throwable;)V" line="762"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="773"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="779"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="784"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="38"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$Of"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="611"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="as" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$Then;" line="616"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljavaslang/control/Match$MatchMonad$WhenUntyped;" line="621"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIs" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$WhenUntyped;" line="627"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIsIn" desc="([Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$WhenUntyped;" line="633"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenType" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$WhenUntyped;" line="639"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenTypeIn" desc="([Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$WhenUntyped;" line="646"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenApplicable" desc="(Ljavaslang/Function1;)Ljavaslang/control/Match$MatchMonad$WhenApplicable;" line="652"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="657"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="otherwise" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="661"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="otherwise" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="666"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="otherwiseRun" desc="(Ljava/util/function/Consumer;)V" line="671"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseRun" desc="(Ljava/lang/Runnable;)V" line="676"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="681"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$otherwiseThrow$2" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="683"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$otherwise$1" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="662"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$otherwise$0" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="657"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="133"/><counter type="LINE" missed="8" covered="27"/><counter type="COMPLEXITY" missed="7" covered="10"/><counter type="METHOD" missed="7" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$SerializablePredicate$Type"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Match$SerializablePredicate;)V" line="1283"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parameterType1" desc="()Ljava/lang/Class;" line="1288"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder7"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="702"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function7;)Ljavaslang/control/Validation;" line="713"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder8;" line="717"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="69"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder6"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="673"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function6;)Ljavaslang/control/Validation;" line="683"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder7;" line="687"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$When"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljavaslang/control/Option;Z)V" line="741"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad$Then;" line="748"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Then;" line="754"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="758"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="763"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$2" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="765"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$1" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="759"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$then$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="754"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="53"/><counter type="LINE" missed="2" covered="12"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="2" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder8"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="733"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function8;)Ljavaslang/control/Validation;" line="745"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder3"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="598"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function3;)Ljavaslang/control/Validation;" line="605"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder4;" line="609"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder5"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="646"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function5;)Ljavaslang/control/Validation;" line="655"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder6;" line="659"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder4"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="621"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function4;)Ljavaslang/control/Validation;" line="629"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder5;" line="633"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Effect$When"><method name="&lt;init&gt;" desc="(Ljava/util/function/Predicate;Ljavaslang/collection/List;)V" line="407"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="413"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/lang/Runnable;)Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="422"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Effect$Then;" line="430"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$2" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="432"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenRun$1" desc="(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/lang/Object;" line="424"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$thenRun$0" desc="(Ljava/util/function/Consumer;Ljava/lang/Object;)Ljava/lang/Void;" line="415"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="80"/><counter type="LINE" missed="2" covered="14"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$WhenApplicable"><method name="&lt;init&gt;" desc="(Ljavaslang/Function1;Ljavaslang/collection/List;)V" line="341"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenApply" desc="()Ljavaslang/control/Match$MatchFunction$Then;" line="347"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Then;" line="351"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$2" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="353"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$1" desc="(Ljavaslang/Function1;Ljava/lang/Object;)Z" line="352"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenApply$0" desc="(Ljavaslang/Function1;Ljava/lang/Object;)Z" line="347"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="75"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/MatchError"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="26"><counter type="INSTRUCTION" missed="2" covered="22"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getObject" desc="()Ljava/lang/Object;" line="36"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="25"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Try"><method name="of" desc="(Ljavaslang/control/Try$CheckedSupplier;)Ljavaslang/control/Try;" line="42"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="run" desc="(Ljavaslang/control/Try$CheckedRunnable;)Ljavaslang/control/Try;" line="57"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sequence" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Try;" line="75"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="success" desc="(Ljava/lang/Object;)Ljavaslang/control/Try;" line="95"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="failure" desc="(Ljava/lang/Throwable;)Ljavaslang/control/Try;" line="106"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/control/Try$CheckedConsumer;)Ljavaslang/control/Try;" line="129"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="andThen" desc="(Ljavaslang/control/Try$CheckedRunnable;)Ljavaslang/control/Try;" line="167"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="failed" desc="()Ljavaslang/control/Try;" line="177"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Try;" line="195"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Try;" line="212"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="filterTry" desc="(Ljavaslang/control/Try$CheckedPredicate;)Ljavaslang/control/Try;" line="217"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNotTry" desc="(Ljavaslang/control/Try$CheckedPredicate;)Ljavaslang/control/Try;" line="225"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Try;" line="238"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMapTry" desc="(Ljavaslang/control/Try$CheckedFunction;)Ljavaslang/control/Try;" line="247"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="297"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="309"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Try;" line="321"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapTry" desc="(Ljavaslang/CheckedFunction1;)Ljavaslang/control/Try;" line="345"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="354"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="onFailure" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Try;" line="365"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="onSuccess" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Try;" line="385"><counter type="INSTRUCTION" missed="7" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseGet" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="398"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseRun" desc="(Ljava/util/function/Consumer;)V" line="406"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseThrow" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="412"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Try;" line="427"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="recover" desc="(Ljava/util/function/Function;)Ljavaslang/control/Try;" line="441"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="recoverWith" desc="(Ljava/util/function/Function;)Ljavaslang/control/Try;" line="458"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toEither" desc="()Ljavaslang/control/Either;" line="470"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="486"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Try;" line="493"><counter type="INSTRUCTION" missed="36" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="7" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unit$8" desc="(Ljava/util/Iterator;)Ljava/lang/Object;" line="501"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$recover$7" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="442"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$mapTry$6" desc="(Ljavaslang/CheckedFunction1;)Ljava/lang/Object;" line="348"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filterTry$5" desc="(Ljava/lang/Boolean;)Ljava/lang/Iterable;" line="220"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$4" desc="(Ljava/lang/Boolean;Ljava/lang/Object;)Z" line="220"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$filterTry$3" desc="(Ljavaslang/control/Try$CheckedPredicate;)Ljava/lang/Boolean;" line="220"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$2" desc="(Ljavaslang/control/Try$CheckedRunnable;Ljava/lang/Object;)Ljava/lang/Iterable;" line="167"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$1" desc="(Ljava/lang/Void;)Ljava/lang/Iterable;" line="132"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$andThen$0" desc="(Ljavaslang/control/Try$CheckedConsumer;)V" line="132"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="77" covered="371"/><counter type="BRANCH" missed="7" covered="41"/><counter type="LINE" missed="17" covered="82"/><counter type="COMPLEXITY" missed="10" covered="53"/><counter type="METHOD" missed="6" covered="33"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Either"><method name="right" desc="(Ljava/lang/Object;)Ljavaslang/control/Either;" line="57"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="left" desc="(Ljava/lang/Object;)Ljavaslang/control/Either;" line="69"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="left" desc="()Ljavaslang/control/Either$LeftProjection;" line="100"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="right" desc="()Ljavaslang/control/Either$RightProjection;" line="109"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/control/Either;" line="123"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="fold" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;" line="141"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseGet" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="158"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseRun" desc="(Ljava/util/function/Consumer;)V" line="172"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseThrow" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="188"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="swap" desc="()Ljavaslang/control/Either;" line="202"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="213"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either;" line="228"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either;" line="247"><counter type="INSTRUCTION" missed="2" covered="13"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="mapLeft" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either;" line="265"><counter type="INSTRUCTION" missed="2" covered="13"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="285"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="300"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="()Z" line="315"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="325"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="330"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Either;" line="339"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Either;" line="350"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="83" covered="181"/><counter type="BRANCH" missed="14" covered="16"/><counter type="LINE" missed="21" covered="41"/><counter type="COMPLEXITY" missed="14" covered="22"/><counter type="METHOD" missed="6" covered="15"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Builder"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Validation;Ljavaslang/control/Validation;)V" line="577"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ap" desc="(Ljavaslang/Function2;)Ljavaslang/control/Validation;" line="583"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="combine" desc="(Ljavaslang/control/Validation;)Ljavaslang/control/Validation$Builder3;" line="587"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$When"><method name="&lt;init&gt;" desc="(Ljava/util/function/Predicate;Ljavaslang/collection/List;)V" line="237"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchFunction$Then;" line="243"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$Then;" line="248"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Then;" line="252"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Then;" line="257"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$2" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="259"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$1" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="253"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="248"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$WhenUntyped"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Z)V" line="693"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad$Then;" line="699"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Then;" line="705"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="then" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="709"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchMonad$Effect$Then;" line="715"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenRun" desc="(Ljava/lang/Runnable;)Ljavaslang/control/Match$MatchMonad$Effect$Then;" line="723"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="728"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenThrow$3" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="730"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$thenRun$2" desc="(Ljava/lang/Runnable;Ljava/lang/Object;)V" line="724"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$1" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="710"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$then$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" line="705"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="93"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="11"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$Effect$Then"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Z)V" line="1061"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljavaslang/control/Match$MatchMonad$Effect$When;" line="1067"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="whenIs" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Effect$When;" line="1073"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIsIn" desc="([Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Effect$When;" line="1079"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="whenType" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$Effect$When;" line="1085"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenTypeIn" desc="([Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$Effect$When;" line="1092"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="whenApplicable" desc="(Ljavaslang/control/Match$SerializableConsumer;)Ljavaslang/control/Match$MatchMonad$Effect$WhenApplicable;" line="1098"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="otherwiseRun" desc="(Ljava/util/function/Consumer;)V" line="1103"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseRun" desc="(Ljava/lang/Runnable;)V" line="1110"><counter type="INSTRUCTION" missed="2" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseThrow" desc="(Ljava/util/function/Supplier;)V" line="1117"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isMatching" desc="(Ljava/util/function/Supplier;)Z" line="1124"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$whenTypeIn$4" desc="([Ljava/lang/Class;)Ljava/util/function/Predicate;" line="1093"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$whenType$3" desc="(Ljava/lang/Class;)Ljava/util/function/Predicate;" line="1086"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$whenIsIn$2" desc="([Ljava/lang/Object;)Ljava/util/function/Predicate;" line="1080"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$whenIs$1" desc="(Ljava/lang/Object;)Ljava/util/function/Predicate;" line="1073"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$when$0" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljava/util/function/Predicate;" line="1068"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="94" covered="83"/><counter type="BRANCH" missed="3" covered="7"/><counter type="LINE" missed="16" covered="17"/><counter type="COMPLEXITY" missed="10" covered="11"/><counter type="METHOD" missed="8" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad"><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Match$MatchMonad;" line="561"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSingleValued" desc="()Z" line="575"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="583"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="591"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="603"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/control/MatchModule"><method name="is" desc="(Ljava/lang/Object;)Ljava/util/function/Predicate;" line="1297"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIn" desc="([Ljava/lang/Object;)Ljava/util/function/Predicate;" line="1303"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTrue" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljava/util/function/Predicate;" line="1308"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isType" desc="(Ljava/lang/Class;)Ljava/util/function/Predicate;" line="1313"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTypeIn" desc="([Ljava/lang/Class;)Ljava/util/function/Predicate;" line="1317"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="computeResult" desc="(Ljava/lang/Object;Ljavaslang/control/Option;ZLjava/util/function/Function;)Ljavaslang/control/Option;" line="1324"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$computeResult$7" desc="(Ljava/util/function/Function;Ljava/lang/Object;)Ljava/lang/Object;" line="1326"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isTypeIn$6" desc="([Ljava/lang/Class;Ljava/lang/Object;)Z" line="1317"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$5" desc="(Ljava/lang/Object;Ljava/lang/Class;)Z" line="1317"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isType$4" desc="(Ljava/lang/Class;Ljava/lang/Object;)Z" line="1313"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isTrue$3" desc="(Ljava/lang/Class;Ljavaslang/control/Match$SerializablePredicate;Ljava/lang/Object;)Z" line="1309"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isIn$2" desc="([Ljava/lang/Object;Ljava/lang/Object;)Z" line="1303"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$1" desc="(Ljava/lang/Object;Ljava/lang/Object;)Z" line="1303"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$is$0" desc="(Ljava/lang/Object;Ljava/lang/Object;)Z" line="1297"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="101"/><counter type="BRANCH" missed="2" covered="18"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="2" covered="22"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Otherwise"><method name="&lt;init&gt;" desc="(Ljava/util/function/Function;Ljavaslang/collection/List;)V" line="365"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="373"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$2" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="376"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$1" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Ljava/lang/Object;" line="375"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$apply$0" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Z" line="374"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Case"><method name="&lt;init&gt;" desc="(Ljava/util/function/Predicate;Ljava/util/function/Function;)V" line="386"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isApplicable" desc="(Ljava/lang/Object;)Z" line="392"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="apply" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="396"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Either$RightProjection"><method name="&lt;init&gt;" desc="(Ljavaslang/control/Either;)V" line="641"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="bimap" desc="(Ljava/util/function/Function;Ljava/util/function/Function;)Ljavaslang/algebra/BiFunctor;" line="647"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="()Z" line="652"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="662"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Ljava/lang/Object;" line="673"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElse" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="689"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseGet" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="700"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseRun" desc="(Ljava/util/function/Consumer;)V" line="710"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseThrow" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="724"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toEither" desc="()Ljavaslang/control/Either;" line="734"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="746"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="752"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either$RightProjection;" line="767"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Either$RightProjection;" line="784"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="794"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Either$RightProjection;" line="805"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="821"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Either$RightProjection;" line="828"><counter type="INSTRUCTION" missed="35" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="7" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="843"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="848"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="853"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="858"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="863"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="64" covered="165"/><counter type="BRANCH" missed="8" covered="14"/><counter type="LINE" missed="14" covered="37"/><counter type="COMPLEXITY" missed="10" covered="24"/><counter type="METHOD" missed="5" covered="18"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$Effect$WhenApplicable"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;ZLjavaslang/control/Match$SerializableConsumer;)V" line="1135"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="thenRun" desc="()Ljavaslang/control/Match$MatchMonad$Effect$Then;" line="1144"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Effect$Then;" line="1151"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="72" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="3" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="javaslang/control/Match$MatchMonad$WhenApplicable"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljavaslang/control/Option;Ljavaslang/Function1;)V" line="924"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenApply" desc="()Ljavaslang/control/Match$MatchMonad$Then;" line="932"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="thenThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="937"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$thenThrow$0" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Object;" line="939"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="26" covered="47"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="4" covered="8"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="2" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Option$Some"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="358"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="364"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="369"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="374"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="379"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="384"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="389"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="349"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="1" covered="10"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Option"><method name="of" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="48"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sequence" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Option;" line="62"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="some" desc="(Ljava/lang/Object;)Ljavaslang/control/Option;" line="90"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="none" desc="()Ljavaslang/control/Option;" line="101"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nothing" desc="()Ljavaslang/control/Option;" line="111"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(ZLjava/util/function/Supplier;)Ljavaslang/control/Option;" line="124"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ofOptional" desc="(Ljava/util/Optional;)Ljavaslang/control/Option;" line="136"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDefined" desc="()Z" line="156"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSingleValued" desc="()Z" line="166"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOption" desc="()Ljavaslang/control/Option;" line="173"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orElse" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="185"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseGet" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="198"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="orElseThrow" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="211"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="228"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filterNot" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Option;" line="234"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Option;" line="247"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Option;" line="264"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="()Ljavaslang/control/Match$MatchMonad$Of;" line="274"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Option;" line="285"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transform" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="301"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Option;" line="308"><counter type="INSTRUCTION" missed="27" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="5" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="321"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="51" covered="193"/><counter type="BRANCH" missed="7" covered="31"/><counter type="LINE" missed="12" covered="42"/><counter type="COMPLEXITY" missed="9" covered="32"/><counter type="METHOD" missed="5" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$SerializablePredicate"><method name="arity" desc="()I" line="1246"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="curried" desc="()Ljavaslang/control/Match$SerializablePredicate;" line="1251"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="tupled" desc="()Ljavaslang/control/Match$SerializablePredicate;" line="1256"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reversed" desc="()Ljavaslang/control/Match$SerializablePredicate;" line="1261"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="memoized" desc="()Ljavaslang/control/Match$SerializablePredicate;" line="1266"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getType" desc="()Ljavaslang/control/Match$SerializablePredicate$Type;" line="1275"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$memoized$aa2a7399$1" desc="(Ljava/lang/Object;)Z" line="1269"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$0" desc="(Ljava/lang/Object;)Ljava/lang/Boolean;" line="1269"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$tupled$ff4903f3$1" desc="(Ljavaslang/Tuple1;)Z" line="1256"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="37" covered="6"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="1"/><counter type="COMPLEXITY" missed="9" covered="1"/><counter type="METHOD" missed="8" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Validation$Valid"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;)V" line="475"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isValid" desc="()Z" line="481"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInvalid" desc="()Z" line="486"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="491"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getError" desc="()Ljava/lang/Object;" line="496"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="501"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="506"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="511"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="1" covered="10"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Option$None"><method name="&lt;init&gt;" desc="()V" line="412"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="get" desc="()Ljava/lang/Object;" line="417"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="422"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="427"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="432"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="stringPrefix" desc="()Ljava/lang/String;" line="437"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="442"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="readResolve" desc="()Ljava/lang/Object;" line="454"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="407"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="10"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchFunction$Effect$Then"><method name="&lt;init&gt;" desc="(Ljavaslang/collection/List;)V" line="441"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Ljava/lang/Object;)V" line="447"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljavaslang/control/Match$MatchFunction$Effect$When;" line="453"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIs" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$Effect$When;" line="458"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIsIn" desc="([Ljava/lang/Object;)Ljavaslang/control/Match$MatchFunction$Effect$When;" line="463"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="whenType" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$Effect$When;" line="468"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenTypeIn" desc="([Ljava/lang/Class;)Ljavaslang/control/Match$MatchFunction$Effect$When;" line="474"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="whenApplicable" desc="(Ljavaslang/control/Match$SerializableConsumer;)Ljavaslang/control/Match$MatchFunction$Effect$WhenApplicable;" line="479"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="otherwiseRun" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchFunction$Effect$Otherwise;" line="484"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseRun" desc="(Ljava/lang/Runnable;)Ljavaslang/control/Match$MatchFunction$Effect$Otherwise;" line="492"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchFunction$Effect$Otherwise;" line="500"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$otherwiseThrow$4" desc="(Ljava/util/function/Supplier;Ljava/lang/Object;)Ljava/lang/Void;" line="502"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$otherwiseRun$3" desc="(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/lang/Void;" line="494"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwiseRun$2" desc="(Ljava/util/function/Consumer;Ljava/lang/Object;)Ljava/lang/Void;" line="486"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$accept$1" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Ljava/lang/Object;" line="449"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$accept$0" desc="(Ljava/lang/Object;Ljavaslang/control/Match$MatchFunction$Case;)Z" line="448"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="55" covered="95"/><counter type="LINE" missed="9" covered="20"/><counter type="COMPLEXITY" missed="5" covered="11"/><counter type="METHOD" missed="5" covered="11"/><counter type="CLASS" missed="0" covered="1"/></class><class name="javaslang/control/Match$MatchMonad$Then"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljavaslang/control/Option;)V" line="775"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="when" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljavaslang/control/Match$MatchMonad$When;" line="781"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIs" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$When;" line="787"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenIsIn" desc="([Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$When;" line="793"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenType" desc="(Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$When;" line="799"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenTypeIn" desc="([Ljava/lang/Class;)Ljavaslang/control/Match$MatchMonad$When;" line="806"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="whenApplicable" desc="(Ljavaslang/Function1;)Ljavaslang/control/Match$MatchMonad$WhenApplicable;" line="812"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/lang/Object;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="817"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="821"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwise" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="826"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="otherwiseThrow" desc="(Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Otherwise;" line="831"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="filter" desc="(Ljava/util/function/Predicate;)Ljavaslang/control/Match$MatchMonad;" line="837"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="flatMap" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad;" line="851"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="unit" desc="(Ljava/lang/Iterable;)Ljavaslang/control/Match$MatchMonad;" line="862"><counter type="INSTRUCTION" missed="48" covered="6"/><counter type="BRANCH" missed="7" covered="1"/><counter type="LINE" missed="11" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="map" desc="(Ljava/util/function/Function;)Ljavaslang/control/Match$MatchMonad;" line="884"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="peek" desc="(Ljava/util/function/Consumer;)Ljavaslang/control/Match$MatchMonad;" line="892"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="()Ljava/lang/Object;" line="899"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Z" line="904"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="iterator" desc="()Ljavaslang/collection/Iterator;" line="909"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isMatching" desc="(Ljava/util/function/Supplier;)Z" line="913"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$get$17" desc="()Ljavaslang/control/MatchError;" line="899"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$peek$16" desc="(Ljava/util/function/Consumer;Ljava/util/function/Supplier;)V" line="893"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$map$15" desc="()Ljavaslang/control/Match$MatchMonad$Then;" line="887"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$map$14" desc="(Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="886"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$13" desc="(Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljava/lang/Object;" line="886"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$unit$12" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="873"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$filter$11" desc="(Ljava/util/function/Predicate;Ljava/util/function/Supplier;)Ljavaslang/control/Match$MatchMonad$Then;" line="839"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwiseThrow$10" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="832"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$otherwise$9" desc="(Ljava/util/function/Supplier;)Ljava/lang/Object;" line="827"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwise$8" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="822"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$7" desc="(Ljava/util/function/Function;)Ljava/lang/Object;" line="822"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$otherwise$6" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="817"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$null$5" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="817"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$whenTypeIn$4" desc="([Ljava/lang/Class;)Ljava/util/function/Predicate;" line="807"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$whenType$3" desc="(Ljava/lang/Class;)Ljava/util/function/Predicate;" line="800"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$whenIsIn$2" desc="([Ljava/lang/Object;)Ljava/util/function/Predicate;" line="794"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$whenIs$1" desc="(Ljava/lang/Object;)Ljava/util/function/Predicate;" line="787"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$when$0" desc="(Ljavaslang/control/Match$SerializablePredicate;)Ljava/util/function/Predicate;" line="782"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="74" covered="336"/><counter type="BRANCH" missed="7" covered="11"/><counter type="LINE" missed="14" covered="48"/><counter type="COMPLEXITY" missed="8" covered="39"/><counter type="METHOD" missed="4" covered="34"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="MatchError.java"><line nr="26" mi="2" ci="18" mb="1" cb="1"/><line nr="27" mi="0" ci="3" mb="0" cb="0"/><line nr="28" mi="0" ci="1" mb="0" cb="0"/><line nr="36" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="25"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Validation.java"><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="6" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="0"/><line nr="85" mi="0" ci="6" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="7" mb="0" cb="0"/><line nr="119" mi="0" ci="4" mb="0" cb="0"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="8" mb="0" cb="0"/><line nr="141" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="9" mb="0" cb="0"/><line nr="166" mi="0" ci="4" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="4" mb="0" cb="0"/><line nr="171" mi="0" ci="10" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="195" mi="0" ci="4" mb="0" cb="0"/><line nr="196" mi="0" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="4" mb="0" cb="0"/><line nr="198" mi="0" ci="4" mb="0" cb="0"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="11" mb="0" cb="0"/><line nr="225" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="227" mi="0" ci="4" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="12" mb="0" cb="0"/><line nr="259" mi="0" ci="4" mb="0" cb="0"/><line nr="260" mi="0" ci="4" mb="0" cb="0"/><line nr="261" mi="0" ci="4" mb="0" cb="0"/><line nr="262" mi="0" ci="4" mb="0" cb="0"/><line nr="263" mi="0" ci="4" mb="0" cb="0"/><line nr="264" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="0" ci="4" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="0"/><line nr="267" mi="0" ci="13" mb="0" cb="0"/><line nr="317" mi="0" ci="4" mb="0" cb="0"/><line nr="318" mi="0" ci="3" mb="0" cb="2"/><line nr="319" mi="0" ci="4" mb="0" cb="0"/><line nr="320" mi="0" ci="1" mb="0" cb="0"/><line nr="341" mi="0" ci="4" mb="0" cb="0"/><line nr="342" mi="0" ci="4" mb="0" cb="0"/><line nr="343" mi="0" ci="3" mb="0" cb="2"/><line nr="344" mi="0" ci="3" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="347" mi="0" ci="3" mb="0" cb="0"/><line nr="348" mi="0" ci="4" mb="0" cb="0"/><line nr="359" mi="0" ci="3" mb="0" cb="2"/><line nr="360" mi="0" ci="3" mb="0" cb="0"/><line nr="361" mi="0" ci="3" mb="0" cb="0"/><line nr="363" mi="0" ci="3" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="0"/><line nr="370" mi="0" ci="4" mb="0" cb="0"/><line nr="371" mi="0" ci="3" mb="0" cb="2"/><line nr="372" mi="0" ci="4" mb="0" cb="0"/><line nr="374" mi="0" ci="3" mb="0" cb="0"/><line nr="375" mi="0" ci="5" mb="0" cb="0"/><line nr="395" mi="0" ci="4" mb="0" cb="0"/><line nr="396" mi="0" ci="4" mb="0" cb="0"/><line nr="397" mi="0" ci="3" mb="0" cb="2"/><line nr="398" mi="0" ci="3" mb="0" cb="0"/><line nr="399" mi="0" ci="5" mb="0" cb="0"/><line nr="401" mi="0" ci="3" mb="0" cb="0"/><line nr="402" mi="0" ci="5" mb="0" cb="0"/><line nr="416" mi="0" ci="4" mb="0" cb="0"/><line nr="417" mi="0" ci="3" mb="0" cb="2"/><line nr="418" mi="0" ci="3" mb="0" cb="0"/><line nr="419" mi="0" ci="5" mb="0" cb="0"/><line nr="421" mi="0" ci="4" mb="0" cb="0"/><line nr="428" mi="0" ci="4" mb="0" cb="0"/><line nr="429" mi="0" ci="3" mb="0" cb="0"/><line nr="431" mi="0" ci="6" mb="0" cb="4"/><line nr="432" mi="0" ci="4" mb="0" cb="0"/><line nr="433" mi="0" ci="5" mb="0" cb="0"/><line nr="434" mi="0" ci="3" mb="0" cb="0"/><line nr="435" mi="0" ci="6" mb="1" cb="3"/><line nr="436" mi="0" ci="4" mb="0" cb="0"/><line nr="437" mi="0" ci="3" mb="0" cb="0"/><line nr="438" mi="0" ci="6" mb="1" cb="3"/><line nr="439" mi="0" ci="3" mb="0" cb="0"/><line nr="440" mi="0" ci="4" mb="0" cb="0"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="443" mi="0" ci="3" mb="0" cb="0"/><line nr="444" mi="0" ci="5" mb="0" cb="0"/><line nr="457" mi="0" ci="7" mb="0" cb="0"/><line nr="475" mi="0" ci="2" mb="0" cb="0"/><line nr="476" mi="0" ci="3" mb="0" cb="0"/><line nr="477" mi="0" ci="1" mb="0" cb="0"/><line nr="481" mi="0" ci="2" mb="0" cb="0"/><line nr="486" mi="0" ci="2" mb="0" cb="0"/><line nr="491" mi="0" ci="3" mb="0" cb="0"/><line nr="496" mi="0" ci="5" mb="0" cb="0"/><line nr="501" mi="0" ci="17" mb="1" cb="5"/><line nr="506" mi="0" ci="4" mb="0" cb="0"/><line nr="511" mi="0" ci="12" mb="0" cb="0"/><line nr="531" mi="0" ci="2" mb="0" cb="0"/><line nr="532" mi="0" ci="3" mb="0" cb="0"/><line nr="533" mi="0" ci="1" mb="0" cb="0"/><line nr="537" mi="0" ci="2" mb="0" cb="0"/><line nr="542" mi="0" ci="2" mb="0" cb="0"/><line nr="547" mi="0" ci="5" mb="0" cb="0"/><line nr="552" mi="0" ci="3" mb="0" cb="0"/><line nr="557" mi="0" ci="17" mb="1" cb="5"/><line nr="562" mi="0" ci="4" mb="0" cb="0"/><line nr="567" mi="0" ci="12" mb="0" cb="0"/><line nr="577" mi="0" ci="2" mb="0" cb="0"/><line nr="578" mi="0" ci="3" mb="0" cb="0"/><line nr="579" mi="0" ci="3" mb="0" cb="0"/><line nr="580" mi="0" ci="1" mb="0" cb="0"/><line nr="583" mi="0" ci="10" mb="0" cb="0"/><line nr="587" mi="0" ci="10" mb="0" cb="0"/><line nr="598" mi="0" ci="2" mb="0" cb="0"/><line nr="599" mi="0" ci="3" mb="0" cb="0"/><line nr="600" mi="0" ci="3" mb="0" cb="0"/><line nr="601" mi="0" ci="3" mb="0" cb="0"/><line nr="602" mi="0" ci="1" mb="0" cb="0"/><line nr="605" mi="0" ci="13" mb="0" cb="0"/><line nr="609" mi="0" ci="12" mb="0" cb="0"/><line nr="621" mi="0" ci="2" mb="0" cb="0"/><line nr="622" mi="0" ci="3" mb="0" cb="0"/><line nr="623" mi="0" ci="3" mb="0" cb="0"/><line nr="624" mi="0" ci="3" mb="0" cb="0"/><line nr="625" mi="0" ci="3" mb="0" cb="0"/><line nr="626" mi="0" ci="1" mb="0" cb="0"/><line nr="629" mi="0" ci="16" mb="0" cb="0"/><line nr="633" mi="0" ci="14" mb="0" cb="0"/><line nr="646" mi="0" ci="2" mb="0" cb="0"/><line nr="647" mi="0" ci="3" mb="0" cb="0"/><line nr="648" mi="0" ci="3" mb="0" cb="0"/><line nr="649" mi="0" ci="3" mb="0" cb="0"/><line nr="650" mi="0" ci="3" mb="0" cb="0"/><line nr="651" mi="0" ci="3" mb="0" cb="0"/><line nr="652" mi="0" ci="1" mb="0" cb="0"/><line nr="655" mi="0" ci="19" mb="0" cb="0"/><line nr="659" mi="0" ci="16" mb="0" cb="0"/><line nr="673" mi="0" ci="2" mb="0" cb="0"/><line nr="674" mi="0" ci="3" mb="0" cb="0"/><line nr="675" mi="0" ci="3" mb="0" cb="0"/><line nr="676" mi="0" ci="3" mb="0" cb="0"/><line nr="677" mi="0" ci="3" mb="0" cb="0"/><line nr="678" mi="0" ci="3" mb="0" cb="0"/><line nr="679" mi="0" ci="3" mb="0" cb="0"/><line nr="680" mi="0" ci="1" mb="0" cb="0"/><line nr="683" mi="0" ci="22" mb="0" cb="0"/><line nr="687" mi="0" ci="18" mb="0" cb="0"/><line nr="702" mi="0" ci="2" mb="0" cb="0"/><line nr="703" mi="0" ci="3" mb="0" cb="0"/><line nr="704" mi="0" ci="3" mb="0" cb="0"/><line nr="705" mi="0" ci="3" mb="0" cb="0"/><line nr="706" mi="0" ci="3" mb="0" cb="0"/><line nr="707" mi="0" ci="3" mb="0" cb="0"/><line nr="708" mi="0" ci="3" mb="0" cb="0"/><line nr="709" mi="0" ci="3" mb="0" cb="0"/><line nr="710" mi="0" ci="1" mb="0" cb="0"/><line nr="713" mi="0" ci="25" mb="0" cb="0"/><line nr="717" mi="0" ci="20" mb="0" cb="0"/><line nr="733" mi="0" ci="2" mb="0" cb="0"/><line nr="734" mi="0" ci="3" mb="0" cb="0"/><line nr="735" mi="0" ci="3" mb="0" cb="0"/><line nr="736" mi="0" ci="3" mb="0" cb="0"/><line nr="737" mi="0" ci="3" mb="0" cb="0"/><line nr="738" mi="0" ci="3" mb="0" cb="0"/><line nr="739" mi="0" ci="3" mb="0" cb="0"/><line nr="740" mi="0" ci="3" mb="0" cb="0"/><line nr="741" mi="0" ci="3" mb="0" cb="0"/><line nr="742" mi="0" ci="1" mb="0" cb="0"/><line nr="745" mi="0" ci="28" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="868"/><counter type="BRANCH" missed="4" covered="32"/><counter type="LINE" missed="0" covered="177"/><counter type="COMPLEXITY" missed="4" covered="67"/><counter type="METHOD" missed="0" covered="53"/><counter type="CLASS" missed="0" covered="10"/></sourcefile><sourcefile name="Option.java"><line nr="48" mi="0" ci="7" mb="0" cb="2"/><line nr="62" mi="0" ci="4" mb="0" cb="0"/><line nr="63" mi="0" ci="2" mb="0" cb="0"/><line nr="64" mi="0" ci="10" mb="0" cb="2"/><line nr="65" mi="0" ci="3" mb="0" cb="2"/><line nr="66" mi="0" ci="2" mb="0" cb="0"/><line nr="68" mi="0" ci="5" mb="0" cb="0"/><line nr="69" mi="0" ci="1" mb="0" cb="0"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="0"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="8" mb="0" cb="2"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="9" mb="0" cb="2"/><line nr="156" mi="0" ci="7" mb="0" cb="2"/><line nr="166" mi="2" ci="0" mb="0" cb="0"/><line nr="173" mi="2" ci="0" mb="0" cb="0"/><line nr="185" mi="0" ci="8" mb="0" cb="2"/><line nr="198" mi="0" ci="4" mb="0" cb="0"/><line nr="199" mi="0" ci="9" mb="0" cb="2"/><line nr="211" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="3" mb="0" cb="2"/><line nr="213" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="3" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="12" mb="0" cb="4"/><line nr="234" mi="4" ci="0" mb="0" cb="0"/><line nr="235" mi="5" ci="0" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="2"/><line nr="249" mi="0" ci="2" mb="0" cb="0"/><line nr="251" mi="0" ci="8" mb="0" cb="0"/><line nr="264" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="0" ci="3" mb="0" cb="2"/><line nr="266" mi="0" ci="2" mb="0" cb="0"/><line nr="268" mi="0" ci="6" mb="0" cb="0"/><line nr="274" mi="3" ci="0" mb="0" cb="0"/><line nr="285" mi="0" ci="4" mb="0" cb="0"/><line nr="286" mi="0" ci="3" mb="0" cb="2"/><line nr="287" mi="0" ci="4" mb="0" cb="0"/><line nr="289" mi="0" ci="2" mb="0" cb="0"/><line nr="301" mi="4" ci="0" mb="0" cb="0"/><line nr="302" mi="4" ci="0" mb="0" cb="0"/><line nr="308" mi="0" ci="3" mb="1" cb="1"/><line nr="309" mi="0" ci="3" mb="0" cb="0"/><line nr="310" mi="3" ci="0" mb="2" cb="0"/><line nr="311" mi="3" ci="0" mb="0" cb="0"/><line nr="312" mi="9" ci="0" mb="2" cb="0"/><line nr="314" mi="3" ci="0" mb="0" cb="0"/><line nr="315" mi="9" ci="0" mb="2" cb="0"/><line nr="321" mi="0" ci="9" mb="0" cb="2"/><line nr="349" mi="0" ci="6" mb="0" cb="0"/><line nr="358" mi="0" ci="2" mb="0" cb="0"/><line nr="359" mi="0" ci="3" mb="0" cb="0"/><line nr="360" mi="0" ci="1" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="0"/><line nr="369" mi="0" ci="2" mb="0" cb="0"/><line nr="374" mi="0" ci="17" mb="1" cb="5"/><line nr="379" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="2" mb="0" cb="0"/><line nr="389" mi="0" ci="15" mb="0" cb="0"/><line nr="407" mi="0" ci="5" mb="0" cb="0"/><line nr="412" mi="0" ci="2" mb="0" cb="0"/><line nr="413" mi="0" ci="1" mb="0" cb="0"/><line nr="417" mi="0" ci="5" mb="0" cb="0"/><line nr="422" mi="0" ci="2" mb="0" cb="0"/><line nr="427" mi="0" ci="7" mb="0" cb="2"/><line nr="432" mi="0" ci="2" mb="0" cb="0"/><line nr="437" mi="0" ci="2" mb="0" cb="0"/><line nr="442" mi="0" ci="3" mb="0" cb="0"/><line nr="454" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="279"/><counter type="BRANCH" missed="8" covered="38"/><counter type="LINE" missed="12" covered="62"/><counter type="COMPLEXITY" missed="10" covered="52"/><counter type="METHOD" missed="5" covered="34"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="Match.java"><line nr="79" mi="0" ci="6" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="6" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="7" mb="0" cb="0"/><line nr="100" mi="0" ci="7" mb="0" cb="0"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="7" mb="0" cb="0"/><line nr="111" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="0" ci="7" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="7" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="123" mi="0" ci="7" mb="0" cb="0"/><line nr="127" mi="0" ci="10" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="7" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="11" mb="0" cb="0"/><line nr="141" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="5" mb="0" cb="0"/><line nr="143" mi="0" ci="3" mb="0" cb="0"/><line nr="144" mi="0" ci="2" mb="0" cb="0"/><line nr="145" mi="0" ci="3" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="5" mb="0" cb="0"/><line nr="151" mi="0" ci="2" mb="0" cb="0"/><line nr="152" mi="0" ci="2" mb="0" cb="0"/><line nr="153" mi="0" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="5" mb="0" cb="0"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="0" ci="3" mb="0" cb="0"/><line nr="189" mi="0" ci="2" mb="0" cb="0"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><line nr="191" mi="0" ci="1" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="195" mi="0" ci="13" mb="0" cb="0"/><line nr="199" mi="0" ci="7" mb="0" cb="0"/><line nr="203" mi="0" ci="4" mb="0" cb="0"/><line nr="204" mi="0" ci="8" mb="0" cb="0"/><line nr="208" mi="0" ci="4" mb="0" cb="0"/><line nr="209" mi="0" ci="3" mb="0" cb="0"/><line nr="210" mi="0" ci="3" mb="0" cb="0"/><line nr="211" mi="0" ci="2" mb="0" cb="0"/><line nr="213" mi="0" ci="13" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="14" mb="0" cb="0"/><line nr="219" mi="0" ci="2" mb="0" cb="0"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="4" mb="0" cb="0"/><line nr="226" mi="0" ci="5" mb="0" cb="0"/><line nr="227" mi="0" ci="4" mb="0" cb="0"/><line nr="237" mi="0" ci="2" mb="0" cb="0"/><line nr="238" mi="0" ci="3" mb="0" cb="0"/><line nr="239" mi="0" ci="3" mb="0" cb="0"/><line nr="240" mi="0" ci="1" mb="0" cb="0"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="244" mi="0" ci="15" mb="0" cb="0"/><line nr="248" mi="0" ci="7" mb="0" cb="0"/><line nr="252" mi="0" ci="4" mb="0" cb="0"/><line nr="253" mi="0" ci="8" mb="0" cb="0"/><line nr="257" mi="0" ci="4" mb="0" cb="0"/><line nr="258" mi="0" ci="5" mb="0" cb="0"/><line nr="259" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="0" ci="2" mb="0" cb="0"/><line nr="271" mi="0" ci="3" mb="0" cb="0"/><line nr="272" mi="0" ci="1" mb="0" cb="0"/><line nr="277" mi="0" ci="6" mb="0" cb="0"/><line nr="278" mi="0" ci="7" mb="0" cb="0"/><line nr="279" mi="0" ci="7" mb="0" cb="0"/><line nr="280" mi="0" ci="6" mb="0" cb="0"/><line nr="284" mi="0" ci="4" mb="0" cb="0"/><line nr="285" mi="0" ci="9" mb="0" cb="0"/><line nr="289" mi="0" ci="9" mb="0" cb="0"/><line nr="294" mi="0" ci="4" mb="0" cb="0"/><line nr="295" mi="0" ci="9" mb="0" cb="0"/><line nr="299" mi="0" ci="4" mb="0" cb="0"/><line nr="300" mi="0" ci="9" mb="0" cb="0"/><line nr="305" mi="0" ci="4" mb="0" cb="0"/><line nr="306" mi="0" ci="9" mb="0" cb="0"/><line nr="310" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="0" ci="8" mb="0" cb="0"/><line nr="315" mi="0" ci="11" mb="0" cb="0"/><line nr="319" mi="0" ci="4" mb="0" cb="0"/><line nr="320" mi="0" ci="8" mb="0" cb="0"/><line nr="324" mi="0" ci="4" mb="0" cb="0"/><line nr="325" mi="0" ci="12" mb="0" cb="0"/><line nr="329" mi="0" ci="4" mb="0" cb="0"/><line nr="330" mi="0" ci="9" mb="0" cb="0"/><line nr="331" mi="0" ci="4" mb="0" cb="0"/><line nr="341" mi="0" ci="2" mb="0" cb="0"/><line nr="342" mi="0" ci="3" mb="0" cb="0"/><line nr="343" mi="0" ci="3" mb="0" cb="0"/><line nr="344" mi="0" ci="1" mb="0" cb="0"/><line nr="347" mi="0" ci="29" mb="0" cb="0"/><line nr="351" mi="0" ci="4" mb="0" cb="0"/><line nr="352" mi="0" ci="29" mb="0" cb="0"/><line nr="353" mi="0" ci="4" mb="0" cb="0"/><line nr="365" mi="0" ci="2" mb="0" cb="0"/><line nr="366" mi="0" ci="3" mb="0" cb="0"/><line nr="367" mi="0" ci="3" mb="0" cb="0"/><line nr="368" mi="0" ci="1" mb="0" cb="0"/><line nr="373" mi="0" ci="6" mb="0" cb="0"/><line nr="374" mi="0" ci="7" mb="0" cb="0"/><line nr="375" mi="0" ci="8" mb="0" cb="0"/><line nr="376" mi="0" ci="6" mb="0" cb="0"/><line nr="386" mi="0" ci="2" mb="0" cb="0"/><line nr="387" mi="0" ci="3" mb="0" cb="0"/><line nr="388" mi="0" ci="3" mb="0" cb="0"/><line nr="389" mi="0" ci="1" mb="0" cb="0"/><line nr="392" mi="0" ci="5" mb="0" cb="0"/><line nr="396" mi="0" ci="5" mb="0" cb="0"/><line nr="407" mi="0" ci="2" mb="0" cb="0"/><line nr="408" mi="0" ci="3" mb="0" cb="0"/><line nr="409" mi="0" ci="3" mb="0" cb="0"/><line nr="410" mi="0" ci="1" mb="0" cb="0"/><line nr="413" mi="0" ci="4" mb="0" cb="0"/><line nr="414" mi="0" ci="3" mb="0" cb="0"/><line nr="415" mi="0" ci="3" mb="0" cb="0"/><line nr="416" mi="0" ci="2" mb="0" cb="0"/><line nr="418" mi="0" ci="15" mb="0" cb="0"/><line nr="422" mi="0" ci="4" mb="0" cb="0"/><line nr="423" mi="0" ci="16" mb="0" cb="0"/><line nr="424" mi="2" ci="0" mb="0" cb="0"/><line nr="425" mi="2" ci="0" mb="0" cb="0"/><line nr="430" mi="0" ci="4" mb="0" cb="0"/><line nr="431" mi="0" ci="16" mb="0" cb="0"/><line nr="432" mi="0" ci="4" mb="0" cb="0"/><line nr="441" mi="0" ci="2" mb="0" cb="0"/><line nr="442" mi="0" ci="3" mb="0" cb="0"/><line nr="443" mi="0" ci="1" mb="0" cb="0"/><line nr="447" mi="0" ci="5" mb="0" cb="0"/><line nr="448" mi="0" ci="7" mb="0" cb="0"/><line nr="449" mi="0" ci="6" mb="0" cb="0"/><line nr="450" mi="0" ci="1" mb="0" cb="0"/><line nr="453" mi="0" ci="4" mb="0" cb="0"/><line nr="454" mi="0" ci="9" mb="0" cb="0"/><line nr="458" mi="0" ci="9" mb="0" cb="0"/><line nr="463" mi="4" ci="0" mb="0" cb="0"/><line nr="464" mi="9" ci="0" mb="0" cb="0"/><line nr="468" mi="0" ci="4" mb="0" cb="0"/><line nr="469" mi="0" ci="9" mb="0" cb="0"/><line nr="474" mi="4" ci="0" mb="0" cb="0"/><line nr="475" mi="9" ci="0" mb="0" cb="0"/><line nr="479" mi="4" ci="0" mb="0" cb="0"/><line nr="480" mi="8" ci="0" mb="0" cb="0"/><line nr="484" mi="0" ci="4" mb="0" cb="0"/><line nr="485" mi="0" ci="9" mb="0" cb="0"/><line nr="486" mi="0" ci="3" mb="0" cb="0"/><line nr="487" mi="0" ci="2" mb="0" cb="0"/><line nr="492" mi="0" ci="4" mb="0" cb="0"/><line nr="493" mi="0" ci="9" mb="0" cb="0"/><line nr="494" mi="0" ci="2" mb="0" cb="0"/><line nr="495" mi="0" ci="2" mb="0" cb="0"/><line nr="500" mi="4" ci="0" mb="0" cb="0"/><line nr="501" mi="9" ci="0" mb="0" cb="0"/><line nr="502" mi="4" ci="0" mb="0" cb="0"/><line nr="512" mi="2" ci="0" mb="0" cb="0"/><line nr="513" mi="3" ci="0" mb="0" cb="0"/><line nr="514" mi="3" ci="0" mb="0" cb="0"/><line nr="515" mi="1" ci="0" mb="0" cb="0"/><line nr="519" mi="29" ci="0" mb="0" cb="0"/><line nr="520" mi="4" ci="0" mb="0" cb="0"/><line nr="521" mi="2" ci="0" mb="0" cb="0"/><line nr="526" mi="4" ci="0" mb="0" cb="0"/><line nr="527" mi="29" ci="0" mb="0" cb="0"/><line nr="528" mi="4" ci="0" mb="0" cb="0"/><line nr="538" mi="0" ci="2" mb="0" cb="0"/><line nr="539" mi="0" ci="3" mb="0" cb="0"/><line nr="540" mi="0" ci="3" mb="0" cb="0"/><line nr="541" mi="0" ci="1" mb="0" cb="0"/><line nr="545" mi="0" ci="5" mb="0" cb="0"/><line nr="546" mi="0" ci="7" mb="0" cb="0"/><line nr="547" mi="0" ci="8" mb="0" cb="0"/><line nr="548" mi="0" ci="8" mb="0" cb="0"/><line nr="549" mi="0" ci="1" mb="0" cb="0"/><line nr="561" mi="4" ci="0" mb="0" cb="0"/><line nr="562" mi="5" ci="0" mb="0" cb="0"/><line nr="575" mi="2" ci="0" mb="0" cb="0"/><line nr="583" mi="3" ci="0" mb="0" cb="0"/><line nr="591" mi="2" ci="0" mb="0" cb="0"/><line nr="603" mi="4" ci="0" mb="0" cb="0"/><line nr="604" mi="4" ci="0" mb="0" cb="0"/><line nr="611" mi="0" ci="2" mb="0" cb="0"/><line nr="612" mi="0" ci="3" mb="0" cb="0"/><line nr="613" mi="0" ci="1" mb="0" cb="0"/><line nr="616" mi="0" ci="4" mb="0" cb="0"/><line nr="617" mi="0" ci="8" mb="0" cb="0"/><line nr="621" mi="0" ci="4" mb="0" cb="0"/><line nr="622" mi="0" ci="6" mb="0" cb="0"/><line nr="623" mi="0" ci="8" mb="0" cb="0"/><line nr="627" mi="0" ci="6" mb="0" cb="0"/><line nr="628" mi="0" ci="8" mb="0" cb="0"/><line nr="633" mi="0" ci="4" mb="0" cb="0"/><line nr="634" mi="0" ci="6" mb="0" cb="0"/><line nr="635" mi="0" ci="8" mb="0" cb="0"/><line nr="639" mi="0" ci="4" mb="0" cb="0"/><line nr="640" mi="0" ci="6" mb="0" cb="0"/><line nr="641" mi="0" ci="8" mb="0" cb="0"/><line nr="646" mi="0" ci="4" mb="0" cb="0"/><line nr="647" mi="0" ci="6" mb="0" cb="0"/><line nr="648" mi="0" ci="8" mb="0" cb="0"/><line nr="652" mi="0" ci="4" mb="0" cb="0"/><line nr="653" mi="0" ci="9" mb="0" cb="0"/><line nr="657" mi="9" ci="0" mb="0" cb="0"/><line nr="661" mi="4" ci="0" mb="0" cb="0"/><line nr="662" mi="13" ci="0" mb="0" cb="0"/><line nr="666" mi="4" ci="0" mb="0" cb="0"/><line nr="667" mi="6" ci="0" mb="0" cb="0"/><line nr="671" mi="0" ci="4" mb="0" cb="0"/><line nr="672" mi="0" ci="4" mb="0" cb="0"/><line nr="673" mi="0" ci="1" mb="0" cb="0"/><line nr="676" mi="0" ci="4" mb="0" cb="0"/><line nr="677" mi="0" ci="2" mb="0" cb="0"/><line nr="678" mi="0" ci="1" mb="0" cb="0"/><line nr="681" mi="4" ci="0" mb="0" cb="0"/><line nr="682" mi="7" ci="0" mb="0" cb="0"/><line nr="683" mi="4" ci="0" mb="0" cb="0"/><line nr="693" mi="0" ci="2" mb="0" cb="0"/><line nr="694" mi="0" ci="3" mb="0" cb="0"/><line nr="695" mi="0" ci="3" mb="0" cb="0"/><line nr="696" mi="0" ci="1" mb="0" cb="0"/><line nr="699" mi="0" ci="4" mb="0" cb="0"/><line nr="700" mi="0" ci="8" mb="0" cb="0"/><line nr="701" mi="0" ci="8" mb="0" cb="0"/><line nr="705" mi="0" ci="7" mb="0" cb="0"/><line nr="709" mi="0" ci="4" mb="0" cb="0"/><line nr="710" mi="0" ci="8" mb="0" cb="0"/><line nr="715" mi="0" ci="4" mb="0" cb="0"/><line nr="716" mi="0" ci="3" mb="0" cb="2"/><line nr="717" mi="0" ci="4" mb="0" cb="0"/><line nr="719" mi="0" ci="9" mb="0" cb="0"/><line nr="723" mi="0" ci="4" mb="0" cb="0"/><line nr="724" mi="0" ci="8" mb="0" cb="0"/><line nr="728" mi="0" ci="4" mb="0" cb="0"/><line nr="729" mi="0" ci="5" mb="0" cb="0"/><line nr="730" mi="0" ci="4" mb="0" cb="0"/><line nr="741" mi="0" ci="2" mb="0" cb="0"/><line nr="742" mi="0" ci="3" mb="0" cb="0"/><line nr="743" mi="0" ci="3" mb="0" cb="0"/><line nr="744" mi="0" ci="3" mb="0" cb="0"/><line nr="745" mi="0" ci="1" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="749" mi="0" ci="9" mb="0" cb="0"/><line nr="750" mi="0" ci="8" mb="0" cb="0"/><line nr="754" mi="0" ci="7" mb="0" cb="0"/><line nr="758" mi="4" ci="0" mb="0" cb="0"/><line nr="759" mi="8" ci="0" mb="0" cb="0"/><line nr="763" mi="0" ci="4" mb="0" cb="0"/><line nr="764" mi="0" ci="5" mb="0" cb="0"/><line nr="765" mi="0" ci="4" mb="0" cb="0"/><line nr="775" mi="0" ci="2" mb="0" cb="0"/><line nr="776" mi="0" ci="3" mb="0" cb="0"/><line nr="777" mi="0" ci="3" mb="0" cb="0"/><line nr="778" mi="0" ci="1" mb="0" cb="0"/><line nr="781" mi="0" ci="4" mb="0" cb="0"/><line nr="782" mi="0" ci="8" mb="0" cb="0"/><line nr="783" mi="0" ci="10" mb="0" cb="0"/><line nr="787" mi="0" ci="8" mb="0" cb="0"/><line nr="788" mi="0" ci="10" mb="0" cb="0"/><line nr="793" mi="0" ci="4" mb="0" cb="0"/><line nr="794" mi="0" ci="8" mb="0" cb="0"/><line nr="795" mi="0" ci="10" mb="0" cb="0"/><line nr="799" mi="0" ci="4" mb="0" cb="0"/><line nr="800" mi="0" ci="8" mb="0" cb="0"/><line nr="801" mi="0" ci="10" mb="0" cb="0"/><line nr="806" mi="0" ci="4" mb="0" cb="0"/><line nr="807" mi="0" ci="8" mb="0" cb="0"/><line nr="808" mi="0" ci="10" mb="0" cb="0"/><line nr="812" mi="0" ci="4" mb="0" cb="0"/><line nr="813" mi="0" ci="10" mb="0" cb="0"/><line nr="817" mi="0" ci="18" mb="0" cb="0"/><line nr="821" mi="0" ci="4" mb="0" cb="0"/><line nr="822" mi="0" ci="22" mb="0" cb="0"/><line nr="826" mi="0" ci="4" mb="0" cb="0"/><line nr="827" mi="0" ci="15" mb="0" cb="0"/><line nr="831" mi="0" ci="4" mb="0" cb="0"/><line nr="832" mi="7" ci="8" mb="0" cb="0"/><line nr="837" mi="0" ci="4" mb="0" cb="0"/><line nr="838" mi="0" ci="8" mb="0" cb="0"/><line nr="839" mi="0" ci="3" mb="0" cb="0"/><line nr="840" mi="0" ci="4" mb="0" cb="2"/><line nr="841" mi="0" ci="2" mb="0" cb="0"/><line nr="843" mi="0" ci="7" mb="0" cb="0"/><line nr="845" mi="0" ci="2" mb="0" cb="0"/><line nr="851" mi="0" ci="4" mb="0" cb="0"/><line nr="852" mi="0" ci="4" mb="0" cb="2"/><line nr="853" mi="0" ci="2" mb="0" cb="0"/><line nr="855" mi="0" ci="11" mb="0" cb="0"/><line nr="862" mi="0" ci="3" mb="1" cb="1"/><line nr="863" mi="0" ci="3" mb="0" cb="0"/><line nr="864" mi="3" ci="0" mb="2" cb="0"/><line nr="865" mi="3" ci="0" mb="0" cb="0"/><line nr="866" mi="12" ci="0" mb="2" cb="0"/><line nr="867" mi="7" ci="0" mb="0" cb="0"/><line nr="869" mi="3" ci="0" mb="0" cb="0"/><line nr="871" mi="3" ci="0" mb="2" cb="0"/><line nr="872" mi="3" ci="0" mb="0" cb="0"/><line nr="873" mi="6" ci="0" mb="0" cb="0"/><line nr="874" mi="1" ci="0" mb="0" cb="0"/><line nr="875" mi="2" ci="0" mb="0" cb="0"/><line nr="877" mi="7" ci="0" mb="0" cb="0"/><line nr="884" mi="0" ci="4" mb="0" cb="0"/><line nr="885" mi="0" ci="6" mb="0" cb="0"/><line nr="886" mi="0" ci="18" mb="0" cb="0"/><line nr="887" mi="0" ci="4" mb="0" cb="0"/><line nr="892" mi="4" ci="0" mb="0" cb="0"/><line nr="893" mi="11" ci="0" mb="0" cb="0"/><line nr="894" mi="2" ci="0" mb="0" cb="0"/><line nr="899" mi="0" ci="14" mb="0" cb="0"/><line nr="904" mi="0" ci="4" mb="0" cb="0"/><line nr="909" mi="0" ci="10" mb="0" cb="2"/><line nr="913" mi="0" ci="15" mb="0" cb="4"/><line nr="924" mi="0" ci="2" mb="0" cb="0"/><line nr="925" mi="0" ci="3" mb="0" cb="0"/><line nr="926" mi="0" ci="3" mb="0" cb="0"/><line nr="927" mi="0" ci="17" mb="0" cb="4"/><line nr="928" mi="0" ci="3" mb="0" cb="0"/><line nr="929" mi="0" ci="1" mb="0" cb="0"/><line nr="932" mi="0" ci="10" mb="0" cb="0"/><line nr="933" mi="0" ci="8" mb="0" cb="0"/><line nr="937" mi="4" ci="0" mb="0" cb="0"/><line nr="938" mi="10" ci="0" mb="0" cb="0"/><line nr="939" mi="4" ci="0" mb="0" cb="0"/><line nr="941" mi="8" ci="0" mb="0" cb="0"/><line nr="950" mi="0" ci="2" mb="0" cb="0"/><line nr="951" mi="0" ci="4" mb="0" cb="0"/><line nr="952" mi="0" ci="1" mb="0" cb="0"/><line nr="956" mi="0" ci="4" mb="0" cb="0"/><line nr="957" mi="0" ci="13" mb="0" cb="0"/><line nr="963" mi="0" ci="4" mb="0" cb="0"/><line nr="965" mi="0" ci="4" mb="1" cb="1"/><line nr="966" mi="2" ci="0" mb="0" cb="0"/><line nr="969" mi="0" ci="9" mb="0" cb="0"/><line nr="976" mi="0" ci="3" mb="1" cb="1"/><line nr="977" mi="0" ci="3" mb="0" cb="0"/><line nr="978" mi="3" ci="0" mb="2" cb="0"/><line nr="979" mi="3" ci="0" mb="0" cb="0"/><line nr="980" mi="18" ci="0" mb="2" cb="0"/><line nr="982" mi="3" ci="0" mb="0" cb="0"/><line nr="983" mi="3" ci="0" mb="2" cb="0"/><line nr="984" mi="3" ci="0" mb="0" cb="0"/><line nr="985" mi="8" ci="0" mb="0" cb="0"/><line nr="987" mi="5" ci="0" mb="0" cb="0"/><line nr="995" mi="0" ci="4" mb="0" cb="0"/><line nr="996" mi="0" ci="4" mb="1" cb="1"/><line nr="997" mi="2" ci="0" mb="0" cb="0"/><line nr="999" mi="0" ci="13" mb="0" cb="0"/><line nr="1005" mi="4" ci="0" mb="0" cb="0"/><line nr="1006" mi="5" ci="0" mb="0" cb="0"/><line nr="1007" mi="2" ci="0" mb="0" cb="0"/><line nr="1012" mi="0" ci="4" mb="0" cb="0"/><line nr="1017" mi="2" ci="0" mb="0" cb="0"/><line nr="1022" mi="0" ci="4" mb="0" cb="0"/><line nr="1034" mi="0" ci="2" mb="0" cb="0"/><line nr="1035" mi="0" ci="3" mb="0" cb="0"/><line nr="1036" mi="0" ci="3" mb="0" cb="0"/><line nr="1037" mi="0" ci="3" mb="0" cb="0"/><line nr="1038" mi="0" ci="1" mb="0" cb="0"/><line nr="1042" mi="0" ci="4" mb="0" cb="0"/><line nr="1043" mi="0" ci="10" mb="0" cb="4"/><line nr="1044" mi="0" ci="2" mb="0" cb="2"/><line nr="1045" mi="0" ci="4" mb="0" cb="0"/><line nr="1047" mi="0" ci="15" mb="0" cb="4"/><line nr="1051" mi="0" ci="4" mb="0" cb="0"/><line nr="1052" mi="3" ci="5" mb="0" cb="0"/><line nr="1061" mi="0" ci="2" mb="0" cb="0"/><line nr="1062" mi="0" ci="3" mb="0" cb="0"/><line nr="1063" mi="0" ci="3" mb="0" cb="0"/><line nr="1064" mi="0" ci="1" mb="0" cb="0"/><line nr="1067" mi="4" ci="0" mb="0" cb="0"/><line nr="1068" mi="8" ci="0" mb="0" cb="0"/><line nr="1069" mi="10" ci="0" mb="0" cb="0"/><line nr="1073" mi="0" ci="8" mb="0" cb="0"/><line nr="1074" mi="0" ci="10" mb="0" cb="0"/><line nr="1079" mi="4" ci="0" mb="0" cb="0"/><line nr="1080" mi="8" ci="0" mb="0" cb="0"/><line nr="1081" mi="10" ci="0" mb="0" cb="0"/><line nr="1085" mi="0" ci="4" mb="0" cb="0"/><line nr="1086" mi="0" ci="8" mb="0" cb="0"/><line nr="1087" mi="0" ci="10" mb="0" cb="0"/><line nr="1092" mi="4" ci="0" mb="0" cb="0"/><line nr="1093" mi="8" ci="0" mb="0" cb="0"/><line nr="1094" mi="10" ci="0" mb="0" cb="0"/><line nr="1098" mi="4" ci="0" mb="0" cb="0"/><line nr="1099" mi="10" ci="0" mb="0" cb="0"/><line nr="1103" mi="0" ci="4" mb="0" cb="0"/><line nr="1104" mi="0" ci="3" mb="0" cb="2"/><line nr="1105" mi="0" ci="4" mb="0" cb="0"/><line nr="1107" mi="0" ci="1" mb="0" cb="0"/><line nr="1110" mi="0" ci="4" mb="0" cb="0"/><line nr="1111" mi="0" ci="3" mb="1" cb="1"/><line nr="1112" mi="2" ci="0" mb="0" cb="0"/><line nr="1114" mi="0" ci="1" mb="0" cb="0"/><line nr="1117" mi="4" ci="0" mb="0" cb="0"/><line nr="1118" mi="3" ci="0" mb="2" cb="0"/><line nr="1119" mi="4" ci="0" mb="0" cb="0"/><line nr="1121" mi="1" ci="0" mb="0" cb="0"/><line nr="1124" mi="0" ci="14" mb="0" cb="4"/><line nr="1135" mi="2" ci="0" mb="0" cb="0"/><line nr="1136" mi="3" ci="0" mb="0" cb="0"/><line nr="1137" mi="3" ci="0" mb="0" cb="0"/><line nr="1138" mi="16" ci="0" mb="4" cb="0"/><line nr="1139" mi="3" ci="0" mb="0" cb="0"/><line nr="1140" mi="1" ci="0" mb="0" cb="0"/><line nr="1144" mi="3" ci="0" mb="2" cb="0"/><line nr="1145" mi="5" ci="0" mb="0" cb="0"/><line nr="1147" mi="16" ci="0" mb="4" cb="0"/><line nr="1151" mi="4" ci="0" mb="0" cb="0"/><line nr="1152" mi="3" ci="0" mb="2" cb="0"/><line nr="1153" mi="4" ci="0" mb="0" cb="0"/><line nr="1155" mi="9" ci="0" mb="0" cb="0"/><line nr="1178" mi="2" ci="0" mb="0" cb="0"/><line nr="1183" mi="2" ci="0" mb="0" cb="0"/><line nr="1188" mi="8" ci="0" mb="0" cb="0"/><line nr="1193" mi="2" ci="0" mb="0" cb="0"/><line nr="1198" mi="3" ci="0" mb="2" cb="0"/><line nr="1199" mi="2" ci="0" mb="0" cb="0"/><line nr="1201" mi="11" ci="0" mb="0" cb="0"/><line nr="1202" mi="3" ci="0" mb="0" cb="0"/><line nr="1203" mi="2" ci="0" mb="0" cb="0"/><line nr="1210" mi="6" ci="0" mb="0" cb="0"/><line nr="1218" mi="3" ci="0" mb="0" cb="0"/><line nr="1219" mi="1" ci="0" mb="0" cb="0"/><line nr="1223" mi="5" ci="0" mb="0" cb="0"/><line nr="1246" mi="2" ci="0" mb="0" cb="0"/><line nr="1251" mi="2" ci="0" mb="0" cb="0"/><line nr="1256" mi="8" ci="0" mb="0" cb="0"/><line nr="1261" mi="2" ci="0" mb="0" cb="0"/><line nr="1266" mi="3" ci="0" mb="2" cb="0"/><line nr="1267" mi="2" ci="0" mb="0" cb="0"/><line nr="1269" mi="18" ci="0" mb="0" cb="0"/><line nr="1275" mi="0" ci="6" mb="0" cb="0"/><line nr="1283" mi="0" ci="3" mb="0" cb="0"/><line nr="1284" mi="0" ci="1" mb="0" cb="0"/><line nr="1288" mi="0" ci="5" mb="0" cb="0"/><line nr="1297" mi="0" ci="16" mb="0" cb="6"/><line nr="1303" mi="0" ci="15" mb="0" cb="0"/><line nr="1308" mi="0" ci="4" mb="0" cb="0"/><line nr="1309" mi="0" ci="19" mb="1" cb="5"/><line nr="1313" mi="0" ci="14" mb="1" cb="3"/><line nr="1317" mi="0" ci="15" mb="0" cb="0"/><line nr="1324" mi="0" ci="5" mb="0" cb="4"/><line nr="1325" mi="0" ci="2" mb="0" cb="0"/><line nr="1326" mi="0" ci="9" mb="0" cb="0"/><line nr="1328" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="646" covered="1822"/><counter type="BRANCH" missed="37" covered="55"/><counter type="LINE" missed="119" covered="328"/><counter type="COMPLEXITY" missed="89" covered="217"/><counter type="METHOD" missed="67" covered="193"/><counter type="CLASS" missed="5" covered="21"/></sourcefile><sourcefile name="Try.java"><line nr="42" mi="0" ci="7" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="44" mi="0" ci="6" mb="0" cb="0"/><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="6" mb="0" cb="0"/><line nr="59" mi="0" ci="1" mb="0" cb="0"/><line nr="60" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="10" mb="0" cb="2"/><line nr="78" mi="0" ci="3" mb="0" cb="2"/><line nr="79" mi="0" ci="4" mb="0" cb="0"/><line nr="81" mi="0" ci="5" mb="0" cb="0"/><line nr="82" mi="0" ci="1" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="0"/><line nr="95" mi="0" ci="6" mb="0" cb="0"/><line nr="106" mi="0" ci="6" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="2"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="15" mb="0" cb="0"/><line nr="167" mi="0" ci="8" mb="0" cb="0"/><line nr="177" mi="0" ci="3" mb="0" cb="2"/><line nr="178" mi="0" ci="7" mb="0" cb="0"/><line nr="180" mi="0" ci="9" mb="0" cb="0"/><line nr="195" mi="0" ci="3" mb="0" cb="2"/><line nr="196" mi="0" ci="2" mb="0" cb="0"/><line nr="199" mi="0" ci="5" mb="0" cb="2"/><line nr="200" mi="0" ci="2" mb="0" cb="0"/><line nr="202" mi="0" ci="17" mb="0" cb="0"/><line nr="204" mi="0" ci="1" mb="0" cb="0"/><line nr="205" mi="0" ci="6" mb="0" cb="0"/><line nr="212" mi="4" ci="0" mb="0" cb="0"/><line nr="213" mi="5" ci="0" mb="0" cb="0"/><line nr="217" mi="0" ci="3" mb="0" cb="2"/><line nr="218" mi="0" ci="2" mb="0" cb="0"/><line nr="220" mi="0" ci="22" mb="0" cb="0"/><line nr="225" mi="4" ci="0" mb="0" cb="0"/><line nr="226" mi="5" ci="0" mb="0" cb="0"/><line nr="238" mi="0" ci="3" mb="0" cb="2"/><line nr="239" mi="0" ci="3" mb="0" cb="0"/><line nr="241" mi="0" ci="8" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="2"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="251" mi="0" ci="8" mb="0" cb="0"/><line nr="252" mi="0" ci="1" mb="0" cb="0"/><line nr="253" mi="0" ci="6" mb="0" cb="0"/><line nr="297" mi="2" ci="0" mb="0" cb="0"/><line nr="309" mi="0" ci="9" mb="0" cb="2"/><line nr="321" mi="0" ci="8" mb="0" cb="0"/><line nr="345" mi="0" ci="3" mb="0" cb="2"/><line nr="346" mi="0" ci="3" mb="0" cb="0"/><line nr="348" mi="0" ci="10" mb="0" cb="0"/><line nr="354" mi="3" ci="0" mb="0" cb="0"/><line nr="365" mi="0" ci="3" mb="0" cb="2"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="368" mi="0" ci="2" mb="0" cb="0"/><line nr="369" mi="0" ci="1" mb="0" cb="0"/><line nr="370" mi="0" ci="6" mb="0" cb="0"/><line nr="373" mi="0" ci="2" mb="0" cb="0"/><line nr="385" mi="0" ci="3" mb="0" cb="2"/><line nr="387" mi="0" ci="4" mb="0" cb="0"/><line nr="388" mi="0" ci="2" mb="0" cb="0"/><line nr="389" mi="1" ci="0" mb="0" cb="0"/><line nr="390" mi="6" ci="0" mb="0" cb="0"/><line nr="393" mi="0" ci="2" mb="0" cb="0"/><line nr="398" mi="0" ci="3" mb="0" cb="2"/><line nr="399" mi="0" ci="5" mb="0" cb="0"/><line nr="401" mi="0" ci="3" mb="0" cb="0"/><line nr="406" mi="0" ci="3" mb="0" cb="2"/><line nr="407" mi="0" ci="4" mb="0" cb="0"/><line nr="409" mi="0" ci="1" mb="0" cb="0"/><line nr="412" mi="0" ci="3" mb="0" cb="2"/><line nr="413" mi="0" ci="6" mb="0" cb="0"/><line nr="415" mi="0" ci="3" mb="0" cb="0"/><line nr="427" mi="0" ci="3" mb="0" cb="2"/><line nr="428" mi="0" ci="4" mb="0" cb="0"/><line nr="430" mi="0" ci="2" mb="0" cb="0"/><line nr="441" mi="0" ci="3" mb="0" cb="2"/><line nr="442" mi="0" ci="10" mb="0" cb="0"/><line nr="444" mi="0" ci="2" mb="0" cb="0"/><line nr="458" mi="0" ci="3" mb="0" cb="2"/><line nr="460" mi="0" ci="6" mb="0" cb="0"/><line nr="461" mi="0" ci="1" mb="0" cb="0"/><line nr="462" mi="0" ci="6" mb="0" cb="0"/><line nr="465" mi="0" ci="2" mb="0" cb="0"/><line nr="470" mi="0" ci="3" mb="0" cb="2"/><line nr="471" mi="0" ci="4" mb="0" cb="0"/><line nr="473" mi="0" ci="4" mb="0" cb="0"/><line nr="486" mi="4" ci="0" mb="0" cb="0"/><line nr="487" mi="4" ci="0" mb="0" cb="0"/><line nr="493" mi="0" ci="3" mb="1" cb="1"/><line nr="494" mi="0" ci="3" mb="0" cb="0"/><line nr="495" mi="3" ci="0" mb="2" cb="0"/><line nr="496" mi="3" ci="0" mb="0" cb="0"/><line nr="497" mi="15" ci="0" mb="2" cb="0"/><line nr="499" mi="3" ci="0" mb="0" cb="0"/><line nr="500" mi="3" ci="0" mb="2" cb="0"/><line nr="501" mi="7" ci="0" mb="0" cb="0"/><line nr="503" mi="5" ci="0" mb="0" cb="0"/><line nr="576" mi="11" ci="0" mb="2" cb="0"/><line nr="629" mi="0" ci="2" mb="0" cb="0"/><line nr="630" mi="0" ci="3" mb="0" cb="0"/><line nr="631" mi="0" ci="1" mb="0" cb="0"/><line nr="635" mi="0" ci="3" mb="0" cb="0"/><line nr="640" mi="0" ci="5" mb="0" cb="0"/><line nr="645" mi="0" ci="2" mb="0" cb="0"/><line nr="650" mi="0" ci="2" mb="0" cb="0"/><line nr="655" mi="0" ci="2" mb="0" cb="0"/><line nr="660" mi="0" ci="17" mb="1" cb="5"/><line nr="665" mi="0" ci="4" mb="0" cb="0"/><line nr="670" mi="0" ci="2" mb="0" cb="0"/><line nr="675" mi="0" ci="15" mb="0" cb="0"/><line nr="699" mi="0" ci="2" mb="0" cb="0"/><line nr="700" mi="0" ci="4" mb="0" cb="0"/><line nr="701" mi="0" ci="4" mb="0" cb="0"/><line nr="702" mi="0" ci="1" mb="0" cb="0"/><line nr="707" mi="0" ci="3" mb="0" cb="0"/><line nr="712" mi="0" ci="4" mb="0" cb="0"/><line nr="717" mi="0" ci="2" mb="0" cb="0"/><line nr="722" mi="0" ci="2" mb="0" cb="0"/><line nr="727" mi="0" ci="2" mb="0" cb="0"/><line nr="732" mi="0" ci="17" mb="1" cb="5"/><line nr="737" mi="0" ci="2" mb="0" cb="0"/><line nr="742" mi="0" ci="5" mb="0" cb="0"/><line nr="747" mi="0" ci="16" mb="0" cb="0"/><line nr="762" mi="0" ci="3" mb="0" cb="0"/><line nr="763" mi="0" ci="1" mb="0" cb="0"/><line nr="773" mi="0" ci="8" mb="2" cb="2"/><line nr="774" mi="1" ci="10" mb="1" cb="1"/><line nr="779" mi="0" ci="4" mb="0" cb="0"/><line nr="784" mi="0" ci="12" mb="0" cb="0"/><line nr="805" mi="0" ci="3" mb="0" cb="0"/><line nr="806" mi="0" ci="1" mb="0" cb="0"/><line nr="821" mi="0" ci="4" mb="0" cb="0"/><line nr="822" mi="0" ci="3" mb="0" cb="2"/><line nr="823" mi="0" ci="3" mb="0" cb="0"/><line nr="824" mi="0" ci="3" mb="0" cb="2"/><line nr="825" mi="0" ci="3" mb="0" cb="0"/><line nr="827" mi="0" ci="16" mb="2" cb="6"/><line nr="831" mi="0" ci="2" mb="0" cb="2"/><line nr="832" mi="0" ci="6" mb="0" cb="0"/><line nr="834" mi="0" ci="5" mb="0" cb="0"/><line nr="847" mi="0" ci="8" mb="2" cb="2"/><line nr="848" mi="1" ci="10" mb="1" cb="1"/><line nr="853" mi="0" ci="4" mb="0" cb="0"/><line nr="858" mi="0" ci="12" mb="0" cb="0"/><counter type="INSTRUCTION" missed="90" covered="614"/><counter type="BRANCH" missed="19" covered="69"/><counter type="LINE" missed="18" covered="128"/><counter type="COMPLEXITY" missed="23" covered="91"/><counter type="METHOD" missed="8" covered="62"/><counter type="CLASS" missed="1" covered="5"/></sourcefile><sourcefile name="Either.java"><line nr="57" mi="0" ci="6" mb="0" cb="0"/><line nr="69" mi="0" ci="6" mb="0" cb="0"/><line nr="100" mi="0" ci="6" mb="0" cb="0"/><line nr="109" mi="0" ci="6" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="3" mb="0" cb="2"/><line nr="126" mi="0" ci="9" mb="0" cb="0"/><line nr="128" mi="0" ci="9" mb="0" cb="0"/><line nr="141" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="3" mb="0" cb="2"/><line nr="144" mi="0" ci="5" mb="0" cb="0"/><line nr="146" mi="0" ci="5" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="3" mb="0" cb="2"/><line nr="160" mi="0" ci="3" mb="0" cb="0"/><line nr="162" mi="0" ci="5" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="0" cb="2"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="1" mb="0" cb="0"/><line nr="188" mi="0" ci="4" mb="0" cb="0"/><line nr="189" mi="0" ci="3" mb="0" cb="2"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><line nr="192" mi="0" ci="6" mb="0" cb="0"/><line nr="202" mi="0" ci="3" mb="0" cb="2"/><line nr="203" mi="0" ci="7" mb="0" cb="0"/><line nr="205" mi="0" ci="7" mb="0" cb="0"/><line nr="213" mi="3" ci="0" mb="0" cb="0"/><line nr="228" mi="4" ci="0" mb="0" cb="0"/><line nr="229" mi="3" ci="0" mb="2" cb="0"/><line nr="230" mi="8" ci="0" mb="0" cb="0"/><line nr="232" mi="2" ci="0" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="1" cb="1"/><line nr="249" mi="0" ci="6" mb="0" cb="0"/><line nr="251" mi="2" ci="0" mb="0" cb="0"/><line nr="265" mi="0" ci="4" mb="0" cb="0"/><line nr="266" mi="0" ci="3" mb="1" cb="1"/><line nr="267" mi="0" ci="6" mb="0" cb="0"/><line nr="269" mi="2" ci="0" mb="0" cb="0"/><line nr="285" mi="0" ci="4" mb="0" cb="0"/><line nr="286" mi="0" ci="5" mb="0" cb="0"/><line nr="300" mi="4" ci="0" mb="0" cb="0"/><line nr="301" mi="5" ci="0" mb="0" cb="0"/><line nr="315" mi="0" ci="3" mb="0" cb="0"/><line nr="325" mi="2" ci="0" mb="0" cb="0"/><line nr="330" mi="0" ci="3" mb="0" cb="2"/><line nr="331" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="2" mb="0" cb="0"/><line nr="339" mi="4" ci="0" mb="0" cb="0"/><line nr="340" mi="3" ci="0" mb="2" cb="0"/><line nr="341" mi="4" ci="0" mb="0" cb="0"/><line nr="343" mi="2" ci="0" mb="0" cb="0"/><line nr="350" mi="3" ci="0" mb="2" cb="0"/><line nr="351" mi="3" ci="0" mb="0" cb="0"/><line nr="352" mi="3" ci="0" mb="2" cb="0"/><line nr="353" mi="3" ci="0" mb="0" cb="0"/><line nr="354" mi="10" ci="0" mb="2" cb="0"/><line nr="356" mi="3" ci="0" mb="0" cb="0"/><line nr="357" mi="10" ci="0" mb="2" cb="0"/><line nr="385" mi="0" ci="2" mb="0" cb="0"/><line nr="386" mi="0" ci="3" mb="0" cb="0"/><line nr="387" mi="0" ci="1" mb="0" cb="0"/><line nr="391" mi="7" ci="0" mb="0" cb="0"/><line nr="396" mi="0" ci="4" mb="0" cb="0"/><line nr="406" mi="2" ci="0" mb="0" cb="0"/><line nr="417" mi="0" ci="4" mb="0" cb="2"/><line nr="418" mi="0" ci="4" mb="0" cb="0"/><line nr="420" mi="0" ci="5" mb="0" cb="0"/><line nr="433" mi="0" ci="10" mb="0" cb="2"/><line nr="444" mi="0" ci="4" mb="0" cb="0"/><line nr="445" mi="0" ci="4" mb="0" cb="2"/><line nr="446" mi="0" ci="4" mb="0" cb="0"/><line nr="448" mi="0" ci="6" mb="0" cb="0"/><line nr="458" mi="0" ci="4" mb="0" cb="0"/><line nr="459" mi="0" ci="4" mb="0" cb="2"/><line nr="460" mi="0" ci="5" mb="0" cb="0"/><line nr="462" mi="0" ci="1" mb="0" cb="0"/><line nr="474" mi="0" ci="4" mb="0" cb="0"/><line nr="475" mi="0" ci="4" mb="0" cb="2"/><line nr="476" mi="0" ci="4" mb="0" cb="0"/><line nr="478" mi="0" ci="7" mb="0" cb="0"/><line nr="488" mi="0" ci="3" mb="0" cb="0"/><line nr="500" mi="0" ci="4" mb="0" cb="0"/><line nr="501" mi="0" ci="4" mb="0" cb="2"/><line nr="502" mi="0" ci="4" mb="0" cb="0"/><line nr="503" mi="0" ci="9" mb="0" cb="2"/><line nr="505" mi="0" ci="2" mb="0" cb="0"/><line nr="511" mi="4" ci="0" mb="0" cb="0"/><line nr="512" mi="5" ci="0" mb="0" cb="0"/><line nr="526" mi="0" ci="4" mb="0" cb="0"/><line nr="527" mi="0" ci="4" mb="0" cb="2"/><line nr="528" mi="0" ci="9" mb="0" cb="0"/><line nr="530" mi="0" ci="2" mb="0" cb="0"/><line nr="543" mi="0" ci="4" mb="0" cb="0"/><line nr="544" mi="0" ci="4" mb="0" cb="2"/><line nr="545" mi="0" ci="6" mb="0" cb="0"/><line nr="547" mi="0" ci="2" mb="0" cb="0"/><line nr="553" mi="3" ci="0" mb="0" cb="0"/><line nr="564" mi="0" ci="4" mb="0" cb="0"/><line nr="565" mi="0" ci="4" mb="0" cb="2"/><line nr="566" mi="0" ci="5" mb="0" cb="0"/><line nr="568" mi="0" ci="2" mb="0" cb="0"/><line nr="580" mi="4" ci="0" mb="0" cb="0"/><line nr="581" mi="4" ci="0" mb="0" cb="0"/><line nr="587" mi="0" ci="3" mb="1" cb="1"/><line nr="588" mi="0" ci="3" mb="0" cb="0"/><line nr="589" mi="3" ci="0" mb="2" cb="0"/><line nr="590" mi="3" ci="0" mb="0" cb="0"/><line nr="591" mi="10" ci="0" mb="2" cb="0"/><line nr="592" mi="3" ci="0" mb="0" cb="0"/><line nr="594" mi="3" ci="0" mb="0" cb="0"/><line nr="595" mi="10" ci="0" mb="2" cb="0"/><line nr="596" mi="3" ci="0" mb="0" cb="0"/><line nr="602" mi="0" ci="4" mb="0" cb="2"/><line nr="603" mi="0" ci="5" mb="0" cb="0"/><line nr="605" mi="0" ci="2" mb="0" cb="0"/><line nr="611" mi="0" ci="17" mb="1" cb="5"/><line nr="616" mi="0" ci="4" mb="0" cb="0"/><line nr="621" mi="0" ci="2" mb="0" cb="0"/><line nr="626" mi="0" ci="15" mb="0" cb="0"/><line nr="641" mi="0" ci="2" mb="0" cb="0"/><line nr="642" mi="0" ci="3" mb="0" cb="0"/><line nr="643" mi="0" ci="1" mb="0" cb="0"/><line nr="647" mi="7" ci="0" mb="0" cb="0"/><line nr="652" mi="0" ci="4" mb="0" cb="0"/><line nr="662" mi="2" ci="0" mb="0" cb="0"/><line nr="673" mi="0" ci="4" mb="0" cb="2"/><line nr="674" mi="0" ci="4" mb="0" cb="0"/><line nr="676" mi="0" ci="5" mb="0" cb="0"/><line nr="689" mi="0" ci="5" mb="0" cb="0"/><line nr="700" mi="0" ci="4" mb="0" cb="0"/><line nr="701" mi="0" ci="5" mb="0" cb="0"/><line nr="710" mi="0" ci="4" mb="0" cb="0"/><line nr="711" mi="0" ci="4" mb="0" cb="0"/><line nr="712" mi="0" ci="1" mb="0" cb="0"/><line nr="724" mi="0" ci="4" mb="0" cb="0"/><line nr="725" mi="0" ci="5" mb="0" cb="0"/><line nr="734" mi="0" ci="3" mb="0" cb="0"/><line nr="746" mi="0" ci="4" mb="0" cb="0"/><line nr="747" mi="0" ci="5" mb="0" cb="0"/><line nr="752" mi="4" ci="0" mb="0" cb="0"/><line nr="753" mi="5" ci="0" mb="0" cb="0"/><line nr="767" mi="0" ci="4" mb="0" cb="0"/><line nr="768" mi="0" ci="4" mb="0" cb="2"/><line nr="769" mi="0" ci="9" mb="0" cb="0"/><line nr="771" mi="0" ci="2" mb="0" cb="0"/><line nr="784" mi="0" ci="4" mb="0" cb="0"/><line nr="785" mi="0" ci="4" mb="0" cb="2"/><line nr="786" mi="0" ci="6" mb="0" cb="0"/><line nr="788" mi="0" ci="2" mb="0" cb="0"/><line nr="794" mi="3" ci="0" mb="0" cb="0"/><line nr="805" mi="0" ci="4" mb="0" cb="0"/><line nr="806" mi="0" ci="4" mb="0" cb="2"/><line nr="807" mi="0" ci="5" mb="0" cb="0"/><line nr="809" mi="0" ci="2" mb="0" cb="0"/><line nr="821" mi="4" ci="0" mb="0" cb="0"/><line nr="822" mi="4" ci="0" mb="0" cb="0"/><line nr="828" mi="0" ci="3" mb="1" cb="1"/><line nr="829" mi="0" ci="3" mb="0" cb="0"/><line nr="830" mi="3" ci="0" mb="2" cb="0"/><line nr="831" mi="3" ci="0" mb="0" cb="0"/><line nr="832" mi="10" ci="0" mb="2" cb="0"/><line nr="833" mi="3" ci="0" mb="0" cb="0"/><line nr="835" mi="3" ci="0" mb="0" cb="0"/><line nr="836" mi="10" ci="0" mb="2" cb="0"/><line nr="837" mi="3" ci="0" mb="0" cb="0"/><line nr="843" mi="0" ci="4" mb="0" cb="0"/><line nr="848" mi="0" ci="17" mb="1" cb="5"/><line nr="853" mi="0" ci="4" mb="0" cb="0"/><line nr="858" mi="0" ci="2" mb="0" cb="0"/><line nr="863" mi="0" ci="15" mb="0" cb="0"/><line nr="886" mi="0" ci="2" mb="0" cb="0"/><line nr="887" mi="0" ci="3" mb="0" cb="0"/><line nr="888" mi="0" ci="1" mb="0" cb="0"/><line nr="892" mi="5" ci="0" mb="0" cb="0"/><line nr="897" mi="0" ci="3" mb="0" cb="0"/><line nr="902" mi="0" ci="2" mb="0" cb="0"/><line nr="907" mi="0" ci="2" mb="0" cb="0"/><line nr="912" mi="0" ci="17" mb="1" cb="5"/><line nr="917" mi="0" ci="4" mb="0" cb="0"/><line nr="922" mi="0" ci="2" mb="0" cb="0"/><line nr="927" mi="0" ci="15" mb="0" cb="0"/><line nr="950" mi="0" ci="2" mb="0" cb="0"/><line nr="951" mi="0" ci="3" mb="0" cb="0"/><line nr="952" mi="0" ci="1" mb="0" cb="0"/><line nr="956" mi="0" ci="3" mb="0" cb="0"/><line nr="961" mi="5" ci="0" mb="0" cb="0"/><line nr="966" mi="0" ci="2" mb="0" cb="0"/><line nr="971" mi="0" ci="2" mb="0" cb="0"/><line nr="976" mi="0" ci="17" mb="1" cb="5"/><line nr="981" mi="0" ci="4" mb="0" cb="0"/><line nr="986" mi="0" ci="2" mb="0" cb="0"/><line nr="991" mi="0" ci="15" mb="0" cb="0"/><counter type="INSTRUCTION" missed="221" covered="663"/><counter type="BRANCH" missed="32" covered="68"/><counter type="LINE" missed="51" covered="145"/><counter type="COMPLEXITY" missed="38" covered="97"/><counter type="METHOD" missed="18" covered="67"/><counter type="CLASS" missed="0" covered="5"/></sourcefile><counter type="INSTRUCTION" missed="1010" covered="4271"/><counter type="BRANCH" missed="101" covered="263"/><counter type="LINE" missed="200" covered="844"/><counter type="COMPLEXITY" missed="165" covered="526"/><counter type="METHOD" missed="98" covered="411"/><counter type="CLASS" missed="6" covered="45"/></package><counter type="INSTRUCTION" missed="3717" covered="48137"/><counter type="BRANCH" missed="232" covered="3731"/><counter type="LINE" missed="386" covered="9016"/><counter type="COMPLEXITY" missed="598" covered="5519"/><counter type="METHOD" missed="412" covered="3722"/><counter type="CLASS" missed="7" covered="257"/></report>